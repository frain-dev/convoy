name: Build and Push Dev Docker Images

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Tag to identify development Docker imag"
        required: true
  push:
    tags:
      - dev-*

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  IMAGE_NAME: getconvoy/convoy
  DEV_VERSION: ${{ github.ref_name }}

jobs:
  build_ui:
    name: Build UI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Build Artifact
        run: "make ui_install type=ce"

      - name: Archive Build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: dist-without-markdown-dev
          path: |
            web/ui/dashboard/dist
            !web/ui/dashboard/dist/**/*.md

  build-and-push-arch:
    runs-on: ubuntu-latest
    needs: [build_ui]
    strategy:
      matrix:
         include:
           - arch: amd64
             platform: linux/amd64
             dockerfile: release.Dockerfile
           - arch: arm64
             platform: linux/arm64
             dockerfile: release.Dockerfile

    steps:
      - uses: actions/checkout@v08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
            fetch-depth: 0

      - name: Download Build Artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
            name: dist-without-markdown-dev
            path: api/ui/build

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
        with:
            go-version: 1.24

      - name: Get and verify dependencies
        run: go mod tidy && go mod download && go mod verify

      - name: Go vet
        run: go vet ./...

      - name: Build app to make sure there are zero issues
        run: |
            export CGO_ENABLED=0
            export GOOS=linux
            export GOARCH=${{ matrix.arch }}
            go build -o convoy ./cmd

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
            username: ${{ env.DOCKER_HUB_USERNAME }}
            password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Build and push arch specific dev images
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
            context: .
            file: ${{ matrix.dockerfile }}
            platforms: ${{ matrix.platform }}
            push: true
            tags: |
                ${{ env.IMAGE_NAME }}:${{ env.DEV_VERSION }}-${{ matrix.arch }}
                ${{ env.IMAGE_NAME }}:dev-latest-${{ matrix.arch }}
            build-args: |
                ARCH=${{ matrix.arch }}

  build-and-push-default:
    runs-on: ubuntu-latest
    needs: [build-and-push-arch]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
            username: ${{ env.DOCKER_HUB_USERNAME }}
            password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Create and push manifest for dev-latest
        run: |
            docker buildx imagetools create -t ${{ env.IMAGE_NAME }}:dev-latest \
              ${{ env.IMAGE_NAME }}:dev-latest-amd64 \
              ${{ env.IMAGE_NAME }}:dev-latest-arm64

      - name: Create and push manifest for dev version
        run: |
            docker buildx imagetools create -t ${{ env.IMAGE_NAME }}:${{ env.DEV_VERSION }} \
              ${{ env.IMAGE_NAME }}:${{ env.DEV_VERSION }}-amd64 \
              ${{ env.IMAGE_NAME }}:${{ env.DEV_VERSION }}-arm64
