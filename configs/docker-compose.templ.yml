version: "3"

services:
    web:
        image: docker.cloudsmith.io/convoy/convoy/frain-dev/convoy:$VERSION
        entrypoint: [ "/bin/sh" ]
        command: /compose/start
        hostname: web
        container_name: web
        volumes:
            - ./convoy.json:/convoy.json
            - ./compose:/compose
        restart: on-failure
        depends_on:
            - mongo1
            - mongo2
            - mongo3
            - redis_server
            - typesense
        networks:
            - backendCluster

    scheduler:
        image: docker.cloudsmith.io/convoy/convoy/frain-dev/convoy:$VERSION
        entrypoint: ["./cmd", "scheduler", "--config", "convoy.json"]
        volumes:
            - ./convoy.json:/convoy.json
        restart: on-failure
        depends_on:
            - mongo1
            - redis_server
        networks:
            - backendCluster

    worker:
        image: docker.cloudsmith.io/convoy/convoy/frain-dev/convoy:$VERSION
        entrypoint: ["./cmd", "worker", "--config", "convoy.json"]
        volumes:
            - ./convoy.json:/convoy.json
        restart: on-failure
        depends_on:
            - mongo1
            - redis_server
        networks:
            - backendCluster

    mongo1:
        image: mongo:latest
        hostname: mongo1
        container_name: mongo1
        restart: always
        entrypoint:
            [
                "/usr/bin/mongod",
                "--bind_ip",
                "localhost,mongo1",
                "--replSet",
                "myReplicaSet",
                "--journal",
                "--dbpath",
                "/data/db",
            ]
        volumes:
            - ./mongo1-data:/data/db
        networks:
            - backendCluster

    mongo2:
        image: mongo:latest
        hostname: mongo2
        container_name: mongo2
        restart: always
        entrypoint:
            [
                "/usr/bin/mongod",
                "--bind_ip",
                "localhost,mongo2",
                "--replSet",
                "myReplicaSet",
                "--journal",
                "--dbpath",
                "/data/db",
            ]
        volumes:
            - ./mongo2-data:/data/db
        networks:
            - backendCluster

    mongo3:
        image: mongo:latest
        hostname: mongo3
        container_name: mongo3
        restart: always
        entrypoint:
            [
                "/usr/bin/mongod",
                "--bind_ip",
                "localhost,mongo3",
                "--replSet",
                "myReplicaSet",
                "--journal",
                "--dbpath",
                "/data/db",
            ]
        volumes:
            - ./mongo3-data:/data/db
        networks:
            - backendCluster

    redis_server:
        image: redis:alpine
        hostname: redis_server
        container_name: redis_server
        restart: always
        networks:
            - backendCluster

    typesense:
        image: typesense/typesense:0.22.2
        hostname: typesense
        container_name: typesense
        restart: always
        environment:
            TYPESENSE_DATA_DIR: /data/typesense
            TYPESENSE_ENABLE_CORS: "true"
            TYPESENSE_API_KEY: "convoy"
        volumes:
            - ./typesense-data:/data/typesense
        networks:
            - backendCluster

    caddy:
        image: caddy
        restart: unless-stopped
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./caddyfile:/etc/caddy/Caddyfile
        depends_on:
            - web
        networks:
            - backendCluster

networks:
    backendCluster:
