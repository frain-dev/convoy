{"hash":"e984a853c6f9e443fbb6f041b8453c977350f89b","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport Chart from 'chart.js/auto';\nimport { format } from 'date-fns';\nimport * as i2 from '@angular/router';\nimport * as i3 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i4 from '@angular/material/datepicker';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport * as Prism from 'prismjs';\nimport * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-yaml';\nimport 'prismjs/components/prism-scss';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/plugins/line-numbers/prism-line-numbers';\nimport { MatNativeDateModule } from '@angular/material/core';\n\nclass ConvoyAppService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    authDetails() {\n        const authDetails = localStorage.getItem('CONVOY_AUTH');\n        if (authDetails) {\n            const { username, password } = JSON.parse(authDetails);\n            return {\n                token: btoa(`${username + ':' + password}`),\n                authState: true,\n            };\n        }\n        else {\n            return { authState: false };\n        }\n    }\n    request(requestDetails) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const requestHeader = new HttpHeaders({\n                    Authorization: `Basic ${this.authDetails().token}`,\n                });\n                const requestResponse = await this.httpClient\n                    .request(requestDetails.method, requestDetails.url, {\n                    headers: requestHeader,\n                    body: requestDetails.body,\n                })\n                    .toPromise();\n                return resolve(requestResponse);\n            }\n            catch (error) {\n                return reject(error);\n            }\n        });\n    }\n    showNotification(details) {\n        if (!details.message)\n            return;\n        const notificationElement = document.querySelector('.app-notification');\n        if (notificationElement) {\n            notificationElement.classList.add('show');\n            notificationElement.innerHTML = details.message;\n        }\n        setTimeout(() => {\n            notificationElement?.classList.remove('show');\n        }, 3000);\n    }\n}\nConvoyAppService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\nConvoyAppService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass PrismComponent {\n    constructor() { }\n    ngAfterViewInit() {\n        Prism.highlightElement(this.codeEle.nativeElement);\n    }\n    ngOnChanges() {\n        if (this.codeEle?.nativeElement) {\n            this.codeEle.nativeElement.textContent = this.code;\n            Prism.highlightElement(this.codeEle.nativeElement);\n        }\n    }\n}\nPrismComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPrismComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: PrismComponent, selector: \"prism\", inputs: { code: \"code\", language: \"language\" }, viewQueries: [{ propertyName: \"codeEle\", first: true, predicate: [\"codeEle\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<pre *ngIf=\\\"language\\\" class=\\\"language-{{ language }} line-numbers\\\">\\n<code #codeEle class=\\\"language-{{ language }}\\\">{{code}}</code>\\n</pre>\\n\", styles: [\"\"], directives: [{ type: i6.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'prism', template: \"<pre *ngIf=\\\"language\\\" class=\\\"language-{{ language }} line-numbers\\\">\\n<code #codeEle class=\\\"language-{{ language }}\\\">{{code}}</code>\\n</pre>\\n\", styles: [\"\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { codeEle: [{\n                type: ViewChild,\n                args: ['codeEle']\n            }], code: [{\n                type: Input\n            }], language: [{\n                type: Input\n            }] } });\n\nclass ConvoyAppComponent {\n    constructor(convyAppService, router, formBuilder, route) {\n        this.convyAppService = convyAppService;\n        this.router = router;\n        this.formBuilder = formBuilder;\n        this.route = route;\n        this.showFilterCalendar = false;\n        this.tabs = ['events', 'event deliveries', 'apps'];\n        this.activeTab = 'events';\n        this.showEventFilterCalendar = false;\n        this.eventDateFilterActive = false;\n        this.displayedEvents = [];\n        this.eventDetailsTabs = [\n            { id: 'data', label: 'Event' },\n            { id: 'response', label: 'Response' },\n            { id: 'request', label: 'Request' }\n        ];\n        this.eventDetailsActiveTab = 'data';\n        this.dashboardData = { apps: 0, events_sent: 0 };\n        this.eventApp = '';\n        this.eventDeliveriesApp = '';\n        this.eventsPage = 1;\n        this.eventDeliveriesPage = 1;\n        this.appsPage = 1;\n        this.dashboardFrequency = 'daily';\n        this.statsDateRange = this.formBuilder.group({\n            startDate: [\n                {\n                    value: new Date(new Date().setDate(new Date().getDate() - 30)),\n                    disabled: true\n                }\n            ],\n            endDate: [{ value: new Date(), disabled: true }]\n        });\n        this.eventsFilterDateRange = this.formBuilder.group({\n            startDate: [{ value: '', disabled: true }],\n            endDate: [{ value: '', disabled: true }]\n        });\n        this.eventDeliveriesFilterDateRange = this.formBuilder.group({\n            startDate: [{ value: '', disabled: true }],\n            endDate: [{ value: '', disabled: true }]\n        });\n        this.selectedEventsFromEventDeliveriesTable = [];\n        this.displayedEventDeliveries = [];\n        this.sidebarEventDeliveries = [];\n        this.eventDeliveryFilteredByEventId = '';\n        this.groups = [];\n        this.allEventdeliveriesChecked = false;\n        this.eventDeliveryStatuses = ['', 'Success', 'Failure', 'Retry', 'Scheduled', 'Processing', 'Discarded'];\n        this.eventDeliveryFilteredByStatus = '';\n        this.showOverlay = false;\n        this.showEventDeliveriesStatusDropdown = false;\n        this.isProduction = false;\n    }\n    async ngOnInit() {\n        await this.initDashboard();\n    }\n    async initDashboard() {\n        await this.getGroups();\n        this.getFiltersFromURL();\n        await Promise.all([this.getConfigDetails(), this.fetchDashboardData(), this.getEvents(), this.getApps(), this.getEventDeliveries()]);\n        // get active tab from url and apply, after getting the details from above requests so that the data is available ahead\n        this.toggleActiveTab(this.route.snapshot.queryParams.activeTab ?? 'events');\n        return;\n    }\n    toggleActiveTab(tab) {\n        this.activeTab = tab;\n        this.addFilterToURL({ section: 'logTab' });\n        if (tab === 'apps' && this.apps?.content.length > 0) {\n            this.detailsItem = this.apps?.content[0];\n        }\n        else if (tab === 'events' && this.events?.content.length > 0) {\n            this.eventDetailsActiveTab = 'data';\n            this.detailsItem = this.events?.content[0];\n            this.getEventDeliveriesForSidebar(this.detailsItem.uid);\n        }\n        else if (tab === 'event deliveries' && this.eventDeliveries?.content.length > 0) {\n            this.detailsItem = this.eventDeliveries?.content[0];\n            this.getDelieveryAttempts(this.detailsItem.uid);\n        }\n    }\n    async getConfigDetails() {\n        try {\n            const organisationDetailsResponse = await this.convyAppService.request({\n                url: this.getAPIURL(`/dashboard/config?groupID=${this.activeGroup || ''}`),\n                method: 'get'\n            });\n            this.organisationDetails = organisationDetailsResponse.data;\n        }\n        catch (error) { }\n    }\n    getFiltersFromURL() {\n        const filters = this.route.snapshot.queryParams;\n        if (Object.keys(filters).length == 0)\n            return;\n        // for events filters\n        this.eventsFilterDateRange.patchValue({\n            startDate: filters.eventsStartDate ? new Date(filters.eventsStartDate) : '',\n            endDate: filters.eventsEndDate ? new Date(filters.eventsEndDate) : ''\n        });\n        this.eventApp = filters.eventsApp ?? '';\n        // for event deliveries filters\n        this.eventDeliveriesFilterDateRange.patchValue({\n            startDate: filters.eventDelsStartDate ? new Date(filters.eventDelsStartDate) : '',\n            endDate: filters.eventDelsEndDate ? new Date(filters.eventDelsEndDate) : ''\n        });\n        this.eventDeliveriesApp = filters.eventDelsApp ?? '';\n        this.eventDeliveryFilteredByStatus = filters.eventDelsStatus ?? null;\n    }\n    async fetchDashboardData() {\n        try {\n            const { startDate, endDate } = this.setDateForFilter(this.statsDateRange.value);\n            const dashboardResponse = await this.convyAppService.request({\n                url: this.getAPIURL(`/dashboard/summary?groupID=${this.activeGroup || ''}&startDate=${startDate || ''}&endDate=${endDate || ''}&type=${this.dashboardFrequency}`),\n                method: 'get'\n            });\n            this.dashboardData = dashboardResponse.data;\n            let labelsDateFormat = '';\n            if (this.dashboardFrequency === 'daily')\n                labelsDateFormat = 'do, MMM';\n            else if (this.dashboardFrequency === 'monthly')\n                labelsDateFormat = 'MMM';\n            else if (this.dashboardFrequency === 'yearly')\n                labelsDateFormat = 'yyyy';\n            const chartData = dashboardResponse.data.event_data;\n            const labels = [...chartData.map((label) => label.data.date)].map(date => {\n                return this.dashboardFrequency === 'weekly' ? date : format(new Date(date), labelsDateFormat);\n            });\n            labels.unshift('0');\n            const dataSet = [0, ...chartData.map((label) => label.count)];\n            const data = {\n                labels,\n                datasets: [\n                    {\n                        data: dataSet,\n                        fill: false,\n                        borderColor: '#477DB3',\n                        tension: 0.5,\n                        yAxisID: 'yAxis',\n                        xAxisID: 'xAxis'\n                    }\n                ]\n            };\n            const options = {\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                },\n                scales: {\n                    xAxis: {\n                        display: true,\n                        grid: {\n                            display: false\n                        }\n                    }\n                }\n            };\n            if (!Chart.getChart('dahboard_events_chart') || !Chart.getChart('dahboard_events_chart')?.canvas) {\n                new Chart('dahboard_events_chart', {\n                    type: 'line',\n                    data,\n                    options\n                });\n            }\n            else {\n                const currentChart = Chart.getChart('dahboard_events_chart');\n                if (currentChart) {\n                    currentChart.data.labels = labels;\n                    currentChart.data.datasets[0].data = dataSet;\n                    currentChart.update();\n                }\n            }\n            console.log(Chart.getChart('dahboard_events_chart'));\n        }\n        catch (error) { }\n    }\n    setDateForFilter(requestDetails) {\n        if (!requestDetails.endDate && !requestDetails.startDate)\n            return { startDate: '', endDate: '' };\n        const startDate = requestDetails.startDate ? `${format(requestDetails.startDate, 'yyyy-M-d')}T00:00:00` : '';\n        const endDate = requestDetails.endDate ? `${format(requestDetails.endDate, 'yyyy-M-d')}T00:00:00` : '';\n        return { startDate, endDate };\n    }\n    getDate(date) {\n        const months = ['Jan', 'Feb', 'Mar', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n        const _date = new Date(date);\n        const day = _date.getDate();\n        const month = _date.getMonth();\n        const year = _date.getFullYear();\n        return `${day} ${months[month]}, ${year}`;\n    }\n    setEventsDisplayed(events) {\n        const dateCreateds = events.map((event) => this.getDate(event.created_at));\n        const uniqueDateCreateds = [...new Set(dateCreateds)];\n        const displayedEvents = [];\n        uniqueDateCreateds.forEach(eventDate => {\n            const filteredEventDate = events.filter((event) => this.getDate(event.created_at) === eventDate);\n            const eventsItem = { date: eventDate, events: filteredEventDate };\n            displayedEvents.push(eventsItem);\n        });\n        return displayedEvents;\n    }\n    async getEvents(requestDetails) {\n        if (requestDetails?.appId)\n            this.eventApp = requestDetails.appId;\n        if (requestDetails?.addToURL)\n            this.addFilterToURL({ section: 'events' });\n        const { startDate, endDate } = this.setDateForFilter(this.eventsFilterDateRange.value);\n        try {\n            const eventsResponse = await this.convyAppService.request({\n                url: this.getAPIURL(`/events?groupID=${this.activeGroup || ''}&sort=AESC&page=${this.eventsPage || 1}&perPage=20&startDate=${startDate}&endDate=${endDate}&appId=${requestDetails?.appId ?? this.eventApp}`),\n                method: 'get'\n            });\n            if (this.activeTab === 'events')\n                this.detailsItem = eventsResponse.data.content[0];\n            if (this.events && this.events?.pagination?.next === this.eventsPage) {\n                const content = [...this.events.content, ...eventsResponse.data.content];\n                const pagination = eventsResponse.data.pagination;\n                this.events = { content, pagination };\n                this.displayedEvents = this.setEventsDisplayed(content);\n                return;\n            }\n            this.events = eventsResponse.data;\n            this.displayedEvents = await this.setEventsDisplayed(eventsResponse.data.content);\n        }\n        catch (error) {\n            return error;\n        }\n    }\n    addFilterToURL(requestDetails) {\n        const currentURLfilters = this.route.snapshot.queryParams;\n        const queryParams = {};\n        if (requestDetails.section === 'events') {\n            const { startDate, endDate } = this.setDateForFilter(this.eventsFilterDateRange.value);\n            if (startDate)\n                queryParams.eventsStartDate = startDate;\n            if (endDate)\n                queryParams.eventsEndDate = endDate;\n            if (this.eventApp)\n                queryParams.eventsApp = this.eventApp;\n        }\n        if (requestDetails.section === 'eventDels') {\n            const { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n            if (startDate)\n                queryParams.eventDelsStartDate = startDate;\n            if (endDate)\n                queryParams.eventDelsEndDate = endDate;\n            if (this.eventDeliveriesApp)\n                queryParams.eventDelsApp = this.eventDeliveriesApp;\n            queryParams.eventDelsStatus = this.eventDeliveryFilteredByStatus || '';\n        }\n        if (requestDetails.section === 'group')\n            queryParams.group = this.activeGroup;\n        if (requestDetails.section === 'logTab')\n            queryParams.activeTab = this.activeTab;\n        this.router.navigate([], {\n            queryParams: Object.assign({}, currentURLfilters, queryParams)\n        });\n    }\n    async eventDeliveriesRequest(requestDetails) {\n        const { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n        try {\n            const eventDeliveriesResponse = await this.convyAppService.request({\n                url: this.getAPIURL(`/eventdeliveries?groupID=${this.activeGroup || ''}&eventId=${requestDetails.eventId || ''}&page=${this.eventDeliveriesPage || 1}&startDate=${startDate}&endDate=${endDate}&appId=${this.eventDeliveriesApp}&status=${this.eventDeliveryFilteredByStatus || ''}`),\n                method: 'get'\n            });\n            return eventDeliveriesResponse;\n        }\n        catch (error) {\n            return error;\n        }\n    }\n    async getEventDeliveries(requestDetails) {\n        if (requestDetails?.addToURL)\n            this.addFilterToURL({ section: 'eventDels' });\n        const { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n        try {\n            const eventDeliveriesResponse = await this.eventDeliveriesRequest({\n                eventId: this.eventDeliveryFilteredByEventId,\n                startDate,\n                endDate\n            });\n            if (this.activeTab === 'event deliveries')\n                this.detailsItem = eventDeliveriesResponse.data.content[0];\n            if (this.eventDeliveries && this.eventDeliveries?.pagination?.next === this.eventDeliveriesPage) {\n                const content = [...this.eventDeliveries.content, ...eventDeliveriesResponse.data.content];\n                const pagination = eventDeliveriesResponse.data.pagination;\n                this.eventDeliveries = { content, pagination };\n                this.displayedEventDeliveries = this.setEventsDisplayed(content);\n                return;\n            }\n            this.eventDeliveries = eventDeliveriesResponse.data;\n            this.displayedEventDeliveries = this.setEventsDisplayed(eventDeliveriesResponse.data.content);\n            return eventDeliveriesResponse.data.content;\n        }\n        catch (error) {\n            return error;\n        }\n    }\n    async getEventDeliveriesForSidebar(eventId) {\n        const response = await this.eventDeliveriesRequest({\n            eventId,\n            startDate: '',\n            endDate: ''\n        });\n        this.sidebarEventDeliveries = response.data.content;\n    }\n    async toggleActiveGroup() {\n        await Promise.all([this.clearEventFilters('event deliveries'), this.clearEventFilters('events')]);\n        this.addFilterToURL({ section: 'group' });\n        Promise.all([this.getConfigDetails(), this.fetchDashboardData(), this.getEvents(), this.getApps(), this.getEventDeliveries()]);\n    }\n    async getGroups(requestDetails) {\n        if (requestDetails?.addToURL)\n            this.addFilterToURL({ section: 'group' });\n        try {\n            const groupsResponse = await this.convyAppService.request({\n                url: this.getAPIURL(`/groups`),\n                method: 'get'\n            });\n            this.groups = groupsResponse.data;\n            // check group existing filter in url and set active group\n            this.activeGroup = this.route.snapshot.queryParams.group ?? this.groups[0]?.uid;\n            return;\n        }\n        catch (error) {\n            return error;\n        }\n    }\n    async getApps() {\n        try {\n            const appsResponse = await this.convyAppService.request({\n                url: this.getAPIURL(`/apps?groupID=${this.activeGroup || ''}&sort=AESC&page=${this.appsPage || 1}&perPage=10`),\n                method: 'get'\n            });\n            if (this.apps?.pagination?.next === this.appsPage) {\n                const content = [...this.apps.content, ...appsResponse.data.content];\n                const pagination = appsResponse.data.pagination;\n                this.apps = { content, pagination };\n                return;\n            }\n            this.apps = appsResponse.data;\n            if (this.activeTab === 'apps')\n                this.detailsItem = this.apps?.content[0];\n            return;\n        }\n        catch (error) {\n            return error;\n        }\n    }\n    async getDelieveryAttempts(eventDeliveryId) {\n        try {\n            const deliveryAttemptsResponse = await this.convyAppService.request({\n                url: this.getAPIURL(`/eventdeliveries/${eventDeliveryId}/deliveryattempts?groupID=${this.activeGroup || ''}`),\n                method: 'get'\n            });\n            this.eventDeliveryAtempt = deliveryAttemptsResponse.data[deliveryAttemptsResponse.data.length - 1];\n            return;\n        }\n        catch (error) {\n            return error;\n        }\n    }\n    getCodeSnippetString(type) {\n        if (type === 'event') {\n            if (!this.detailsItem?.data)\n                return 'No event data was sent';\n            return JSON.stringify(this.detailsItem.data || this.detailsItem.metadata.data, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n        }\n        else if (type === 'event_delivery') {\n            if (!this.detailsItem?.metadata?.data)\n                return 'No event data was sent';\n            return JSON.stringify(this.detailsItem.metadata.data, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n        }\n        else if (type === 'res_body') {\n            if (!this.eventDeliveryAtempt)\n                return 'No response body was sent';\n            return this.eventDeliveryAtempt.response_data;\n        }\n        else if (type === 'res_head') {\n            if (!this.eventDeliveryAtempt)\n                return 'No response header was sent';\n            return JSON.stringify(this.eventDeliveryAtempt.response_http_header, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n        }\n        else if (type === 'req') {\n            if (!this.eventDeliveryAtempt)\n                return 'No request header was sent';\n            return JSON.stringify(this.eventDeliveryAtempt.request_http_header, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n        }\n        return '';\n    }\n    async retryEvent(requestDetails) {\n        requestDetails.e.stopPropagation();\n        const retryButton = document.querySelector(`#event${requestDetails.index} button`);\n        if (retryButton) {\n            retryButton.classList.add(['spin', 'disabled']);\n            retryButton.disabled = true;\n        }\n        try {\n            await this.convyAppService.request({\n                method: 'put',\n                url: this.getAPIURL(`/eventdeliveries/${requestDetails.eventDeliveryId}/resend?groupID=${this.activeGroup || ''}`)\n            });\n            this.convyAppService.showNotification({\n                message: 'Retry Request Sent'\n            });\n            retryButton.classList.remove(['spin', 'disabled']);\n            retryButton.disabled = false;\n            this.getEventDeliveries();\n        }\n        catch (error) {\n            this.convyAppService.showNotification({\n                message: error.error.message\n            });\n            retryButton.classList.remove(['spin', 'disabled']);\n            retryButton.disabled = false;\n            return error;\n        }\n    }\n    async batchRetryEvent() {\n        try {\n            await this.convyAppService.request({\n                method: 'post',\n                url: this.getAPIURL(`/eventdeliveries/batchretry?groupID=${this.activeGroup || ''}`),\n                body: { ids: this.selectedEventsFromEventDeliveriesTable }\n            });\n            this.convyAppService.showNotification({\n                message: 'Batch Retry Request Sent'\n            });\n            this.getEventDeliveries();\n            this.selectedEventsFromEventDeliveriesTable = [];\n        }\n        catch (error) {\n            this.convyAppService.showNotification({\n                message: error.error.message\n            });\n            return error;\n        }\n    }\n    async clearEventFilters(tableName) {\n        const activeFilters = Object.assign({}, this.route.snapshot.queryParams);\n        let filterItems = [];\n        switch (tableName) {\n            case 'events':\n                this.eventApp = '';\n                filterItems = ['eventsStartDate', 'eventsEndDate', 'eventsApp'];\n                this.eventsFilterDateRange.patchValue({\n                    startDate: '',\n                    endDate: ''\n                });\n                this.getEvents();\n                break;\n            case 'event deliveries':\n                this.eventDeliveriesApp = '';\n                filterItems = ['eventDelsStartDate', 'eventDelsEndDate', 'eventDelsApp', 'eventDelsStatus'];\n                this.eventDeliveriesFilterDateRange.patchValue({\n                    startDate: '',\n                    endDate: ''\n                });\n                this.eventDeliveryFilteredByEventId = '';\n                this.eventDeliveryFilteredByStatus = '';\n                this.getEventDeliveries();\n                break;\n            default:\n                break;\n        }\n        filterItems.forEach(key => (activeFilters.hasOwnProperty(key) ? delete activeFilters[key] : null));\n        await this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: activeFilters\n        });\n    }\n    checkAllCheckboxes(event) {\n        const checkboxes = document.querySelectorAll('#event-deliveries-table tbody input[type=\"checkbox\"]');\n        checkboxes.forEach((checkbox) => {\n            this.selectedEventsFromEventDeliveriesTable.push(checkbox.value);\n            checkbox.checked = event.target.checked;\n        });\n        if (!event.target.checked)\n            this.selectedEventsFromEventDeliveriesTable = [];\n        this.allEventdeliveriesChecked = event.target.checked;\n    }\n    checkEventDeliveryBox(event) {\n        const checkbox = event.target;\n        if (checkbox.checked) {\n            this.selectedEventsFromEventDeliveriesTable.push(checkbox.value);\n        }\n        else {\n            this.selectedEventsFromEventDeliveriesTable = this.selectedEventsFromEventDeliveriesTable.filter(eventId => eventId !== checkbox.value);\n        }\n        this.allEventdeliveriesChecked = false;\n        const parentCheckbox = document.querySelector('#eventDeliveryTable');\n        parentCheckbox.checked = false;\n    }\n    async loadMoreEventDeliveries() {\n        this.eventDeliveriesPage = this.eventDeliveriesPage + 1;\n        await this.getEventDeliveries();\n        setTimeout(() => {\n            if (this.allEventdeliveriesChecked) {\n                this.checkAllCheckboxes({ target: { checked: true } });\n            }\n        }, 200);\n    }\n    async openDeliveriesTab() {\n        await this.getEventDeliveries();\n        this.toggleActiveTab('event deliveries');\n    }\n    async refreshTables() {\n        await this.initDashboard();\n        this.toggleActiveTab('event deliveries');\n    }\n    getAPIURL(url) {\n        return `${this.isProduction ? location.origin : 'http://localhost:5005'}/ui${url}`;\n    }\n}\nConvoyAppComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppComponent, deps: [{ token: ConvoyAppService }, { token: i2.Router }, { token: i3.FormBuilder }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nConvoyAppComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: ConvoyAppComponent, selector: \"convoy-app\", inputs: { isProduction: [\"production\", \"isProduction\"] }, ngImport: i0, template: \"<div class=\\\"app-page\\\">\\n\\t<div class=\\\"app-page--head\\\">\\n\\t\\t<h3>Endpoint and Events</h3>\\n\\t\\t<button class=\\\"primary\\\">Create Endpoint</button>\\n\\t</div>\\n\\n\\t<div class=\\\"app-page--details\\\">\\n\\t\\t<div class=\\\"card app-page--endpoints\\\">\\n\\t\\t\\t<table>\\n\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Endpoint URL</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Type</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Error Rate</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Status</th>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</tbody>\\n\\t\\t\\t</table>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"card has-title app-page--metrics\\\">\\n\\t\\t\\t<div class=\\\"card--title\\\">\\n\\t\\t\\t\\t<h2>Metrics on events sent by endpoint</h2>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<ul class=\\\"card--container metrics\\\">\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<section class=\\\"card dashboard--logs\\\">\\n\\t\\t<div class=\\\"dashboard--logs--tabs\\\">\\n\\t\\t\\t<div class=\\\"dashboard--logs--tabs--head tabs\\\">\\n\\t\\t\\t\\t<div class=\\\"tabs\\\">\\n\\t\\t\\t\\t\\t<button *ngFor=\\\"let tab of tabs\\\" (click)=\\\"toggleActiveTab(tab)\\\" class=\\\"clear tab\\\" [ngClass]=\\\"{ active: activeTab === tab }\\\">\\n\\t\\t\\t\\t\\t\\t{{ tab }}\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<div class=\\\"table\\\">\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'events'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"filter\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button date-filter-button\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"eventsFilterPicker.open()\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tactive: eventsFilterDateRange.value.startDate !== '' && eventsFilterDateRange.value.endDate !== ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showEventFilterCalendar = !showEventFilterCalendar\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/calendar-icon.svg\\\" alt=\\\"calender icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-input [formGroup]=\\\"eventsFilterDateRange\\\" [rangePicker]=\\\"eventsFilterPicker\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matStartDate formControlName=\\\"startDate\\\" placeholder=\\\"Start date\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matEndDate formControlName=\\\"endDate\\\" placeholder=\\\"End date\\\" (dateChange)=\\\"getEvents({ addToURL: true })\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</mat-date-range-input>\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-picker #eventsFilterPicker [disabled]=\\\"false\\\"></mat-date-range-picker>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t</button>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"select\\\">\\n\\t\\t\\t\\t\\t\\t\\t<select [ngClass]=\\\"{ active: !!eventApp }\\\" aria-label=\\\"frequency\\\" [(ngModel)]=\\\"eventApp\\\" (change)=\\\"getEvents({ addToURL: true })\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\\\">All Apps</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t<option [value]=\\\"app.uid\\\" *ngFor=\\\"let app of apps?.content\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ app.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button primary events-filter-clear-btn\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"clearEventFilters(activeTab)\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"(eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tdisabled: (eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\tClear Filter\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<hr />\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--container smaller-table\\\" *ngIf=\\\"displayedEvents.length > 0\\\">\\n\\t\\t\\t\\t\\t\\t<table id=\\\"events-table\\\">\\n\\t\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Event Type</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">App Name</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created At</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-container *ngFor=\\\"let eventGroup of displayedEvents; let i = index\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--date-row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ eventGroup.date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let event of eventGroup.events; let index = index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: event.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"'event' + index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = event; getEventDeliveriesForSidebar(event.uid)\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tag\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.event_type }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td class=\\\"has-long-text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.app_metadata.title }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.created_at | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-right\\\" (click)=\\\"eventDeliveryFilteredByEventId = event.uid; openDeliveriesTab()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDeliveries\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/angle-arrow-right-primary.svg\\\" alt=\\\"arrow right\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container center\\\" *ngIf=\\\"events.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button [class]=\\\"'primary clear has-icon icon-left '\\\" [disabled]=\\\"events.pagination.page === events.pagination.totalPage\\\" (click)=\\\"eventsPage = eventsPage + 1; getEvents()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"empty-state table--container\\\" *ngIf=\\\"displayedEvents.length === 0\\\">\\n\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t\\t<p>No event to show here</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"filter\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button date-filter-button\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"eventDeliveriesFilterPicker.open()\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tactive: eventDeliveriesFilterDateRange.value.startDate !== '' && eventDeliveriesFilterDateRange.value.endDate !== ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showEventFilterCalendar = !showEventFilterCalendar\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/calendar-icon.svg\\\" alt=\\\"calender icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-input [formGroup]=\\\"eventDeliveriesFilterDateRange\\\" [rangePicker]=\\\"eventDeliveriesFilterPicker\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matStartDate formControlName=\\\"startDate\\\" placeholder=\\\"Start date\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matEndDate formControlName=\\\"endDate\\\" placeholder=\\\"End date\\\" (dateChange)=\\\"getEventDeliveries({ addToURL: true })\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</mat-date-range-input>\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-picker #eventDeliveriesFilterPicker [disabled]=\\\"false\\\"></mat-date-range-picker>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button dropdown--button\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: eventDeliveryFilteredByStatus\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showOverlay = true; showEventDeliveriesStatusDropdown = !showEventDeliveriesStatusDropdown\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/status-filter-icon.svg\\\" alt=\\\"status filter icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>{{ eventDeliveryFilteredByStatus || 'Status' }}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown--list\\\" *ngIf=\\\"showEventDeliveriesStatusDropdown\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown--list--item\\\" *ngFor=\\\"let status of eventDeliveryStatuses\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttype=\\\"radio\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tname=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[value]=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[(ngModel)]=\\\"eventDeliveryFilteredByStatus\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(change)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tshowOverlay = false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tshowEventDeliveriesStatusDropdown = false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgetEventDeliveries({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taddToURL: true\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label [for]=\\\"status\\\">{{ status || 'None' }}</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"select\\\">\\n\\t\\t\\t\\t\\t\\t\\t<select [ngClass]=\\\"{ active: !!eventDeliveriesApp }\\\" aria-label=\\\"frequency\\\" [(ngModel)]=\\\"eventDeliveriesApp\\\" (change)=\\\"getEventDeliveries({ addToURL: true })\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\\\">All Apps</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t<option [value]=\\\"app.uid\\\" *ngFor=\\\"let app of apps?.content\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ app.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"filter--button event-button active\\\" *ngIf=\\\"eventDeliveryFilteredByEventId !== ''\\\">\\n\\t\\t\\t\\t\\t\\t\\tEvent Filtered\\n\\t\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon\\\" (click)=\\\"eventDeliveryFilteredByEventId = ''; getEventDeliveries()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/close-icon.svg\\\" alt=\\\"close icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button primary events-filter-clear-btn\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"clearEventFilters(activeTab)\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(eventDeliveriesFilterDateRange.value.startDate == '' || eventDeliveriesFilterDateRange.value.endDate == '') &&\\n\\t\\t\\t\\t\\t\\t\\t\\teventDeliveriesApp == '' &&\\n\\t\\t\\t\\t\\t\\t\\t\\teventDeliveryFilteredByEventId == '' &&\\n\\t\\t\\t\\t\\t\\t\\t\\t!eventDeliveryFilteredByStatus\\n\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\tClear Filter\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<hr />\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--actions button-container left\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-left hover\\\" (click)=\\\"refreshTables()\\\">\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/refresh-icon-2.svg\\\" alt=\\\"refresh icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tRefresh\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-left hover\\\" (click)=\\\"batchRetryEvent()\\\" [disabled]=\\\"selectedEventsFromEventDeliveriesTable.length <= 0\\\">\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/retry-icon.svg\\\" alt=\\\"retry icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tBulk Retry\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--container\\\" *ngIf=\\\"displayedEventDeliveries.length > 0\\\">\\n\\t\\t\\t\\t\\t\\t<table id=\\\"event-deliveries-table\\\">\\n\\t\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\" class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"checkbox\\\" name=\\\"eventDeliveryTable\\\" id=\\\"eventDeliveryTable\\\" (change)=\\\"checkAllCheckboxes($event)\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tStatus\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Event Type</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Attempts</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created At</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-container *ngFor=\\\"let eventDeliveriesGroup of displayedEventDeliveries; let i = index\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--date-row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveriesGroup.date }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let event of eventDeliveriesGroup.events; let index = index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: event.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"'event' + index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = event; getDelieveryAttempts(event.uid)\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"checkbox has-retry\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img *ngIf=\\\"event.metadata.num_trials > event.metadata.retry_limit\\\" src=\\\"/assets/img/retry-icon.svg\\\" alt=\\\"retry icon\\\" title=\\\"manually retried\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"checkbox\\\" [name]=\\\"'event' + index\\\" id=\\\"event\\\" [value]=\\\"event.uid\\\" (change)=\\\"checkEventDeliveryBox($event)\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div [class]=\\\"'tag tag--' + event.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.status }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.event_metadata.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.metadata?.num_trials }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.created_at | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"event.status === 'Success' || event.status === 'Scheduled'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary has-icon icon-left ' + (event.status === 'Success' || event.status === 'Scheduled' ? 'disabled' : '')\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tretryEvent({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\te: $event,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tindex: this.index,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\teventDeliveryId: event.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/refresh-icon.svg\\\" alt=\\\"refresh icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tRetry\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container center\\\" *ngIf=\\\"eventDeliveries.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button [class]=\\\"'primary clear has-icon icon-left'\\\" [disabled]=\\\"eventDeliveries.pagination.page === eventDeliveries.pagination.totalPage\\\" (click)=\\\"loadMoreEventDeliveries()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"empty-state table--container\\\" *ngIf=\\\"displayedEventDeliveries.length === 0\\\">\\n\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t\\t<p>No event to show here</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<div class=\\\"table--container smaller-table\\\" *ngIf=\\\"apps && apps.content.length > 0 && activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<table>\\n\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Name</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Updated</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Events</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Endpoints</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let app of apps?.content\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: app.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = app\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td class=\\\"has-long-text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.name }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.created_at | date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.updated_at | date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.events }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.endpoints.length }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"app.events <= 0\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle=\\\"view events\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary has-icon icon-left'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttoggleActiveTab('events');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgetEvents({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taddToURL: true,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tappId: app.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/view-events-icon.svg\\\" alt=\\\"view events icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tEvents\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container margin-top center\\\" *ngIf=\\\"apps?.pagination && apps.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary clear has-icon icon-left ' + (apps.pagination.page === apps.pagination.totalPage ? 'disabled' : '')\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"apps.pagination.page === apps.pagination.totalPage\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<div class=\\\"empty-state\\\" *ngIf=\\\"apps?.content?.length === 0 && activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t<p>No app to show here</p>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"dashboard--logs--details\\\">\\n\\t\\t\\t<ng-container *ngIf=\\\"detailsItem\\\">\\n\\t\\t\\t\\t<h3>Details</h3>\\n\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--meta\\\" *ngIf=\\\"activeTab === 'apps' || activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">IP Address</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.ip_address || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">HTTP Status</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.http_status || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">API Version</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.api_version || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Endpoint</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\" [title]=\\\"detailsItem.endpoint?.target_url\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.endpoint?.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\" *ngIf=\\\"detailsItem.metadata?.num_trials < detailsItem.metadata?.retry_limit && detailsItem.status !== 'Success'\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Next Retry</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.metadata?.next_send_time | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">App Name</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.app_metadata?.title }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\" *ngIf=\\\"activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Support Email</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item\\\">\\n\\t\\t\\t\\t\\t\\t\\t{{ detailsItem?.support_email || '-' }}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t</ul>\\n\\n\\t\\t\\t\\t<ul class=\\\"tabs\\\" *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<li *ngFor=\\\"let tab of eventDetailsTabs\\\" [class]=\\\"'tab ' + (eventDetailsActiveTab === tab.id ? 'active' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary outline\\\" (click)=\\\"eventDetailsActiveTab = tab.id\\\">\\n\\t\\t\\t\\t\\t\\t\\t{{ tab.label }}\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t</ul>\\n\\n\\t\\t\\t\\t<div class=\\\"dashboard--logs--details--req-res\\\" *ngIf=\\\"activeTab === 'events' || activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'data' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Event</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString(activeTab === 'events' ? 'event' : 'event_delivery')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'response' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Header</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('res_head')\\\"></prism>\\n\\n\\t\\t\\t\\t\\t\\t<h3>Body</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('res_body')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'request' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Header</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('req')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'events'\\\">\\n\\t\\t\\t\\t\\t<h4>Deliveries Overview</h4>\\n\\t\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--endpoints inline\\\">\\n\\t\\t\\t\\t\\t\\t<li *ngFor=\\\"let delivery of sidebarEventDeliveries\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div [class]=\\\"'tag tag--' + delivery.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ delivery.status }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"url\\\" [title]=\\\"delivery.endpoint.target_url\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ delivery.endpoint.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<h4>App Event Endpoints</h4>\\n\\t\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--endpoints\\\">\\n\\t\\t\\t\\t\\t\\t<ng-container *ngIf=\\\"detailsItem?.endpoints\\\">\\n\\t\\t\\t\\t\\t\\t\\t<li *ngFor=\\\"let endpoint of detailsItem.endpoints\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<h5>{{ endpoint.description }}</h5>\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/link-icon.svg\\\" alt=\\\"link icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ endpoint.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"events\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tag\\\" *ngFor=\\\"let event of endpoint.events\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event == '*' ? 'all events' : event }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t</ng-container>\\n\\t\\t</div>\\n\\t</section>\\n</div>\\n\\n<div class=\\\"overlay\\\" *ngIf=\\\"showOverlay\\\" (click)=\\\"showOverlay = false; showEventDeliveriesStatusDropdown = false\\\"></div>\\n\", styles: [\"\"], components: [{ type: i4.MatDateRangeInput, selector: \"mat-date-range-input\", inputs: [\"rangePicker\", \"required\", \"dateFilter\", \"min\", \"max\", \"disabled\", \"separator\", \"comparisonStart\", \"comparisonEnd\"], exportAs: [\"matDateRangeInput\"] }, { type: i4.MatDateRangePicker, selector: \"mat-date-range-picker\", exportAs: [\"matDateRangePicker\"] }, { type: PrismComponent, selector: \"prism\", inputs: [\"code\", \"language\"] }], directives: [{ type: i6.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i6.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i6.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.MatStartDate, selector: \"input[matStartDate]\", inputs: [\"errorStateMatcher\"], outputs: [\"dateChange\", \"dateInput\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i4.MatEndDate, selector: \"input[matEndDate]\", inputs: [\"errorStateMatcher\"], outputs: [\"dateChange\", \"dateInput\"] }, { type: i3.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i3.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i3.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i3.RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: [\"name\", \"formControlName\", \"value\"] }], pipes: { \"date\": i6.DatePipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'convoy-app', template: \"<div class=\\\"app-page\\\">\\n\\t<div class=\\\"app-page--head\\\">\\n\\t\\t<h3>Endpoint and Events</h3>\\n\\t\\t<button class=\\\"primary\\\">Create Endpoint</button>\\n\\t</div>\\n\\n\\t<div class=\\\"app-page--details\\\">\\n\\t\\t<div class=\\\"card app-page--endpoints\\\">\\n\\t\\t\\t<table>\\n\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Endpoint URL</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Type</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Error Rate</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Status</th>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</tbody>\\n\\t\\t\\t</table>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"card has-title app-page--metrics\\\">\\n\\t\\t\\t<div class=\\\"card--title\\\">\\n\\t\\t\\t\\t<h2>Metrics on events sent by endpoint</h2>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<ul class=\\\"card--container metrics\\\">\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<section class=\\\"card dashboard--logs\\\">\\n\\t\\t<div class=\\\"dashboard--logs--tabs\\\">\\n\\t\\t\\t<div class=\\\"dashboard--logs--tabs--head tabs\\\">\\n\\t\\t\\t\\t<div class=\\\"tabs\\\">\\n\\t\\t\\t\\t\\t<button *ngFor=\\\"let tab of tabs\\\" (click)=\\\"toggleActiveTab(tab)\\\" class=\\\"clear tab\\\" [ngClass]=\\\"{ active: activeTab === tab }\\\">\\n\\t\\t\\t\\t\\t\\t{{ tab }}\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<div class=\\\"table\\\">\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'events'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"filter\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button date-filter-button\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"eventsFilterPicker.open()\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tactive: eventsFilterDateRange.value.startDate !== '' && eventsFilterDateRange.value.endDate !== ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showEventFilterCalendar = !showEventFilterCalendar\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/calendar-icon.svg\\\" alt=\\\"calender icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-input [formGroup]=\\\"eventsFilterDateRange\\\" [rangePicker]=\\\"eventsFilterPicker\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matStartDate formControlName=\\\"startDate\\\" placeholder=\\\"Start date\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matEndDate formControlName=\\\"endDate\\\" placeholder=\\\"End date\\\" (dateChange)=\\\"getEvents({ addToURL: true })\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</mat-date-range-input>\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-picker #eventsFilterPicker [disabled]=\\\"false\\\"></mat-date-range-picker>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t</button>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"select\\\">\\n\\t\\t\\t\\t\\t\\t\\t<select [ngClass]=\\\"{ active: !!eventApp }\\\" aria-label=\\\"frequency\\\" [(ngModel)]=\\\"eventApp\\\" (change)=\\\"getEvents({ addToURL: true })\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\\\">All Apps</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t<option [value]=\\\"app.uid\\\" *ngFor=\\\"let app of apps?.content\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ app.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button primary events-filter-clear-btn\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"clearEventFilters(activeTab)\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"(eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tdisabled: (eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\tClear Filter\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<hr />\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--container smaller-table\\\" *ngIf=\\\"displayedEvents.length > 0\\\">\\n\\t\\t\\t\\t\\t\\t<table id=\\\"events-table\\\">\\n\\t\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Event Type</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">App Name</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created At</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-container *ngFor=\\\"let eventGroup of displayedEvents; let i = index\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--date-row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ eventGroup.date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let event of eventGroup.events; let index = index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: event.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"'event' + index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = event; getEventDeliveriesForSidebar(event.uid)\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tag\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.event_type }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td class=\\\"has-long-text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.app_metadata.title }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.created_at | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-right\\\" (click)=\\\"eventDeliveryFilteredByEventId = event.uid; openDeliveriesTab()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDeliveries\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/angle-arrow-right-primary.svg\\\" alt=\\\"arrow right\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container center\\\" *ngIf=\\\"events.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button [class]=\\\"'primary clear has-icon icon-left '\\\" [disabled]=\\\"events.pagination.page === events.pagination.totalPage\\\" (click)=\\\"eventsPage = eventsPage + 1; getEvents()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"empty-state table--container\\\" *ngIf=\\\"displayedEvents.length === 0\\\">\\n\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t\\t<p>No event to show here</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"filter\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button date-filter-button\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"eventDeliveriesFilterPicker.open()\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tactive: eventDeliveriesFilterDateRange.value.startDate !== '' && eventDeliveriesFilterDateRange.value.endDate !== ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showEventFilterCalendar = !showEventFilterCalendar\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/calendar-icon.svg\\\" alt=\\\"calender icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-input [formGroup]=\\\"eventDeliveriesFilterDateRange\\\" [rangePicker]=\\\"eventDeliveriesFilterPicker\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matStartDate formControlName=\\\"startDate\\\" placeholder=\\\"Start date\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matEndDate formControlName=\\\"endDate\\\" placeholder=\\\"End date\\\" (dateChange)=\\\"getEventDeliveries({ addToURL: true })\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</mat-date-range-input>\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-picker #eventDeliveriesFilterPicker [disabled]=\\\"false\\\"></mat-date-range-picker>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button dropdown--button\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: eventDeliveryFilteredByStatus\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showOverlay = true; showEventDeliveriesStatusDropdown = !showEventDeliveriesStatusDropdown\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/status-filter-icon.svg\\\" alt=\\\"status filter icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>{{ eventDeliveryFilteredByStatus || 'Status' }}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown--list\\\" *ngIf=\\\"showEventDeliveriesStatusDropdown\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown--list--item\\\" *ngFor=\\\"let status of eventDeliveryStatuses\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttype=\\\"radio\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tname=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[value]=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[(ngModel)]=\\\"eventDeliveryFilteredByStatus\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(change)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tshowOverlay = false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tshowEventDeliveriesStatusDropdown = false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgetEventDeliveries({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taddToURL: true\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label [for]=\\\"status\\\">{{ status || 'None' }}</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"select\\\">\\n\\t\\t\\t\\t\\t\\t\\t<select [ngClass]=\\\"{ active: !!eventDeliveriesApp }\\\" aria-label=\\\"frequency\\\" [(ngModel)]=\\\"eventDeliveriesApp\\\" (change)=\\\"getEventDeliveries({ addToURL: true })\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\\\">All Apps</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t<option [value]=\\\"app.uid\\\" *ngFor=\\\"let app of apps?.content\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ app.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"filter--button event-button active\\\" *ngIf=\\\"eventDeliveryFilteredByEventId !== ''\\\">\\n\\t\\t\\t\\t\\t\\t\\tEvent Filtered\\n\\t\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon\\\" (click)=\\\"eventDeliveryFilteredByEventId = ''; getEventDeliveries()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/close-icon.svg\\\" alt=\\\"close icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button primary events-filter-clear-btn\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"clearEventFilters(activeTab)\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(eventDeliveriesFilterDateRange.value.startDate == '' || eventDeliveriesFilterDateRange.value.endDate == '') &&\\n\\t\\t\\t\\t\\t\\t\\t\\teventDeliveriesApp == '' &&\\n\\t\\t\\t\\t\\t\\t\\t\\teventDeliveryFilteredByEventId == '' &&\\n\\t\\t\\t\\t\\t\\t\\t\\t!eventDeliveryFilteredByStatus\\n\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\tClear Filter\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<hr />\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--actions button-container left\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-left hover\\\" (click)=\\\"refreshTables()\\\">\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/refresh-icon-2.svg\\\" alt=\\\"refresh icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tRefresh\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-left hover\\\" (click)=\\\"batchRetryEvent()\\\" [disabled]=\\\"selectedEventsFromEventDeliveriesTable.length <= 0\\\">\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/retry-icon.svg\\\" alt=\\\"retry icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tBulk Retry\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--container\\\" *ngIf=\\\"displayedEventDeliveries.length > 0\\\">\\n\\t\\t\\t\\t\\t\\t<table id=\\\"event-deliveries-table\\\">\\n\\t\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\" class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"checkbox\\\" name=\\\"eventDeliveryTable\\\" id=\\\"eventDeliveryTable\\\" (change)=\\\"checkAllCheckboxes($event)\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tStatus\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Event Type</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Attempts</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created At</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-container *ngFor=\\\"let eventDeliveriesGroup of displayedEventDeliveries; let i = index\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--date-row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveriesGroup.date }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let event of eventDeliveriesGroup.events; let index = index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: event.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"'event' + index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = event; getDelieveryAttempts(event.uid)\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"checkbox has-retry\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img *ngIf=\\\"event.metadata.num_trials > event.metadata.retry_limit\\\" src=\\\"/assets/img/retry-icon.svg\\\" alt=\\\"retry icon\\\" title=\\\"manually retried\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"checkbox\\\" [name]=\\\"'event' + index\\\" id=\\\"event\\\" [value]=\\\"event.uid\\\" (change)=\\\"checkEventDeliveryBox($event)\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div [class]=\\\"'tag tag--' + event.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.status }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.event_metadata.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.metadata?.num_trials }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.created_at | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"event.status === 'Success' || event.status === 'Scheduled'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary has-icon icon-left ' + (event.status === 'Success' || event.status === 'Scheduled' ? 'disabled' : '')\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tretryEvent({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\te: $event,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tindex: this.index,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\teventDeliveryId: event.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/refresh-icon.svg\\\" alt=\\\"refresh icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tRetry\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container center\\\" *ngIf=\\\"eventDeliveries.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button [class]=\\\"'primary clear has-icon icon-left'\\\" [disabled]=\\\"eventDeliveries.pagination.page === eventDeliveries.pagination.totalPage\\\" (click)=\\\"loadMoreEventDeliveries()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"empty-state table--container\\\" *ngIf=\\\"displayedEventDeliveries.length === 0\\\">\\n\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t\\t<p>No event to show here</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<div class=\\\"table--container smaller-table\\\" *ngIf=\\\"apps && apps.content.length > 0 && activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<table>\\n\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Name</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Updated</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Events</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Endpoints</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let app of apps?.content\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: app.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = app\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td class=\\\"has-long-text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.name }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.created_at | date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.updated_at | date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.events }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.endpoints.length }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"app.events <= 0\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle=\\\"view events\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary has-icon icon-left'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttoggleActiveTab('events');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgetEvents({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taddToURL: true,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tappId: app.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/view-events-icon.svg\\\" alt=\\\"view events icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tEvents\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container margin-top center\\\" *ngIf=\\\"apps?.pagination && apps.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary clear has-icon icon-left ' + (apps.pagination.page === apps.pagination.totalPage ? 'disabled' : '')\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"apps.pagination.page === apps.pagination.totalPage\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<div class=\\\"empty-state\\\" *ngIf=\\\"apps?.content?.length === 0 && activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t<p>No app to show here</p>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"dashboard--logs--details\\\">\\n\\t\\t\\t<ng-container *ngIf=\\\"detailsItem\\\">\\n\\t\\t\\t\\t<h3>Details</h3>\\n\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--meta\\\" *ngIf=\\\"activeTab === 'apps' || activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">IP Address</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.ip_address || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">HTTP Status</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.http_status || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">API Version</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.api_version || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Endpoint</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\" [title]=\\\"detailsItem.endpoint?.target_url\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.endpoint?.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\" *ngIf=\\\"detailsItem.metadata?.num_trials < detailsItem.metadata?.retry_limit && detailsItem.status !== 'Success'\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Next Retry</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.metadata?.next_send_time | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">App Name</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.app_metadata?.title }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\" *ngIf=\\\"activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Support Email</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item\\\">\\n\\t\\t\\t\\t\\t\\t\\t{{ detailsItem?.support_email || '-' }}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t</ul>\\n\\n\\t\\t\\t\\t<ul class=\\\"tabs\\\" *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<li *ngFor=\\\"let tab of eventDetailsTabs\\\" [class]=\\\"'tab ' + (eventDetailsActiveTab === tab.id ? 'active' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary outline\\\" (click)=\\\"eventDetailsActiveTab = tab.id\\\">\\n\\t\\t\\t\\t\\t\\t\\t{{ tab.label }}\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t</ul>\\n\\n\\t\\t\\t\\t<div class=\\\"dashboard--logs--details--req-res\\\" *ngIf=\\\"activeTab === 'events' || activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'data' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Event</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString(activeTab === 'events' ? 'event' : 'event_delivery')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'response' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Header</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('res_head')\\\"></prism>\\n\\n\\t\\t\\t\\t\\t\\t<h3>Body</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('res_body')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'request' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Header</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('req')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'events'\\\">\\n\\t\\t\\t\\t\\t<h4>Deliveries Overview</h4>\\n\\t\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--endpoints inline\\\">\\n\\t\\t\\t\\t\\t\\t<li *ngFor=\\\"let delivery of sidebarEventDeliveries\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div [class]=\\\"'tag tag--' + delivery.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ delivery.status }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"url\\\" [title]=\\\"delivery.endpoint.target_url\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ delivery.endpoint.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<h4>App Event Endpoints</h4>\\n\\t\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--endpoints\\\">\\n\\t\\t\\t\\t\\t\\t<ng-container *ngIf=\\\"detailsItem?.endpoints\\\">\\n\\t\\t\\t\\t\\t\\t\\t<li *ngFor=\\\"let endpoint of detailsItem.endpoints\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<h5>{{ endpoint.description }}</h5>\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/link-icon.svg\\\" alt=\\\"link icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ endpoint.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"events\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tag\\\" *ngFor=\\\"let event of endpoint.events\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event == '*' ? 'all events' : event }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t</ng-container>\\n\\t\\t</div>\\n\\t</section>\\n</div>\\n\\n<div class=\\\"overlay\\\" *ngIf=\\\"showOverlay\\\" (click)=\\\"showOverlay = false; showEventDeliveriesStatusDropdown = false\\\"></div>\\n\", styles: [\"\"] }]\n        }], ctorParameters: function () { return [{ type: ConvoyAppService }, { type: i2.Router }, { type: i3.FormBuilder }, { type: i2.ActivatedRoute }]; }, propDecorators: { isProduction: [{\n                type: Input,\n                args: ['production']\n            }] } });\n\nclass PrismModule {\n}\nPrismModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPrismModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismModule, declarations: [PrismComponent], imports: [CommonModule], exports: [PrismComponent] });\nPrismModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [PrismComponent],\n                    imports: [CommonModule],\n                    exports: [PrismComponent]\n                }]\n        }] });\n\nclass ConvoyAppModule {\n}\nConvoyAppModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nConvoyAppModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppModule, declarations: [ConvoyAppComponent], imports: [CommonModule,\n        PrismModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDatepickerModule,\n        MatNativeDateModule], exports: [ConvoyAppComponent] });\nConvoyAppModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppModule, imports: [[\n            CommonModule,\n            PrismModule,\n            FormsModule,\n            ReactiveFormsModule,\n            MatDatepickerModule,\n            MatNativeDateModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ConvoyAppComponent],\n                    imports: [\n                        CommonModule,\n                        PrismModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        MatDatepickerModule,\n                        MatNativeDateModule,\n                    ],\n                    exports: [ConvoyAppComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of convoy-app\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ConvoyAppComponent, ConvoyAppModule, ConvoyAppService };\n//# sourceMappingURL=convoy-app.mjs.map\n","map":{"version":3,"file":"convoy-app.mjs","sources":["../../../projects/convoy-app/src/lib/convoy-app.service.ts","../../../projects/convoy-app/src/lib/prism/prism.component.ts","../../../projects/convoy-app/src/lib/prism/prism.component.html","../../../projects/convoy-app/src/lib/convoy-app.component.ts","../../../projects/convoy-app/src/lib/convoy-app.component.html","../../../projects/convoy-app/src/lib/prism/prism.module.ts","../../../projects/convoy-app/src/lib/convoy-app.module.ts","../../../projects/convoy-app/src/public-api.ts","../../../projects/convoy-app/src/convoy-app.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { HTTP_RESPONSE } from './models/http.model';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ConvoyAppService {\n    constructor(private httpClient: HttpClient) {}\n\n    authDetails() {\n        const authDetails = localStorage.getItem('CONVOY_AUTH');\n        if (authDetails) {\n            const { username, password } = JSON.parse(authDetails);\n            return {\n                token: btoa(`${username + ':' + password}`),\n                authState: true,\n            };\n        } else {\n            return { authState: false };\n        }\n    }\n\n    request(requestDetails: {\n        url: string;\n        body?: any;\n        method: 'get' | 'post' | 'delete' | 'put';\n    }): Promise<HTTP_RESPONSE> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const requestHeader = new HttpHeaders({\n                    Authorization: `Basic ${this.authDetails().token}`,\n                });\n                const requestResponse: any = await this.httpClient\n                    .request(requestDetails.method, requestDetails.url, {\n                        headers: requestHeader,\n                        body: requestDetails.body,\n                    })\n                    .toPromise();\n                return resolve(requestResponse);\n            } catch (error) {\n                return reject(error);\n            }\n        });\n    }\n\n    showNotification(details: { message: string }) {\n        if (!details.message) return;\n\n        const notificationElement = document.querySelector('.app-notification');\n        if (notificationElement) {\n            notificationElement.classList.add('show');\n            notificationElement.innerHTML = details.message;\n        }\n\n        setTimeout(() => {\n            notificationElement?.classList.remove('show');\n        }, 3000);\n    }\n}\n","import { AfterViewInit, Component, ElementRef, Input, OnChanges, ViewChild } from '@angular/core';\nimport * as Prism from 'prismjs';\n\n@Component({\n\tselector: 'prism',\n\ttemplateUrl: './prism.component.html',\n\tstyleUrls: ['./prism.component.scss']\n})\nexport class PrismComponent implements AfterViewInit, OnChanges {\n\t@ViewChild('codeEle') codeEle!: ElementRef;\n\t@Input() code?: string;\n\t@Input() language?: string;\n\n\tconstructor() {}\n\n\tngAfterViewInit() {\n\t\tPrism.highlightElement(this.codeEle.nativeElement);\n\t}\n\n\tngOnChanges(): void {\n\t\tif (this.codeEle?.nativeElement) {\n\t\t\tthis.codeEle.nativeElement.textContent = this.code;\n\t\t\tPrism.highlightElement(this.codeEle.nativeElement);\n\t\t}\n\t}\n}\n","<pre *ngIf=\"language\" class=\"language-{{ language }} line-numbers\">\n<code #codeEle class=\"language-{{ language }}\">{{code}}</code>\n</pre>\n","import { Component, Input, OnInit } from '@angular/core';\nimport Chart from 'chart.js/auto';\nimport { APP } from './models/app.model';\nimport { EVENT, EVENT_DELIVERY } from './models/event.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { PAGINATION } from './models/global.model';\nimport { HTTP_RESPONSE } from './models/http.model';\nimport { GROUP } from './models/group.model';\nimport { ConvoyAppService } from './convoy-app.service';\nimport { format } from 'date-fns';\n\n@Component({\n\tselector: 'convoy-app',\n\ttemplateUrl: './convoy-app.component.html',\n\tstyleUrls: ['./convoy-app.component.scss']\n})\nexport class ConvoyAppComponent implements OnInit {\n\tshowFilterCalendar = false;\n\ttabs: ['events', 'event deliveries', 'apps'] = ['events', 'event deliveries', 'apps'];\n\tactiveTab: 'events' | 'apps' | 'event deliveries' = 'events';\n\tdetailsItem?: any;\n\teventDeliveryAtempt?: {\n\t\tip_address: '';\n\t\thttp_status: '';\n\t\tapi_version: '';\n\t\tupdated_at: 0;\n\t\tdeleted_at: 0;\n\t\tresponse_data: '';\n\t\tresponse_http_header: '';\n\t\trequest_http_header: '';\n\t};\n\tshowEventFilterCalendar = false;\n\teventDateFilterActive = false;\n\tdisplayedEvents: {\n\t\tdate: string;\n\t\tevents: EVENT[];\n\t}[] = [];\n\tevents!: { pagination: PAGINATION; content: EVENT[] };\n\tapps!: { pagination: PAGINATION; content: APP[] };\n\teventDetailsTabs = [\n\t\t{ id: 'data', label: 'Event' },\n\t\t{ id: 'response', label: 'Response' },\n\t\t{ id: 'request', label: 'Request' }\n\t];\n\teventDetailsActiveTab = 'data';\n\torganisationDetails!: {\n\t\tdatabase: { dsn: string };\n\t\tqueue: { type: string; redis: { dsn: string } };\n\t\tserver: { http: { port: number } };\n\t\tsignature: { header: string; hash: string };\n\t\tstrategy: {\n\t\t\ttype: 'default';\n\t\t\tdefault: { intervalSeconds: number; retryLimit: number };\n\t\t};\n\t};\n\tdashboardData = { apps: 0, events_sent: 0 };\n\teventApp: string = '';\n\teventDeliveriesApp: string = '';\n\teventsPage: number = 1;\n\teventDeliveriesPage: number = 1;\n\tappsPage: number = 1;\n\tdashboardFrequency: 'daily' | 'weekly' | 'monthly' | 'yearly' = 'daily';\n\tstatsDateRange: FormGroup = this.formBuilder.group({\n\t\tstartDate: [\n\t\t\t{\n\t\t\t\tvalue: new Date(new Date().setDate(new Date().getDate() - 30)),\n\t\t\t\tdisabled: true\n\t\t\t}\n\t\t],\n\t\tendDate: [{ value: new Date(), disabled: true }]\n\t});\n\teventsFilterDateRange: FormGroup = this.formBuilder.group({\n\t\tstartDate: [{ value: '', disabled: true }],\n\t\tendDate: [{ value: '', disabled: true }]\n\t});\n\teventDeliveriesFilterDateRange: FormGroup = this.formBuilder.group({\n\t\tstartDate: [{ value: '', disabled: true }],\n\t\tendDate: [{ value: '', disabled: true }]\n\t});\n\tselectedEventsFromEventDeliveriesTable: string[] = [];\n\tdisplayedEventDeliveries: { date: string; events: EVENT_DELIVERY[] }[] = [];\n\teventDeliveries!: { pagination: PAGINATION; content: EVENT_DELIVERY[] };\n\tsidebarEventDeliveries: EVENT_DELIVERY[] = [];\n\teventDeliveryFilteredByEventId = '';\n\tgroups: GROUP[] = [];\n\tactiveGroup!: string;\n\tallEventdeliveriesChecked = false;\n\teventDeliveryStatuses = ['', 'Success', 'Failure', 'Retry', 'Scheduled', 'Processing', 'Discarded'];\n\teventDeliveryFilteredByStatus: '' | 'Success' | 'Failure' | 'Retry' | 'Scheduled' | 'Processing' | 'Discarded' = '';\n\tshowOverlay = false;\n\tshowEventDeliveriesStatusDropdown = false;\n\t@Input('production') isProduction: boolean = false;\n\n\tconstructor(private convyAppService: ConvoyAppService, private router: Router, private formBuilder: FormBuilder, private route: ActivatedRoute) {}\n\n\tasync ngOnInit() {\n\t\tawait this.initDashboard();\n\t}\n\n\tasync initDashboard() {\n\t\tawait this.getGroups();\n\t\tthis.getFiltersFromURL();\n\t\tawait Promise.all([this.getConfigDetails(), this.fetchDashboardData(), this.getEvents(), this.getApps(), this.getEventDeliveries()]);\n\n\t\t// get active tab from url and apply, after getting the details from above requests so that the data is available ahead\n\t\tthis.toggleActiveTab(this.route.snapshot.queryParams.activeTab ?? 'events');\n\t\treturn;\n\t}\n\n\ttoggleActiveTab(tab: 'events' | 'apps' | 'event deliveries') {\n\t\tthis.activeTab = tab;\n\t\tthis.addFilterToURL({ section: 'logTab' });\n\n\t\tif (tab === 'apps' && this.apps?.content.length > 0) {\n\t\t\tthis.detailsItem = this.apps?.content[0];\n\t\t} else if (tab === 'events' && this.events?.content.length > 0) {\n\t\t\tthis.eventDetailsActiveTab = 'data';\n\t\t\tthis.detailsItem = this.events?.content[0];\n\t\t\tthis.getEventDeliveriesForSidebar(this.detailsItem.uid);\n\t\t} else if (tab === 'event deliveries' && this.eventDeliveries?.content.length > 0) {\n\t\t\tthis.detailsItem = this.eventDeliveries?.content[0];\n\t\t\tthis.getDelieveryAttempts(this.detailsItem.uid);\n\t\t}\n\t}\n\n\tasync getConfigDetails() {\n\t\ttry {\n\t\t\tconst organisationDetailsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/dashboard/config?groupID=${this.activeGroup || ''}`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tthis.organisationDetails = organisationDetailsResponse.data;\n\t\t} catch (error) {}\n\t}\n\n\tgetFiltersFromURL() {\n\t\tconst filters = this.route.snapshot.queryParams;\n\t\tif (Object.keys(filters).length == 0) return;\n\n\t\t// for events filters\n\t\tthis.eventsFilterDateRange.patchValue({\n\t\t\tstartDate: filters.eventsStartDate ? new Date(filters.eventsStartDate) : '',\n\t\t\tendDate: filters.eventsEndDate ? new Date(filters.eventsEndDate) : ''\n\t\t});\n\t\tthis.eventApp = filters.eventsApp ?? '';\n\n\t\t// for event deliveries filters\n\t\tthis.eventDeliveriesFilterDateRange.patchValue({\n\t\t\tstartDate: filters.eventDelsStartDate ? new Date(filters.eventDelsStartDate) : '',\n\t\t\tendDate: filters.eventDelsEndDate ? new Date(filters.eventDelsEndDate) : ''\n\t\t});\n\t\tthis.eventDeliveriesApp = filters.eventDelsApp ?? '';\n\t\tthis.eventDeliveryFilteredByStatus = filters.eventDelsStatus ?? null;\n\t}\n\n\tasync fetchDashboardData() {\n\t\ttry {\n\t\t\tconst { startDate, endDate } = this.setDateForFilter(this.statsDateRange.value);\n\n\t\t\tconst dashboardResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/dashboard/summary?groupID=${this.activeGroup || ''}&startDate=${startDate || ''}&endDate=${endDate || ''}&type=${this.dashboardFrequency}`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tthis.dashboardData = dashboardResponse.data;\n\n\t\t\tlet labelsDateFormat = '';\n\t\t\tif (this.dashboardFrequency === 'daily') labelsDateFormat = 'do, MMM';\n\t\t\telse if (this.dashboardFrequency === 'monthly') labelsDateFormat = 'MMM';\n\t\t\telse if (this.dashboardFrequency === 'yearly') labelsDateFormat = 'yyyy';\n\n\t\t\tconst chartData = dashboardResponse.data.event_data;\n\t\t\tconst labels = [...chartData.map((label: { data: { date: any } }) => label.data.date)].map(date => {\n\t\t\t\treturn this.dashboardFrequency === 'weekly' ? date : format(new Date(date), labelsDateFormat);\n\t\t\t});\n\t\t\tlabels.unshift('0');\n\t\t\tconst dataSet = [0, ...chartData.map((label: { count: any }) => label.count)];\n\t\t\tconst data = {\n\t\t\t\tlabels,\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdata: dataSet,\n\t\t\t\t\t\tfill: false,\n\t\t\t\t\t\tborderColor: '#477DB3',\n\t\t\t\t\t\ttension: 0.5,\n\t\t\t\t\t\tyAxisID: 'yAxis',\n\t\t\t\t\t\txAxisID: 'xAxis'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst options = {\n\t\t\t\tplugins: {\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tscales: {\n\t\t\t\t\txAxis: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\tgrid: {\n\t\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (!Chart.getChart('dahboard_events_chart') || !Chart.getChart('dahboard_events_chart')?.canvas) {\n\t\t\t\tnew Chart('dahboard_events_chart', {\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tdata,\n\t\t\t\t\toptions\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst currentChart = Chart.getChart('dahboard_events_chart');\n\t\t\t\tif (currentChart) {\n\t\t\t\t\tcurrentChart.data.labels = labels;\n\t\t\t\t\tcurrentChart.data.datasets[0].data = dataSet;\n\t\t\t\t\tcurrentChart.update();\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(Chart.getChart('dahboard_events_chart'));\n\t\t} catch (error) {}\n\t}\n\n\tsetDateForFilter(requestDetails: { startDate: Date; endDate: Date }) {\n\t\tif (!requestDetails.endDate && !requestDetails.startDate) return { startDate: '', endDate: '' };\n\t\tconst startDate = requestDetails.startDate ? `${format(requestDetails.startDate, 'yyyy-M-d')}T00:00:00` : '';\n\t\tconst endDate = requestDetails.endDate ? `${format(requestDetails.endDate, 'yyyy-M-d')}T00:00:00` : '';\n\t\treturn { startDate, endDate };\n\t}\n\n\tgetDate(date: Date) {\n\t\tconst months = ['Jan', 'Feb', 'Mar', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\t\tconst _date = new Date(date);\n\t\tconst day = _date.getDate();\n\t\tconst month = _date.getMonth();\n\t\tconst year = _date.getFullYear();\n\t\treturn `${day} ${months[month]}, ${year}`;\n\t}\n\n\tsetEventsDisplayed(events: { created_at: Date }[]) {\n\t\tconst dateCreateds = events.map((event: { created_at: Date }) => this.getDate(event.created_at));\n\t\tconst uniqueDateCreateds = [...new Set(dateCreateds)];\n\t\tconst displayedEvents: any = [];\n\t\tuniqueDateCreateds.forEach(eventDate => {\n\t\t\tconst filteredEventDate = events.filter((event: { created_at: Date }) => this.getDate(event.created_at) === eventDate);\n\t\t\tconst eventsItem = { date: eventDate, events: filteredEventDate };\n\t\t\tdisplayedEvents.push(eventsItem);\n\t\t});\n\t\treturn displayedEvents;\n\t}\n\n\tasync getEvents(requestDetails?: { appId?: string; addToURL?: boolean }) {\n\t\tif (requestDetails?.appId) this.eventApp = requestDetails.appId;\n\t\tif (requestDetails?.addToURL) this.addFilterToURL({ section: 'events' });\n\n\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventsFilterDateRange.value);\n\n\t\ttry {\n\t\t\tconst eventsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(\n\t\t\t\t\t`/events?groupID=${this.activeGroup || ''}&sort=AESC&page=${this.eventsPage || 1}&perPage=20&startDate=${startDate}&endDate=${endDate}&appId=${requestDetails?.appId ?? this.eventApp}`\n\t\t\t\t),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tif (this.activeTab === 'events') this.detailsItem = eventsResponse.data.content[0];\n\n\t\t\tif (this.events && this.events?.pagination?.next === this.eventsPage) {\n\t\t\t\tconst content = [...this.events.content, ...eventsResponse.data.content];\n\t\t\t\tconst pagination = eventsResponse.data.pagination;\n\t\t\t\tthis.events = { content, pagination };\n\t\t\t\tthis.displayedEvents = this.setEventsDisplayed(content);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.events = eventsResponse.data;\n\t\t\tthis.displayedEvents = await this.setEventsDisplayed(eventsResponse.data.content);\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\taddFilterToURL(requestDetails: { section: 'events' | 'eventDels' | 'group' | 'logTab' }) {\n\t\tconst currentURLfilters = this.route.snapshot.queryParams;\n\t\tconst queryParams: any = {};\n\n\t\tif (requestDetails.section === 'events') {\n\t\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventsFilterDateRange.value);\n\t\t\tif (startDate) queryParams.eventsStartDate = startDate;\n\t\t\tif (endDate) queryParams.eventsEndDate = endDate;\n\t\t\tif (this.eventApp) queryParams.eventsApp = this.eventApp;\n\t\t}\n\n\t\tif (requestDetails.section === 'eventDels') {\n\t\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n\t\t\tif (startDate) queryParams.eventDelsStartDate = startDate;\n\t\t\tif (endDate) queryParams.eventDelsEndDate = endDate;\n\t\t\tif (this.eventDeliveriesApp) queryParams.eventDelsApp = this.eventDeliveriesApp;\n\t\t\tqueryParams.eventDelsStatus = this.eventDeliveryFilteredByStatus || '';\n\t\t}\n\n\t\tif (requestDetails.section === 'group') queryParams.group = this.activeGroup;\n\n\t\tif (requestDetails.section === 'logTab') queryParams.activeTab = this.activeTab;\n\n\t\tthis.router.navigate([], {\n\t\t\tqueryParams: Object.assign({}, currentURLfilters, queryParams)\n\t\t});\n\t}\n\n\tasync eventDeliveriesRequest(requestDetails: { eventId?: string; startDate?: string; endDate?: string }): Promise<HTTP_RESPONSE> {\n\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n\n\t\ttry {\n\t\t\tconst eventDeliveriesResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(\n\t\t\t\t\t`/eventdeliveries?groupID=${this.activeGroup || ''}&eventId=${requestDetails.eventId || ''}&page=${this.eventDeliveriesPage || 1}&startDate=${startDate}&endDate=${endDate}&appId=${\n\t\t\t\t\t\tthis.eventDeliveriesApp\n\t\t\t\t\t}&status=${this.eventDeliveryFilteredByStatus || ''}`\n\t\t\t\t),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\n\t\t\treturn eventDeliveriesResponse;\n\t\t} catch (error: any) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync getEventDeliveries(requestDetails?: { addToURL?: boolean }) {\n\t\tif (requestDetails?.addToURL) this.addFilterToURL({ section: 'eventDels' });\n\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n\n\t\ttry {\n\t\t\tconst eventDeliveriesResponse = await this.eventDeliveriesRequest({\n\t\t\t\teventId: this.eventDeliveryFilteredByEventId,\n\t\t\t\tstartDate,\n\t\t\t\tendDate\n\t\t\t});\n\t\t\tif (this.activeTab === 'event deliveries') this.detailsItem = eventDeliveriesResponse.data.content[0];\n\n\t\t\tif (this.eventDeliveries && this.eventDeliveries?.pagination?.next === this.eventDeliveriesPage) {\n\t\t\t\tconst content = [...this.eventDeliveries.content, ...eventDeliveriesResponse.data.content];\n\t\t\t\tconst pagination = eventDeliveriesResponse.data.pagination;\n\t\t\t\tthis.eventDeliveries = { content, pagination };\n\t\t\t\tthis.displayedEventDeliveries = this.setEventsDisplayed(content);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.eventDeliveries = eventDeliveriesResponse.data;\n\t\t\tthis.displayedEventDeliveries = this.setEventsDisplayed(eventDeliveriesResponse.data.content);\n\t\t\treturn eventDeliveriesResponse.data.content;\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync getEventDeliveriesForSidebar(eventId: string) {\n\t\tconst response = await this.eventDeliveriesRequest({\n\t\t\teventId,\n\t\t\tstartDate: '',\n\t\t\tendDate: ''\n\t\t});\n\t\tthis.sidebarEventDeliveries = response.data.content;\n\t}\n\n\tasync toggleActiveGroup() {\n\t\tawait Promise.all([this.clearEventFilters('event deliveries'), this.clearEventFilters('events')]);\n\t\tthis.addFilterToURL({ section: 'group' });\n\t\tPromise.all([this.getConfigDetails(), this.fetchDashboardData(), this.getEvents(), this.getApps(), this.getEventDeliveries()]);\n\t}\n\n\tasync getGroups(requestDetails?: { addToURL?: boolean }) {\n\t\tif (requestDetails?.addToURL) this.addFilterToURL({ section: 'group' });\n\n\t\ttry {\n\t\t\tconst groupsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/groups`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tthis.groups = groupsResponse.data;\n\n\t\t\t// check group existing filter in url and set active group\n\t\t\tthis.activeGroup = this.route.snapshot.queryParams.group ?? this.groups[0]?.uid;\n\t\t\treturn;\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync getApps() {\n\t\ttry {\n\t\t\tconst appsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/apps?groupID=${this.activeGroup || ''}&sort=AESC&page=${this.appsPage || 1}&perPage=10`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\n\t\t\tif (this.apps?.pagination?.next === this.appsPage) {\n\t\t\t\tconst content = [...this.apps.content, ...appsResponse.data.content];\n\t\t\t\tconst pagination = appsResponse.data.pagination;\n\t\t\t\tthis.apps = { content, pagination };\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.apps = appsResponse.data;\n\t\t\tif (this.activeTab === 'apps') this.detailsItem = this.apps?.content[0];\n\t\t\treturn;\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync getDelieveryAttempts(eventDeliveryId: string) {\n\t\ttry {\n\t\t\tconst deliveryAttemptsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/eventdeliveries/${eventDeliveryId}/deliveryattempts?groupID=${this.activeGroup || ''}`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tthis.eventDeliveryAtempt = deliveryAttemptsResponse.data[deliveryAttemptsResponse.data.length - 1];\n\t\t\treturn;\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tgetCodeSnippetString(type: 'res_body' | 'event' | 'event_delivery' | 'res_head' | 'req') {\n\t\tif (type === 'event') {\n\t\t\tif (!this.detailsItem?.data) return 'No event data was sent';\n\t\t\treturn JSON.stringify(this.detailsItem.data || this.detailsItem.metadata.data, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n\t\t} else if (type === 'event_delivery') {\n\t\t\tif (!this.detailsItem?.metadata?.data) return 'No event data was sent';\n\t\t\treturn JSON.stringify(this.detailsItem.metadata.data, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n\t\t} else if (type === 'res_body') {\n\t\t\tif (!this.eventDeliveryAtempt) return 'No response body was sent';\n\t\t\treturn this.eventDeliveryAtempt.response_data;\n\t\t} else if (type === 'res_head') {\n\t\t\tif (!this.eventDeliveryAtempt) return 'No response header was sent';\n\t\t\treturn JSON.stringify(this.eventDeliveryAtempt.response_http_header, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n\t\t} else if (type === 'req') {\n\t\t\tif (!this.eventDeliveryAtempt) return 'No request header was sent';\n\t\t\treturn JSON.stringify(this.eventDeliveryAtempt.request_http_header, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n\t\t}\n\t\treturn '';\n\t}\n\n\tasync retryEvent(requestDetails: { e: any; index: number; eventDeliveryId: string }) {\n\t\trequestDetails.e.stopPropagation();\n\t\tconst retryButton: any = document.querySelector(`#event${requestDetails.index} button`);\n\t\tif (retryButton) {\n\t\t\tretryButton.classList.add(['spin', 'disabled']);\n\t\t\tretryButton.disabled = true;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.convyAppService.request({\n\t\t\t\tmethod: 'put',\n\t\t\t\turl: this.getAPIURL(`/eventdeliveries/${requestDetails.eventDeliveryId}/resend?groupID=${this.activeGroup || ''}`)\n\t\t\t});\n\n\t\t\tthis.convyAppService.showNotification({\n\t\t\t\tmessage: 'Retry Request Sent'\n\t\t\t});\n\t\t\tretryButton.classList.remove(['spin', 'disabled']);\n\t\t\tretryButton.disabled = false;\n\t\t\tthis.getEventDeliveries();\n\t\t} catch (error: any) {\n\t\t\tthis.convyAppService.showNotification({\n\t\t\t\tmessage: error.error.message\n\t\t\t});\n\t\t\tretryButton.classList.remove(['spin', 'disabled']);\n\t\t\tretryButton.disabled = false;\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync batchRetryEvent() {\n\t\ttry {\n\t\t\tawait this.convyAppService.request({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: this.getAPIURL(`/eventdeliveries/batchretry?groupID=${this.activeGroup || ''}`),\n\t\t\t\tbody: { ids: this.selectedEventsFromEventDeliveriesTable }\n\t\t\t});\n\n\t\t\tthis.convyAppService.showNotification({\n\t\t\t\tmessage: 'Batch Retry Request Sent'\n\t\t\t});\n\t\t\tthis.getEventDeliveries();\n\t\t\tthis.selectedEventsFromEventDeliveriesTable = [];\n\t\t} catch (error: any) {\n\t\t\tthis.convyAppService.showNotification({\n\t\t\t\tmessage: error.error.message\n\t\t\t});\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync clearEventFilters(tableName: 'events' | 'event deliveries') {\n\t\tconst activeFilters = Object.assign({}, this.route.snapshot.queryParams);\n\t\tlet filterItems: string[] = [];\n\n\t\tswitch (tableName) {\n\t\t\tcase 'events':\n\t\t\t\tthis.eventApp = '';\n\t\t\t\tfilterItems = ['eventsStartDate', 'eventsEndDate', 'eventsApp'];\n\t\t\t\tthis.eventsFilterDateRange.patchValue({\n\t\t\t\t\tstartDate: '',\n\t\t\t\t\tendDate: ''\n\t\t\t\t});\n\t\t\t\tthis.getEvents();\n\t\t\t\tbreak;\n\n\t\t\tcase 'event deliveries':\n\t\t\t\tthis.eventDeliveriesApp = '';\n\t\t\t\tfilterItems = ['eventDelsStartDate', 'eventDelsEndDate', 'eventDelsApp', 'eventDelsStatus'];\n\t\t\t\tthis.eventDeliveriesFilterDateRange.patchValue({\n\t\t\t\t\tstartDate: '',\n\t\t\t\t\tendDate: ''\n\t\t\t\t});\n\t\t\t\tthis.eventDeliveryFilteredByEventId = '';\n\t\t\t\tthis.eventDeliveryFilteredByStatus = '';\n\t\t\t\tthis.getEventDeliveries();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tfilterItems.forEach(key => (activeFilters.hasOwnProperty(key) ? delete activeFilters[key] : null));\n\t\tawait this.router.navigate([], {\n\t\t\trelativeTo: this.route,\n\t\t\tqueryParams: activeFilters\n\t\t});\n\t}\n\n\tcheckAllCheckboxes(event: any) {\n\t\tconst checkboxes = document.querySelectorAll('#event-deliveries-table tbody input[type=\"checkbox\"]');\n\n\t\tcheckboxes.forEach((checkbox: any) => {\n\t\t\tthis.selectedEventsFromEventDeliveriesTable.push(checkbox.value);\n\t\t\tcheckbox.checked = event.target.checked;\n\t\t});\n\n\t\tif (!event.target.checked) this.selectedEventsFromEventDeliveriesTable = [];\n\t\tthis.allEventdeliveriesChecked = event.target.checked;\n\t}\n\n\tcheckEventDeliveryBox(event: any) {\n\t\tconst checkbox = event.target;\n\t\tif (checkbox.checked) {\n\t\t\tthis.selectedEventsFromEventDeliveriesTable.push(checkbox.value);\n\t\t} else {\n\t\t\tthis.selectedEventsFromEventDeliveriesTable = this.selectedEventsFromEventDeliveriesTable.filter(eventId => eventId !== checkbox.value);\n\t\t}\n\t\tthis.allEventdeliveriesChecked = false;\n\t\tconst parentCheckbox: any = document.querySelector('#eventDeliveryTable');\n\t\tparentCheckbox.checked = false;\n\t}\n\n\tasync loadMoreEventDeliveries() {\n\t\tthis.eventDeliveriesPage = this.eventDeliveriesPage + 1;\n\t\tawait this.getEventDeliveries();\n\t\tsetTimeout(() => {\n\t\t\tif (this.allEventdeliveriesChecked) {\n\t\t\t\tthis.checkAllCheckboxes({ target: { checked: true } });\n\t\t\t}\n\t\t}, 200);\n\t}\n\n\tasync openDeliveriesTab() {\n\t\tawait this.getEventDeliveries();\n\t\tthis.toggleActiveTab('event deliveries');\n\t}\n\n\tasync refreshTables() {\n\t\tawait this.initDashboard();\n\t\tthis.toggleActiveTab('event deliveries');\n\t}\n\n\tgetAPIURL(url: string) {\n\t\treturn `${this.isProduction ? location.origin : 'http://localhost:5005'}/ui${url}`;\n\t}\n}\n","<div class=\"app-page\">\n\t<div class=\"app-page--head\">\n\t\t<h3>Endpoint and Events</h3>\n\t\t<button class=\"primary\">Create Endpoint</button>\n\t</div>\n\n\t<div class=\"app-page--details\">\n\t\t<div class=\"card app-page--endpoints\">\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr class=\"table--head\">\n\t\t\t\t\t\t<th scope=\"col\">Endpoint URL</th>\n\t\t\t\t\t\t<th scope=\"col\">Type</th>\n\t\t\t\t\t\t<th scope=\"col\">Error Rate</th>\n\t\t\t\t\t\t<th scope=\"col\">Status</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr class=\"has-border\">\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>URL goes here and will be truncated...</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Type goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Percentage goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div><div class=\"tag\">Active</div></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class=\"has-border\">\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>URL goes here and will be truncated...</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Type goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Percentage goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div><div class=\"tag\">Active</div></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class=\"has-border\">\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>URL goes here and will be truncated...</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Type goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Percentage goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div><div class=\"tag\">Active</div></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\n\t\t<div class=\"card has-title app-page--metrics\">\n\t\t\t<div class=\"card--title\">\n\t\t\t\t<h2>Metrics on events sent by endpoint</h2>\n\t\t\t</div>\n\n\t\t\t<ul class=\"card--container metrics\">\n\t\t\t\t<li>\n\t\t\t\t\t<div>5k</div>\n\t\t\t\t\t<p>Primary App</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<div>5k</div>\n\t\t\t\t\t<p>Primary App</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<div>5k</div>\n\t\t\t\t\t<p>Primary App</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<div>5k</div>\n\t\t\t\t\t<p>Primary App</p>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\n\t<section class=\"card dashboard--logs\">\n\t\t<div class=\"dashboard--logs--tabs\">\n\t\t\t<div class=\"dashboard--logs--tabs--head tabs\">\n\t\t\t\t<div class=\"tabs\">\n\t\t\t\t\t<button *ngFor=\"let tab of tabs\" (click)=\"toggleActiveTab(tab)\" class=\"clear tab\" [ngClass]=\"{ active: activeTab === tab }\">\n\t\t\t\t\t\t{{ tab }}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"table\">\n\t\t\t\t<ng-container *ngIf=\"activeTab === 'events'\">\n\t\t\t\t\t<div class=\"filter\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"filter--button date-filter-button\"\n\t\t\t\t\t\t\t(click)=\"eventsFilterPicker.open()\"\n\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\tactive: eventsFilterDateRange.value.startDate !== '' && eventsFilterDateRange.value.endDate !== ''\n\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t(click)=\"showEventFilterCalendar = !showEventFilterCalendar\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img src=\"/assets/img/calendar-icon.svg\" alt=\"calender icon\" />\n\t\t\t\t\t\t\t<mat-date-range-input [formGroup]=\"eventsFilterDateRange\" [rangePicker]=\"eventsFilterPicker\">\n\t\t\t\t\t\t\t\t<input matStartDate formControlName=\"startDate\" placeholder=\"Start date\" />\n\t\t\t\t\t\t\t\t<input matEndDate formControlName=\"endDate\" placeholder=\"End date\" (dateChange)=\"getEvents({ addToURL: true })\" />\n\t\t\t\t\t\t\t</mat-date-range-input>\n\t\t\t\t\t\t\t<mat-date-range-picker #eventsFilterPicker [disabled]=\"false\"></mat-date-range-picker>\n\t\t\t\t\t\t\t<img src=\"/assets/img/angle-arrow-down.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t<div class=\"select\">\n\t\t\t\t\t\t\t<select [ngClass]=\"{ active: !!eventApp }\" aria-label=\"frequency\" [(ngModel)]=\"eventApp\" (change)=\"getEvents({ addToURL: true })\">\n\t\t\t\t\t\t\t\t<option value=\"\">All Apps</option>\n\t\t\t\t\t\t\t\t<option [value]=\"app.uid\" *ngFor=\"let app of apps?.content\">\n\t\t\t\t\t\t\t\t\t{{ app.name }}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"filter--button primary events-filter-clear-btn\"\n\t\t\t\t\t\t\t(click)=\"clearEventFilters(activeTab)\"\n\t\t\t\t\t\t\t[disabled]=\"(eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\"\n\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\tdisabled: (eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\n\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClear Filter\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<hr />\n\n\t\t\t\t\t<div class=\"table--container smaller-table\" *ngIf=\"displayedEvents.length > 0\">\n\t\t\t\t\t\t<table id=\"events-table\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr class=\"table--head\">\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Event Type</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">App Name</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Created At</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\"></th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<ng-container *ngFor=\"let eventGroup of displayedEvents; let i = index\">\n\t\t\t\t\t\t\t\t\t<tr class=\"table--date-row\">\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>{{ eventGroup.date }}</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\t\t\t*ngFor=\"let event of eventGroup.events; let index = index\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\t\t\t\tactive: event.uid === detailsItem?.uid\n\t\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\t\t[id]=\"'event' + index\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"detailsItem = event; getEventDeliveriesForSidebar(event.uid)\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"tag\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{ event.event_type }}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td class=\"has-long-text\">\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.app_metadata.title }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.created_at | date: 'mediumTime' }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"primary clear has-icon icon-right\" (click)=\"eventDeliveryFilteredByEventId = event.uid; openDeliveriesTab()\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tDeliveries\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"../../../../assets/img/angle-arrow-right-primary.svg\" alt=\"arrow right\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\n\t\t\t\t\t\t<div class=\"table--load-more button-container center\" *ngIf=\"events.pagination.totalPage > 1\">\n\t\t\t\t\t\t\t<button [class]=\"'primary clear has-icon icon-left '\" [disabled]=\"events.pagination.page === events.pagination.totalPage\" (click)=\"eventsPage = eventsPage + 1; getEvents()\">\n\t\t\t\t\t\t\t\t<img src=\"/assets/img/arrow-down-icon.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t\t\tLoad more\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"empty-state table--container\" *ngIf=\"displayedEvents.length === 0\">\n\t\t\t\t\t\t<img src=\"/assets/img/empty-state-img.svg\" alt=\"empty state\" />\n\t\t\t\t\t\t<p>No event to show here</p>\n\t\t\t\t\t</div>\n\t\t\t\t</ng-container>\n\n\t\t\t\t<ng-container *ngIf=\"activeTab === 'event deliveries'\">\n\t\t\t\t\t<div class=\"filter\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"filter--button date-filter-button\"\n\t\t\t\t\t\t\t(click)=\"eventDeliveriesFilterPicker.open()\"\n\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\tactive: eventDeliveriesFilterDateRange.value.startDate !== '' && eventDeliveriesFilterDateRange.value.endDate !== ''\n\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t(click)=\"showEventFilterCalendar = !showEventFilterCalendar\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img src=\"/assets/img/calendar-icon.svg\" alt=\"calender icon\" />\n\t\t\t\t\t\t\t<mat-date-range-input [formGroup]=\"eventDeliveriesFilterDateRange\" [rangePicker]=\"eventDeliveriesFilterPicker\">\n\t\t\t\t\t\t\t\t<input matStartDate formControlName=\"startDate\" placeholder=\"Start date\" />\n\t\t\t\t\t\t\t\t<input matEndDate formControlName=\"endDate\" placeholder=\"End date\" (dateChange)=\"getEventDeliveries({ addToURL: true })\" />\n\t\t\t\t\t\t\t</mat-date-range-input>\n\t\t\t\t\t\t\t<mat-date-range-picker #eventDeliveriesFilterPicker [disabled]=\"false\"></mat-date-range-picker>\n\t\t\t\t\t\t\t<img src=\"/assets/img/angle-arrow-down.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div class=\"dropdown\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclass=\"filter--button dropdown--button\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\t\tactive: eventDeliveryFilteredByStatus\n\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t(click)=\"showOverlay = true; showEventDeliveriesStatusDropdown = !showEventDeliveriesStatusDropdown\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<img src=\"/assets/img/status-filter-icon.svg\" alt=\"status filter icon\" />\n\t\t\t\t\t\t\t\t<span>{{ eventDeliveryFilteredByStatus || 'Status' }}</span>\n\t\t\t\t\t\t\t\t<img src=\"/assets/img/angle-arrow-down.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<div class=\"dropdown--list\" *ngIf=\"showEventDeliveriesStatusDropdown\">\n\t\t\t\t\t\t\t\t<div class=\"dropdown--list--item\" *ngFor=\"let status of eventDeliveryStatuses\">\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\t\tname=\"status\"\n\t\t\t\t\t\t\t\t\t\t[value]=\"status\"\n\t\t\t\t\t\t\t\t\t\t[(ngModel)]=\"eventDeliveryFilteredByStatus\"\n\t\t\t\t\t\t\t\t\t\t[id]=\"status\"\n\t\t\t\t\t\t\t\t\t\t(change)=\"\n\t\t\t\t\t\t\t\t\t\t\tshowOverlay = false;\n\t\t\t\t\t\t\t\t\t\t\tshowEventDeliveriesStatusDropdown = false;\n\t\t\t\t\t\t\t\t\t\t\tgetEventDeliveries({\n\t\t\t\t\t\t\t\t\t\t\t\taddToURL: true\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<label [for]=\"status\">{{ status || 'None' }}</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"select\">\n\t\t\t\t\t\t\t<select [ngClass]=\"{ active: !!eventDeliveriesApp }\" aria-label=\"frequency\" [(ngModel)]=\"eventDeliveriesApp\" (change)=\"getEventDeliveries({ addToURL: true })\">\n\t\t\t\t\t\t\t\t<option value=\"\">All Apps</option>\n\t\t\t\t\t\t\t\t<option [value]=\"app.uid\" *ngFor=\"let app of apps?.content\">\n\t\t\t\t\t\t\t\t\t{{ app.name }}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"filter--button event-button active\" *ngIf=\"eventDeliveryFilteredByEventId !== ''\">\n\t\t\t\t\t\t\tEvent Filtered\n\t\t\t\t\t\t\t<button class=\"primary clear has-icon\" (click)=\"eventDeliveryFilteredByEventId = ''; getEventDeliveries()\">\n\t\t\t\t\t\t\t\t<img src=\"../../../../assets/img/close-icon.svg\" alt=\"close icon\" />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"filter--button primary events-filter-clear-btn\"\n\t\t\t\t\t\t\t(click)=\"clearEventFilters(activeTab)\"\n\t\t\t\t\t\t\t[disabled]=\"\n\t\t\t\t\t\t\t\t(eventDeliveriesFilterDateRange.value.startDate == '' || eventDeliveriesFilterDateRange.value.endDate == '') &&\n\t\t\t\t\t\t\t\teventDeliveriesApp == '' &&\n\t\t\t\t\t\t\t\teventDeliveryFilteredByEventId == '' &&\n\t\t\t\t\t\t\t\t!eventDeliveryFilteredByStatus\n\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClear Filter\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<hr />\n\n\t\t\t\t\t<div class=\"table--actions button-container left\">\n\t\t\t\t\t\t<button class=\"primary clear has-icon icon-left hover\" (click)=\"refreshTables()\">\n\t\t\t\t\t\t\t<img src=\"../../../../assets/img/refresh-icon-2.svg\" alt=\"refresh icon\" />\n\t\t\t\t\t\t\tRefresh\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"primary clear has-icon icon-left hover\" (click)=\"batchRetryEvent()\" [disabled]=\"selectedEventsFromEventDeliveriesTable.length <= 0\">\n\t\t\t\t\t\t\t<img src=\"../../../../assets/img/retry-icon.svg\" alt=\"retry icon\" />\n\t\t\t\t\t\t\tBulk Retry\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"table--container\" *ngIf=\"displayedEventDeliveries.length > 0\">\n\t\t\t\t\t\t<table id=\"event-deliveries-table\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr class=\"table--head\">\n\t\t\t\t\t\t\t\t\t<th scope=\"col\" class=\"checkbox\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"checkbox\">\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"eventDeliveryTable\" id=\"eventDeliveryTable\" (change)=\"checkAllCheckboxes($event)\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\tStatus\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Event Type</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Attempts</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Created At</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\"></th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<ng-container *ngFor=\"let eventDeliveriesGroup of displayedEventDeliveries; let i = index\">\n\t\t\t\t\t\t\t\t\t<tr class=\"table--date-row\">\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ eventDeliveriesGroup.date }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\t\t\t*ngFor=\"let event of eventDeliveriesGroup.events; let index = index\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\t\t\t\tactive: event.uid === detailsItem?.uid\n\t\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\t\t[id]=\"'event' + index\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"detailsItem = event; getDelieveryAttempts(event.uid)\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"checkbox has-retry\">\n\t\t\t\t\t\t\t\t\t\t\t\t<img *ngIf=\"event.metadata.num_trials > event.metadata.retry_limit\" src=\"/assets/img/retry-icon.svg\" alt=\"retry icon\" title=\"manually retried\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" [name]=\"'event' + index\" id=\"event\" [value]=\"event.uid\" (change)=\"checkEventDeliveryBox($event)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<div [class]=\"'tag tag--' + event.status\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{ event.status }}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.event_metadata.name }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.metadata?.num_trials }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.created_at | date: 'mediumTime' }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t[disabled]=\"event.status === 'Success' || event.status === 'Scheduled'\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t[class]=\"'primary has-icon icon-left ' + (event.status === 'Success' || event.status === 'Scheduled' ? 'disabled' : '')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tretryEvent({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te: $event,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex: this.index,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventDeliveryId: event.uid\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"/assets/img/refresh-icon.svg\" alt=\"refresh icon\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\tRetry\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\n\t\t\t\t\t\t<div class=\"table--load-more button-container center\" *ngIf=\"eventDeliveries.pagination.totalPage > 1\">\n\t\t\t\t\t\t\t<button [class]=\"'primary clear has-icon icon-left'\" [disabled]=\"eventDeliveries.pagination.page === eventDeliveries.pagination.totalPage\" (click)=\"loadMoreEventDeliveries()\">\n\t\t\t\t\t\t\t\t<img src=\"/assets/img/arrow-down-icon.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t\t\tLoad more\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"empty-state table--container\" *ngIf=\"displayedEventDeliveries.length === 0\">\n\t\t\t\t\t\t<img src=\"/assets/img/empty-state-img.svg\" alt=\"empty state\" />\n\t\t\t\t\t\t<p>No event to show here</p>\n\t\t\t\t\t</div>\n\t\t\t\t</ng-container>\n\n\t\t\t\t<div class=\"table--container smaller-table\" *ngIf=\"apps && apps.content.length > 0 && activeTab === 'apps'\">\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr class=\"table--head\">\n\t\t\t\t\t\t\t\t<th scope=\"col\">Name</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Created</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Updated</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Events</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Endpoints</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\"></th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\t*ngFor=\"let app of apps?.content\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\t\tactive: app.uid === detailsItem?.uid\n\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t(click)=\"detailsItem = app\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<td class=\"has-long-text\">\n\t\t\t\t\t\t\t\t\t<div>{{ app.name }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>{{ app.created_at | date }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>{{ app.updated_at | date }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>{{ app.events }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>{{ app.endpoints.length }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t[disabled]=\"app.events <= 0\"\n\t\t\t\t\t\t\t\t\t\t\ttitle=\"view events\"\n\t\t\t\t\t\t\t\t\t\t\t[class]=\"'primary has-icon icon-left'\"\n\t\t\t\t\t\t\t\t\t\t\t(click)=\"\n\t\t\t\t\t\t\t\t\t\t\t\ttoggleActiveTab('events');\n\t\t\t\t\t\t\t\t\t\t\t\tgetEvents({\n\t\t\t\t\t\t\t\t\t\t\t\t\taddToURL: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\tappId: app.uid\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<img src=\"/assets/img/view-events-icon.svg\" alt=\"view events icon\" />\n\t\t\t\t\t\t\t\t\t\t\tEvents\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\n\t\t\t\t\t<div class=\"table--load-more button-container margin-top center\" *ngIf=\"apps?.pagination && apps.pagination.totalPage > 1\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t[class]=\"'primary clear has-icon icon-left ' + (apps.pagination.page === apps.pagination.totalPage ? 'disabled' : '')\"\n\t\t\t\t\t\t\t[disabled]=\"apps.pagination.page === apps.pagination.totalPage\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img src=\"/assets/img/arrow-down-icon.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t\tLoad more\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"empty-state\" *ngIf=\"apps?.content?.length === 0 && activeTab === 'apps'\">\n\t\t\t\t\t<img src=\"/assets/img/empty-state-img.svg\" alt=\"empty state\" />\n\t\t\t\t\t<p>No app to show here</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"dashboard--logs--details\">\n\t\t\t<ng-container *ngIf=\"detailsItem\">\n\t\t\t\t<h3>Details</h3>\n\t\t\t\t<ul class=\"dashboard--logs--details--meta\" *ngIf=\"activeTab === 'apps' || activeTab === 'event deliveries'\">\n\t\t\t\t\t<ng-container *ngIf=\"activeTab === 'event deliveries'\">\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">IP Address</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\">\n\t\t\t\t\t\t\t\t{{ eventDeliveryAtempt?.ip_address || '-' }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">HTTP Status</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item\">\n\t\t\t\t\t\t\t\t{{ eventDeliveryAtempt?.http_status || '-' }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">API Version</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\">\n\t\t\t\t\t\t\t\t{{ eventDeliveryAtempt?.api_version || '-' }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">Endpoint</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\" [title]=\"detailsItem.endpoint?.target_url\">\n\t\t\t\t\t\t\t\t{{ detailsItem.endpoint?.target_url }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\" *ngIf=\"detailsItem.metadata?.num_trials < detailsItem.metadata?.retry_limit && detailsItem.status !== 'Success'\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">Next Retry</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\">\n\t\t\t\t\t\t\t\t{{ detailsItem.metadata?.next_send_time | date: 'mediumTime' }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">App Name</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\">\n\t\t\t\t\t\t\t\t{{ detailsItem.app_metadata?.title }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<li class=\"list-item-inline\" *ngIf=\"activeTab === 'apps'\">\n\t\t\t\t\t\t<div class=\"list-item-inline--label\">Support Email</div>\n\t\t\t\t\t\t<div class=\"list-item-inline--item\">\n\t\t\t\t\t\t\t{{ detailsItem?.support_email || '-' }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\n\t\t\t\t<ul class=\"tabs\" *ngIf=\"activeTab === 'event deliveries'\">\n\t\t\t\t\t<li *ngFor=\"let tab of eventDetailsTabs\" [class]=\"'tab ' + (eventDetailsActiveTab === tab.id ? 'active' : '')\">\n\t\t\t\t\t\t<button class=\"primary outline\" (click)=\"eventDetailsActiveTab = tab.id\">\n\t\t\t\t\t\t\t{{ tab.label }}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\n\t\t\t\t<div class=\"dashboard--logs--details--req-res\" *ngIf=\"activeTab === 'events' || activeTab === 'event deliveries'\">\n\t\t\t\t\t<div [class]=\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'data' ? 'show' : '')\">\n\t\t\t\t\t\t<h3>Event</h3>\n\t\t\t\t\t\t<prism language=\"json\" [code]=\"getCodeSnippetString(activeTab === 'events' ? 'event' : 'event_delivery')\"></prism>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div [class]=\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'response' ? 'show' : '')\">\n\t\t\t\t\t\t<h3>Header</h3>\n\t\t\t\t\t\t<prism language=\"json\" [code]=\"getCodeSnippetString('res_head')\"></prism>\n\n\t\t\t\t\t\t<h3>Body</h3>\n\t\t\t\t\t\t<prism language=\"json\" [code]=\"getCodeSnippetString('res_body')\"></prism>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div [class]=\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'request' ? 'show' : '')\">\n\t\t\t\t\t\t<h3>Header</h3>\n\t\t\t\t\t\t<prism language=\"json\" [code]=\"getCodeSnippetString('req')\"></prism>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<ng-container *ngIf=\"activeTab === 'events'\">\n\t\t\t\t\t<h4>Deliveries Overview</h4>\n\t\t\t\t\t<ul class=\"dashboard--logs--details--endpoints inline\">\n\t\t\t\t\t\t<li *ngFor=\"let delivery of sidebarEventDeliveries\">\n\t\t\t\t\t\t\t<div [class]=\"'tag tag--' + delivery.status\">\n\t\t\t\t\t\t\t\t{{ delivery.status }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"url\" [title]=\"delivery.endpoint.target_url\">\n\t\t\t\t\t\t\t\t{{ delivery.endpoint.target_url }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</ng-container>\n\n\t\t\t\t<ng-container *ngIf=\"activeTab === 'apps'\">\n\t\t\t\t\t<h4>App Event Endpoints</h4>\n\t\t\t\t\t<ul class=\"dashboard--logs--details--endpoints\">\n\t\t\t\t\t\t<ng-container *ngIf=\"detailsItem?.endpoints\">\n\t\t\t\t\t\t\t<li *ngFor=\"let endpoint of detailsItem.endpoints\">\n\t\t\t\t\t\t\t\t<h5>{{ endpoint.description }}</h5>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<img src=\"/assets/img/link-icon.svg\" alt=\"link icon\" />\n\t\t\t\t\t\t\t\t\t{{ endpoint.target_url }}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<div class=\"events\">\n\t\t\t\t\t\t\t\t\t<div class=\"tag\" *ngFor=\"let event of endpoint.events\">\n\t\t\t\t\t\t\t\t\t\t{{ event == '*' ? 'all events' : event }}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t</ul>\n\t\t\t\t</ng-container>\n\t\t\t</ng-container>\n\t\t</div>\n\t</section>\n</div>\n\n<div class=\"overlay\" *ngIf=\"showOverlay\" (click)=\"showOverlay = false; showEventDeliveriesStatusDropdown = false\"></div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-yaml';\nimport 'prismjs/components/prism-scss';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/plugins/line-numbers/prism-line-numbers';\nimport { PrismComponent } from './prism.component';\n\n@NgModule({\n\tdeclarations: [PrismComponent],\n\timports: [CommonModule],\n\texports: [PrismComponent]\n})\nexport class PrismModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ConvoyAppComponent } from './convoy-app.component';\nimport { PrismModule } from './prism/prism.module';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\n\n@NgModule({\n    declarations: [ConvoyAppComponent],\n    imports: [\n        CommonModule,\n        PrismModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n    ],\n    exports: [ConvoyAppComponent],\n})\nexport class ConvoyAppModule {}\n","/*\n * Public API Surface of convoy-app\n */\n\nexport * from './lib/convoy-app.service';\nexport * from './lib/convoy-app.component';\nexport * from './lib/convoy-app.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Injectable, Component, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport Chart from 'chart.js/auto';\nimport { format } from 'date-fns';\nimport * as i2 from '@angular/router';\nimport * as i3 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i4 from '@angular/material/datepicker';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport * as Prism from 'prismjs';\nimport * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-yaml';\nimport 'prismjs/components/prism-scss';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/plugins/line-numbers/prism-line-numbers';\nimport { MatNativeDateModule } from '@angular/material/core';\n\nclass ConvoyAppService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    authDetails() {\n        const authDetails = localStorage.getItem('CONVOY_AUTH');\n        if (authDetails) {\n            const { username, password } = JSON.parse(authDetails);\n            return {\n                token: btoa(`${username + ':' + password}`),\n                authState: true,\n            };\n        }\n        else {\n            return { authState: false };\n        }\n    }\n    request(requestDetails) {\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestHeader = new HttpHeaders({\n                    Authorization: `Basic ${this.authDetails().token}`,\n                });\n                const requestResponse = yield this.httpClient\n                    .request(requestDetails.method, requestDetails.url, {\n                    headers: requestHeader,\n                    body: requestDetails.body,\n                })\n                    .toPromise();\n                return resolve(requestResponse);\n            }\n            catch (error) {\n                return reject(error);\n            }\n        }));\n    }\n    showNotification(details) {\n        if (!details.message)\n            return;\n        const notificationElement = document.querySelector('.app-notification');\n        if (notificationElement) {\n            notificationElement.classList.add('show');\n            notificationElement.innerHTML = details.message;\n        }\n        setTimeout(() => {\n            notificationElement === null || notificationElement === void 0 ? void 0 : notificationElement.classList.remove('show');\n        }, 3000);\n    }\n}\nConvoyAppService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\nConvoyAppService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass PrismComponent {\n    constructor() { }\n    ngAfterViewInit() {\n        Prism.highlightElement(this.codeEle.nativeElement);\n    }\n    ngOnChanges() {\n        var _a;\n        if ((_a = this.codeEle) === null || _a === void 0 ? void 0 : _a.nativeElement) {\n            this.codeEle.nativeElement.textContent = this.code;\n            Prism.highlightElement(this.codeEle.nativeElement);\n        }\n    }\n}\nPrismComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPrismComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: PrismComponent, selector: \"prism\", inputs: { code: \"code\", language: \"language\" }, viewQueries: [{ propertyName: \"codeEle\", first: true, predicate: [\"codeEle\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<pre *ngIf=\\\"language\\\" class=\\\"language-{{ language }} line-numbers\\\">\\n<code #codeEle class=\\\"language-{{ language }}\\\">{{code}}</code>\\n</pre>\\n\", styles: [\"\"], directives: [{ type: i6.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'prism', template: \"<pre *ngIf=\\\"language\\\" class=\\\"language-{{ language }} line-numbers\\\">\\n<code #codeEle class=\\\"language-{{ language }}\\\">{{code}}</code>\\n</pre>\\n\", styles: [\"\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { codeEle: [{\n                type: ViewChild,\n                args: ['codeEle']\n            }], code: [{\n                type: Input\n            }], language: [{\n                type: Input\n            }] } });\n\nclass ConvoyAppComponent {\n    constructor(convyAppService, router, formBuilder, route) {\n        this.convyAppService = convyAppService;\n        this.router = router;\n        this.formBuilder = formBuilder;\n        this.route = route;\n        this.showFilterCalendar = false;\n        this.tabs = ['events', 'event deliveries', 'apps'];\n        this.activeTab = 'events';\n        this.showEventFilterCalendar = false;\n        this.eventDateFilterActive = false;\n        this.displayedEvents = [];\n        this.eventDetailsTabs = [\n            { id: 'data', label: 'Event' },\n            { id: 'response', label: 'Response' },\n            { id: 'request', label: 'Request' }\n        ];\n        this.eventDetailsActiveTab = 'data';\n        this.dashboardData = { apps: 0, events_sent: 0 };\n        this.eventApp = '';\n        this.eventDeliveriesApp = '';\n        this.eventsPage = 1;\n        this.eventDeliveriesPage = 1;\n        this.appsPage = 1;\n        this.dashboardFrequency = 'daily';\n        this.statsDateRange = this.formBuilder.group({\n            startDate: [\n                {\n                    value: new Date(new Date().setDate(new Date().getDate() - 30)),\n                    disabled: true\n                }\n            ],\n            endDate: [{ value: new Date(), disabled: true }]\n        });\n        this.eventsFilterDateRange = this.formBuilder.group({\n            startDate: [{ value: '', disabled: true }],\n            endDate: [{ value: '', disabled: true }]\n        });\n        this.eventDeliveriesFilterDateRange = this.formBuilder.group({\n            startDate: [{ value: '', disabled: true }],\n            endDate: [{ value: '', disabled: true }]\n        });\n        this.selectedEventsFromEventDeliveriesTable = [];\n        this.displayedEventDeliveries = [];\n        this.sidebarEventDeliveries = [];\n        this.eventDeliveryFilteredByEventId = '';\n        this.groups = [];\n        this.allEventdeliveriesChecked = false;\n        this.eventDeliveryStatuses = ['', 'Success', 'Failure', 'Retry', 'Scheduled', 'Processing', 'Discarded'];\n        this.eventDeliveryFilteredByStatus = '';\n        this.showOverlay = false;\n        this.showEventDeliveriesStatusDropdown = false;\n        this.isProduction = false;\n    }\n    ngOnInit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.initDashboard();\n        });\n    }\n    initDashboard() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getGroups();\n            this.getFiltersFromURL();\n            yield Promise.all([this.getConfigDetails(), this.fetchDashboardData(), this.getEvents(), this.getApps(), this.getEventDeliveries()]);\n            // get active tab from url and apply, after getting the details from above requests so that the data is available ahead\n            this.toggleActiveTab((_a = this.route.snapshot.queryParams.activeTab) !== null && _a !== void 0 ? _a : 'events');\n            return;\n        });\n    }\n    toggleActiveTab(tab) {\n        var _a, _b, _c, _d, _e, _f;\n        this.activeTab = tab;\n        this.addFilterToURL({ section: 'logTab' });\n        if (tab === 'apps' && ((_a = this.apps) === null || _a === void 0 ? void 0 : _a.content.length) > 0) {\n            this.detailsItem = (_b = this.apps) === null || _b === void 0 ? void 0 : _b.content[0];\n        }\n        else if (tab === 'events' && ((_c = this.events) === null || _c === void 0 ? void 0 : _c.content.length) > 0) {\n            this.eventDetailsActiveTab = 'data';\n            this.detailsItem = (_d = this.events) === null || _d === void 0 ? void 0 : _d.content[0];\n            this.getEventDeliveriesForSidebar(this.detailsItem.uid);\n        }\n        else if (tab === 'event deliveries' && ((_e = this.eventDeliveries) === null || _e === void 0 ? void 0 : _e.content.length) > 0) {\n            this.detailsItem = (_f = this.eventDeliveries) === null || _f === void 0 ? void 0 : _f.content[0];\n            this.getDelieveryAttempts(this.detailsItem.uid);\n        }\n    }\n    getConfigDetails() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const organisationDetailsResponse = yield this.convyAppService.request({\n                    url: this.getAPIURL(`/dashboard/config?groupID=${this.activeGroup || ''}`),\n                    method: 'get'\n                });\n                this.organisationDetails = organisationDetailsResponse.data;\n            }\n            catch (error) { }\n        });\n    }\n    getFiltersFromURL() {\n        var _a, _b, _c;\n        const filters = this.route.snapshot.queryParams;\n        if (Object.keys(filters).length == 0)\n            return;\n        // for events filters\n        this.eventsFilterDateRange.patchValue({\n            startDate: filters.eventsStartDate ? new Date(filters.eventsStartDate) : '',\n            endDate: filters.eventsEndDate ? new Date(filters.eventsEndDate) : ''\n        });\n        this.eventApp = (_a = filters.eventsApp) !== null && _a !== void 0 ? _a : '';\n        // for event deliveries filters\n        this.eventDeliveriesFilterDateRange.patchValue({\n            startDate: filters.eventDelsStartDate ? new Date(filters.eventDelsStartDate) : '',\n            endDate: filters.eventDelsEndDate ? new Date(filters.eventDelsEndDate) : ''\n        });\n        this.eventDeliveriesApp = (_b = filters.eventDelsApp) !== null && _b !== void 0 ? _b : '';\n        this.eventDeliveryFilteredByStatus = (_c = filters.eventDelsStatus) !== null && _c !== void 0 ? _c : null;\n    }\n    fetchDashboardData() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { startDate, endDate } = this.setDateForFilter(this.statsDateRange.value);\n                const dashboardResponse = yield this.convyAppService.request({\n                    url: this.getAPIURL(`/dashboard/summary?groupID=${this.activeGroup || ''}&startDate=${startDate || ''}&endDate=${endDate || ''}&type=${this.dashboardFrequency}`),\n                    method: 'get'\n                });\n                this.dashboardData = dashboardResponse.data;\n                let labelsDateFormat = '';\n                if (this.dashboardFrequency === 'daily')\n                    labelsDateFormat = 'do, MMM';\n                else if (this.dashboardFrequency === 'monthly')\n                    labelsDateFormat = 'MMM';\n                else if (this.dashboardFrequency === 'yearly')\n                    labelsDateFormat = 'yyyy';\n                const chartData = dashboardResponse.data.event_data;\n                const labels = [...chartData.map((label) => label.data.date)].map(date => {\n                    return this.dashboardFrequency === 'weekly' ? date : format(new Date(date), labelsDateFormat);\n                });\n                labels.unshift('0');\n                const dataSet = [0, ...chartData.map((label) => label.count)];\n                const data = {\n                    labels,\n                    datasets: [\n                        {\n                            data: dataSet,\n                            fill: false,\n                            borderColor: '#477DB3',\n                            tension: 0.5,\n                            yAxisID: 'yAxis',\n                            xAxisID: 'xAxis'\n                        }\n                    ]\n                };\n                const options = {\n                    plugins: {\n                        legend: {\n                            display: false\n                        }\n                    },\n                    scales: {\n                        xAxis: {\n                            display: true,\n                            grid: {\n                                display: false\n                            }\n                        }\n                    }\n                };\n                if (!Chart.getChart('dahboard_events_chart') || !((_a = Chart.getChart('dahboard_events_chart')) === null || _a === void 0 ? void 0 : _a.canvas)) {\n                    new Chart('dahboard_events_chart', {\n                        type: 'line',\n                        data,\n                        options\n                    });\n                }\n                else {\n                    const currentChart = Chart.getChart('dahboard_events_chart');\n                    if (currentChart) {\n                        currentChart.data.labels = labels;\n                        currentChart.data.datasets[0].data = dataSet;\n                        currentChart.update();\n                    }\n                }\n                console.log(Chart.getChart('dahboard_events_chart'));\n            }\n            catch (error) { }\n        });\n    }\n    setDateForFilter(requestDetails) {\n        if (!requestDetails.endDate && !requestDetails.startDate)\n            return { startDate: '', endDate: '' };\n        const startDate = requestDetails.startDate ? `${format(requestDetails.startDate, 'yyyy-M-d')}T00:00:00` : '';\n        const endDate = requestDetails.endDate ? `${format(requestDetails.endDate, 'yyyy-M-d')}T00:00:00` : '';\n        return { startDate, endDate };\n    }\n    getDate(date) {\n        const months = ['Jan', 'Feb', 'Mar', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n        const _date = new Date(date);\n        const day = _date.getDate();\n        const month = _date.getMonth();\n        const year = _date.getFullYear();\n        return `${day} ${months[month]}, ${year}`;\n    }\n    setEventsDisplayed(events) {\n        const dateCreateds = events.map((event) => this.getDate(event.created_at));\n        const uniqueDateCreateds = [...new Set(dateCreateds)];\n        const displayedEvents = [];\n        uniqueDateCreateds.forEach(eventDate => {\n            const filteredEventDate = events.filter((event) => this.getDate(event.created_at) === eventDate);\n            const eventsItem = { date: eventDate, events: filteredEventDate };\n            displayedEvents.push(eventsItem);\n        });\n        return displayedEvents;\n    }\n    getEvents(requestDetails) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (requestDetails === null || requestDetails === void 0 ? void 0 : requestDetails.appId)\n                this.eventApp = requestDetails.appId;\n            if (requestDetails === null || requestDetails === void 0 ? void 0 : requestDetails.addToURL)\n                this.addFilterToURL({ section: 'events' });\n            const { startDate, endDate } = this.setDateForFilter(this.eventsFilterDateRange.value);\n            try {\n                const eventsResponse = yield this.convyAppService.request({\n                    url: this.getAPIURL(`/events?groupID=${this.activeGroup || ''}&sort=AESC&page=${this.eventsPage || 1}&perPage=20&startDate=${startDate}&endDate=${endDate}&appId=${(_a = requestDetails === null || requestDetails === void 0 ? void 0 : requestDetails.appId) !== null && _a !== void 0 ? _a : this.eventApp}`),\n                    method: 'get'\n                });\n                if (this.activeTab === 'events')\n                    this.detailsItem = eventsResponse.data.content[0];\n                if (this.events && ((_c = (_b = this.events) === null || _b === void 0 ? void 0 : _b.pagination) === null || _c === void 0 ? void 0 : _c.next) === this.eventsPage) {\n                    const content = [...this.events.content, ...eventsResponse.data.content];\n                    const pagination = eventsResponse.data.pagination;\n                    this.events = { content, pagination };\n                    this.displayedEvents = this.setEventsDisplayed(content);\n                    return;\n                }\n                this.events = eventsResponse.data;\n                this.displayedEvents = yield this.setEventsDisplayed(eventsResponse.data.content);\n            }\n            catch (error) {\n                return error;\n            }\n        });\n    }\n    addFilterToURL(requestDetails) {\n        const currentURLfilters = this.route.snapshot.queryParams;\n        const queryParams = {};\n        if (requestDetails.section === 'events') {\n            const { startDate, endDate } = this.setDateForFilter(this.eventsFilterDateRange.value);\n            if (startDate)\n                queryParams.eventsStartDate = startDate;\n            if (endDate)\n                queryParams.eventsEndDate = endDate;\n            if (this.eventApp)\n                queryParams.eventsApp = this.eventApp;\n        }\n        if (requestDetails.section === 'eventDels') {\n            const { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n            if (startDate)\n                queryParams.eventDelsStartDate = startDate;\n            if (endDate)\n                queryParams.eventDelsEndDate = endDate;\n            if (this.eventDeliveriesApp)\n                queryParams.eventDelsApp = this.eventDeliveriesApp;\n            queryParams.eventDelsStatus = this.eventDeliveryFilteredByStatus || '';\n        }\n        if (requestDetails.section === 'group')\n            queryParams.group = this.activeGroup;\n        if (requestDetails.section === 'logTab')\n            queryParams.activeTab = this.activeTab;\n        this.router.navigate([], {\n            queryParams: Object.assign({}, currentURLfilters, queryParams)\n        });\n    }\n    eventDeliveriesRequest(requestDetails) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n            try {\n                const eventDeliveriesResponse = yield this.convyAppService.request({\n                    url: this.getAPIURL(`/eventdeliveries?groupID=${this.activeGroup || ''}&eventId=${requestDetails.eventId || ''}&page=${this.eventDeliveriesPage || 1}&startDate=${startDate}&endDate=${endDate}&appId=${this.eventDeliveriesApp}&status=${this.eventDeliveryFilteredByStatus || ''}`),\n                    method: 'get'\n                });\n                return eventDeliveriesResponse;\n            }\n            catch (error) {\n                return error;\n            }\n        });\n    }\n    getEventDeliveries(requestDetails) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (requestDetails === null || requestDetails === void 0 ? void 0 : requestDetails.addToURL)\n                this.addFilterToURL({ section: 'eventDels' });\n            const { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n            try {\n                const eventDeliveriesResponse = yield this.eventDeliveriesRequest({\n                    eventId: this.eventDeliveryFilteredByEventId,\n                    startDate,\n                    endDate\n                });\n                if (this.activeTab === 'event deliveries')\n                    this.detailsItem = eventDeliveriesResponse.data.content[0];\n                if (this.eventDeliveries && ((_b = (_a = this.eventDeliveries) === null || _a === void 0 ? void 0 : _a.pagination) === null || _b === void 0 ? void 0 : _b.next) === this.eventDeliveriesPage) {\n                    const content = [...this.eventDeliveries.content, ...eventDeliveriesResponse.data.content];\n                    const pagination = eventDeliveriesResponse.data.pagination;\n                    this.eventDeliveries = { content, pagination };\n                    this.displayedEventDeliveries = this.setEventsDisplayed(content);\n                    return;\n                }\n                this.eventDeliveries = eventDeliveriesResponse.data;\n                this.displayedEventDeliveries = this.setEventsDisplayed(eventDeliveriesResponse.data.content);\n                return eventDeliveriesResponse.data.content;\n            }\n            catch (error) {\n                return error;\n            }\n        });\n    }\n    getEventDeliveriesForSidebar(eventId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.eventDeliveriesRequest({\n                eventId,\n                startDate: '',\n                endDate: ''\n            });\n            this.sidebarEventDeliveries = response.data.content;\n        });\n    }\n    toggleActiveGroup() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all([this.clearEventFilters('event deliveries'), this.clearEventFilters('events')]);\n            this.addFilterToURL({ section: 'group' });\n            Promise.all([this.getConfigDetails(), this.fetchDashboardData(), this.getEvents(), this.getApps(), this.getEventDeliveries()]);\n        });\n    }\n    getGroups(requestDetails) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (requestDetails === null || requestDetails === void 0 ? void 0 : requestDetails.addToURL)\n                this.addFilterToURL({ section: 'group' });\n            try {\n                const groupsResponse = yield this.convyAppService.request({\n                    url: this.getAPIURL(`/groups`),\n                    method: 'get'\n                });\n                this.groups = groupsResponse.data;\n                // check group existing filter in url and set active group\n                this.activeGroup = (_a = this.route.snapshot.queryParams.group) !== null && _a !== void 0 ? _a : (_b = this.groups[0]) === null || _b === void 0 ? void 0 : _b.uid;\n                return;\n            }\n            catch (error) {\n                return error;\n            }\n        });\n    }\n    getApps() {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const appsResponse = yield this.convyAppService.request({\n                    url: this.getAPIURL(`/apps?groupID=${this.activeGroup || ''}&sort=AESC&page=${this.appsPage || 1}&perPage=10`),\n                    method: 'get'\n                });\n                if (((_b = (_a = this.apps) === null || _a === void 0 ? void 0 : _a.pagination) === null || _b === void 0 ? void 0 : _b.next) === this.appsPage) {\n                    const content = [...this.apps.content, ...appsResponse.data.content];\n                    const pagination = appsResponse.data.pagination;\n                    this.apps = { content, pagination };\n                    return;\n                }\n                this.apps = appsResponse.data;\n                if (this.activeTab === 'apps')\n                    this.detailsItem = (_c = this.apps) === null || _c === void 0 ? void 0 : _c.content[0];\n                return;\n            }\n            catch (error) {\n                return error;\n            }\n        });\n    }\n    getDelieveryAttempts(eventDeliveryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const deliveryAttemptsResponse = yield this.convyAppService.request({\n                    url: this.getAPIURL(`/eventdeliveries/${eventDeliveryId}/deliveryattempts?groupID=${this.activeGroup || ''}`),\n                    method: 'get'\n                });\n                this.eventDeliveryAtempt = deliveryAttemptsResponse.data[deliveryAttemptsResponse.data.length - 1];\n                return;\n            }\n            catch (error) {\n                return error;\n            }\n        });\n    }\n    getCodeSnippetString(type) {\n        var _a, _b, _c;\n        if (type === 'event') {\n            if (!((_a = this.detailsItem) === null || _a === void 0 ? void 0 : _a.data))\n                return 'No event data was sent';\n            return JSON.stringify(this.detailsItem.data || this.detailsItem.metadata.data, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n        }\n        else if (type === 'event_delivery') {\n            if (!((_c = (_b = this.detailsItem) === null || _b === void 0 ? void 0 : _b.metadata) === null || _c === void 0 ? void 0 : _c.data))\n                return 'No event data was sent';\n            return JSON.stringify(this.detailsItem.metadata.data, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n        }\n        else if (type === 'res_body') {\n            if (!this.eventDeliveryAtempt)\n                return 'No response body was sent';\n            return this.eventDeliveryAtempt.response_data;\n        }\n        else if (type === 'res_head') {\n            if (!this.eventDeliveryAtempt)\n                return 'No response header was sent';\n            return JSON.stringify(this.eventDeliveryAtempt.response_http_header, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n        }\n        else if (type === 'req') {\n            if (!this.eventDeliveryAtempt)\n                return 'No request header was sent';\n            return JSON.stringify(this.eventDeliveryAtempt.request_http_header, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n        }\n        return '';\n    }\n    retryEvent(requestDetails) {\n        return __awaiter(this, void 0, void 0, function* () {\n            requestDetails.e.stopPropagation();\n            const retryButton = document.querySelector(`#event${requestDetails.index} button`);\n            if (retryButton) {\n                retryButton.classList.add(['spin', 'disabled']);\n                retryButton.disabled = true;\n            }\n            try {\n                yield this.convyAppService.request({\n                    method: 'put',\n                    url: this.getAPIURL(`/eventdeliveries/${requestDetails.eventDeliveryId}/resend?groupID=${this.activeGroup || ''}`)\n                });\n                this.convyAppService.showNotification({\n                    message: 'Retry Request Sent'\n                });\n                retryButton.classList.remove(['spin', 'disabled']);\n                retryButton.disabled = false;\n                this.getEventDeliveries();\n            }\n            catch (error) {\n                this.convyAppService.showNotification({\n                    message: error.error.message\n                });\n                retryButton.classList.remove(['spin', 'disabled']);\n                retryButton.disabled = false;\n                return error;\n            }\n        });\n    }\n    batchRetryEvent() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this.convyAppService.request({\n                    method: 'post',\n                    url: this.getAPIURL(`/eventdeliveries/batchretry?groupID=${this.activeGroup || ''}`),\n                    body: { ids: this.selectedEventsFromEventDeliveriesTable }\n                });\n                this.convyAppService.showNotification({\n                    message: 'Batch Retry Request Sent'\n                });\n                this.getEventDeliveries();\n                this.selectedEventsFromEventDeliveriesTable = [];\n            }\n            catch (error) {\n                this.convyAppService.showNotification({\n                    message: error.error.message\n                });\n                return error;\n            }\n        });\n    }\n    clearEventFilters(tableName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const activeFilters = Object.assign({}, this.route.snapshot.queryParams);\n            let filterItems = [];\n            switch (tableName) {\n                case 'events':\n                    this.eventApp = '';\n                    filterItems = ['eventsStartDate', 'eventsEndDate', 'eventsApp'];\n                    this.eventsFilterDateRange.patchValue({\n                        startDate: '',\n                        endDate: ''\n                    });\n                    this.getEvents();\n                    break;\n                case 'event deliveries':\n                    this.eventDeliveriesApp = '';\n                    filterItems = ['eventDelsStartDate', 'eventDelsEndDate', 'eventDelsApp', 'eventDelsStatus'];\n                    this.eventDeliveriesFilterDateRange.patchValue({\n                        startDate: '',\n                        endDate: ''\n                    });\n                    this.eventDeliveryFilteredByEventId = '';\n                    this.eventDeliveryFilteredByStatus = '';\n                    this.getEventDeliveries();\n                    break;\n                default:\n                    break;\n            }\n            filterItems.forEach(key => (activeFilters.hasOwnProperty(key) ? delete activeFilters[key] : null));\n            yield this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: activeFilters\n            });\n        });\n    }\n    checkAllCheckboxes(event) {\n        const checkboxes = document.querySelectorAll('#event-deliveries-table tbody input[type=\"checkbox\"]');\n        checkboxes.forEach((checkbox) => {\n            this.selectedEventsFromEventDeliveriesTable.push(checkbox.value);\n            checkbox.checked = event.target.checked;\n        });\n        if (!event.target.checked)\n            this.selectedEventsFromEventDeliveriesTable = [];\n        this.allEventdeliveriesChecked = event.target.checked;\n    }\n    checkEventDeliveryBox(event) {\n        const checkbox = event.target;\n        if (checkbox.checked) {\n            this.selectedEventsFromEventDeliveriesTable.push(checkbox.value);\n        }\n        else {\n            this.selectedEventsFromEventDeliveriesTable = this.selectedEventsFromEventDeliveriesTable.filter(eventId => eventId !== checkbox.value);\n        }\n        this.allEventdeliveriesChecked = false;\n        const parentCheckbox = document.querySelector('#eventDeliveryTable');\n        parentCheckbox.checked = false;\n    }\n    loadMoreEventDeliveries() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.eventDeliveriesPage = this.eventDeliveriesPage + 1;\n            yield this.getEventDeliveries();\n            setTimeout(() => {\n                if (this.allEventdeliveriesChecked) {\n                    this.checkAllCheckboxes({ target: { checked: true } });\n                }\n            }, 200);\n        });\n    }\n    openDeliveriesTab() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getEventDeliveries();\n            this.toggleActiveTab('event deliveries');\n        });\n    }\n    refreshTables() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.initDashboard();\n            this.toggleActiveTab('event deliveries');\n        });\n    }\n    getAPIURL(url) {\n        return `${this.isProduction ? location.origin : 'http://localhost:5005'}/ui${url}`;\n    }\n}\nConvoyAppComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppComponent, deps: [{ token: ConvoyAppService }, { token: i2.Router }, { token: i3.FormBuilder }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nConvoyAppComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: ConvoyAppComponent, selector: \"convoy-app\", inputs: { isProduction: [\"production\", \"isProduction\"] }, ngImport: i0, template: \"<div class=\\\"app-page\\\">\\n\\t<div class=\\\"app-page--head\\\">\\n\\t\\t<h3>Endpoint and Events</h3>\\n\\t\\t<button class=\\\"primary\\\">Create Endpoint</button>\\n\\t</div>\\n\\n\\t<div class=\\\"app-page--details\\\">\\n\\t\\t<div class=\\\"card app-page--endpoints\\\">\\n\\t\\t\\t<table>\\n\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Endpoint URL</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Type</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Error Rate</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Status</th>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</tbody>\\n\\t\\t\\t</table>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"card has-title app-page--metrics\\\">\\n\\t\\t\\t<div class=\\\"card--title\\\">\\n\\t\\t\\t\\t<h2>Metrics on events sent by endpoint</h2>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<ul class=\\\"card--container metrics\\\">\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<section class=\\\"card dashboard--logs\\\">\\n\\t\\t<div class=\\\"dashboard--logs--tabs\\\">\\n\\t\\t\\t<div class=\\\"dashboard--logs--tabs--head tabs\\\">\\n\\t\\t\\t\\t<div class=\\\"tabs\\\">\\n\\t\\t\\t\\t\\t<button *ngFor=\\\"let tab of tabs\\\" (click)=\\\"toggleActiveTab(tab)\\\" class=\\\"clear tab\\\" [ngClass]=\\\"{ active: activeTab === tab }\\\">\\n\\t\\t\\t\\t\\t\\t{{ tab }}\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<div class=\\\"table\\\">\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'events'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"filter\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button date-filter-button\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"eventsFilterPicker.open()\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tactive: eventsFilterDateRange.value.startDate !== '' && eventsFilterDateRange.value.endDate !== ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showEventFilterCalendar = !showEventFilterCalendar\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/calendar-icon.svg\\\" alt=\\\"calender icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-input [formGroup]=\\\"eventsFilterDateRange\\\" [rangePicker]=\\\"eventsFilterPicker\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matStartDate formControlName=\\\"startDate\\\" placeholder=\\\"Start date\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matEndDate formControlName=\\\"endDate\\\" placeholder=\\\"End date\\\" (dateChange)=\\\"getEvents({ addToURL: true })\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</mat-date-range-input>\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-picker #eventsFilterPicker [disabled]=\\\"false\\\"></mat-date-range-picker>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t</button>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"select\\\">\\n\\t\\t\\t\\t\\t\\t\\t<select [ngClass]=\\\"{ active: !!eventApp }\\\" aria-label=\\\"frequency\\\" [(ngModel)]=\\\"eventApp\\\" (change)=\\\"getEvents({ addToURL: true })\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\\\">All Apps</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t<option [value]=\\\"app.uid\\\" *ngFor=\\\"let app of apps?.content\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ app.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button primary events-filter-clear-btn\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"clearEventFilters(activeTab)\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"(eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tdisabled: (eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\tClear Filter\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<hr />\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--container smaller-table\\\" *ngIf=\\\"displayedEvents.length > 0\\\">\\n\\t\\t\\t\\t\\t\\t<table id=\\\"events-table\\\">\\n\\t\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Event Type</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">App Name</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created At</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-container *ngFor=\\\"let eventGroup of displayedEvents; let i = index\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--date-row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ eventGroup.date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let event of eventGroup.events; let index = index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: event.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"'event' + index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = event; getEventDeliveriesForSidebar(event.uid)\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tag\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.event_type }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td class=\\\"has-long-text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.app_metadata.title }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.created_at | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-right\\\" (click)=\\\"eventDeliveryFilteredByEventId = event.uid; openDeliveriesTab()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDeliveries\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/angle-arrow-right-primary.svg\\\" alt=\\\"arrow right\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container center\\\" *ngIf=\\\"events.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button [class]=\\\"'primary clear has-icon icon-left '\\\" [disabled]=\\\"events.pagination.page === events.pagination.totalPage\\\" (click)=\\\"eventsPage = eventsPage + 1; getEvents()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"empty-state table--container\\\" *ngIf=\\\"displayedEvents.length === 0\\\">\\n\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t\\t<p>No event to show here</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"filter\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button date-filter-button\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"eventDeliveriesFilterPicker.open()\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tactive: eventDeliveriesFilterDateRange.value.startDate !== '' && eventDeliveriesFilterDateRange.value.endDate !== ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showEventFilterCalendar = !showEventFilterCalendar\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/calendar-icon.svg\\\" alt=\\\"calender icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-input [formGroup]=\\\"eventDeliveriesFilterDateRange\\\" [rangePicker]=\\\"eventDeliveriesFilterPicker\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matStartDate formControlName=\\\"startDate\\\" placeholder=\\\"Start date\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matEndDate formControlName=\\\"endDate\\\" placeholder=\\\"End date\\\" (dateChange)=\\\"getEventDeliveries({ addToURL: true })\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</mat-date-range-input>\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-picker #eventDeliveriesFilterPicker [disabled]=\\\"false\\\"></mat-date-range-picker>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button dropdown--button\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: eventDeliveryFilteredByStatus\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showOverlay = true; showEventDeliveriesStatusDropdown = !showEventDeliveriesStatusDropdown\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/status-filter-icon.svg\\\" alt=\\\"status filter icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>{{ eventDeliveryFilteredByStatus || 'Status' }}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown--list\\\" *ngIf=\\\"showEventDeliveriesStatusDropdown\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown--list--item\\\" *ngFor=\\\"let status of eventDeliveryStatuses\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttype=\\\"radio\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tname=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[value]=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[(ngModel)]=\\\"eventDeliveryFilteredByStatus\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(change)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tshowOverlay = false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tshowEventDeliveriesStatusDropdown = false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgetEventDeliveries({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taddToURL: true\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label [for]=\\\"status\\\">{{ status || 'None' }}</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"select\\\">\\n\\t\\t\\t\\t\\t\\t\\t<select [ngClass]=\\\"{ active: !!eventDeliveriesApp }\\\" aria-label=\\\"frequency\\\" [(ngModel)]=\\\"eventDeliveriesApp\\\" (change)=\\\"getEventDeliveries({ addToURL: true })\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\\\">All Apps</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t<option [value]=\\\"app.uid\\\" *ngFor=\\\"let app of apps?.content\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ app.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"filter--button event-button active\\\" *ngIf=\\\"eventDeliveryFilteredByEventId !== ''\\\">\\n\\t\\t\\t\\t\\t\\t\\tEvent Filtered\\n\\t\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon\\\" (click)=\\\"eventDeliveryFilteredByEventId = ''; getEventDeliveries()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/close-icon.svg\\\" alt=\\\"close icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button primary events-filter-clear-btn\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"clearEventFilters(activeTab)\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(eventDeliveriesFilterDateRange.value.startDate == '' || eventDeliveriesFilterDateRange.value.endDate == '') &&\\n\\t\\t\\t\\t\\t\\t\\t\\teventDeliveriesApp == '' &&\\n\\t\\t\\t\\t\\t\\t\\t\\teventDeliveryFilteredByEventId == '' &&\\n\\t\\t\\t\\t\\t\\t\\t\\t!eventDeliveryFilteredByStatus\\n\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\tClear Filter\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<hr />\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--actions button-container left\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-left hover\\\" (click)=\\\"refreshTables()\\\">\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/refresh-icon-2.svg\\\" alt=\\\"refresh icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tRefresh\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-left hover\\\" (click)=\\\"batchRetryEvent()\\\" [disabled]=\\\"selectedEventsFromEventDeliveriesTable.length <= 0\\\">\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/retry-icon.svg\\\" alt=\\\"retry icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tBulk Retry\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--container\\\" *ngIf=\\\"displayedEventDeliveries.length > 0\\\">\\n\\t\\t\\t\\t\\t\\t<table id=\\\"event-deliveries-table\\\">\\n\\t\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\" class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"checkbox\\\" name=\\\"eventDeliveryTable\\\" id=\\\"eventDeliveryTable\\\" (change)=\\\"checkAllCheckboxes($event)\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tStatus\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Event Type</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Attempts</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created At</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-container *ngFor=\\\"let eventDeliveriesGroup of displayedEventDeliveries; let i = index\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--date-row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveriesGroup.date }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let event of eventDeliveriesGroup.events; let index = index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: event.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"'event' + index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = event; getDelieveryAttempts(event.uid)\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"checkbox has-retry\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img *ngIf=\\\"event.metadata.num_trials > event.metadata.retry_limit\\\" src=\\\"/assets/img/retry-icon.svg\\\" alt=\\\"retry icon\\\" title=\\\"manually retried\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"checkbox\\\" [name]=\\\"'event' + index\\\" id=\\\"event\\\" [value]=\\\"event.uid\\\" (change)=\\\"checkEventDeliveryBox($event)\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div [class]=\\\"'tag tag--' + event.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.status }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.event_metadata.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.metadata?.num_trials }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.created_at | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"event.status === 'Success' || event.status === 'Scheduled'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary has-icon icon-left ' + (event.status === 'Success' || event.status === 'Scheduled' ? 'disabled' : '')\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tretryEvent({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\te: $event,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tindex: this.index,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\teventDeliveryId: event.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/refresh-icon.svg\\\" alt=\\\"refresh icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tRetry\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container center\\\" *ngIf=\\\"eventDeliveries.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button [class]=\\\"'primary clear has-icon icon-left'\\\" [disabled]=\\\"eventDeliveries.pagination.page === eventDeliveries.pagination.totalPage\\\" (click)=\\\"loadMoreEventDeliveries()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"empty-state table--container\\\" *ngIf=\\\"displayedEventDeliveries.length === 0\\\">\\n\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t\\t<p>No event to show here</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<div class=\\\"table--container smaller-table\\\" *ngIf=\\\"apps && apps.content.length > 0 && activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<table>\\n\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Name</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Updated</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Events</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Endpoints</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let app of apps?.content\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: app.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = app\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td class=\\\"has-long-text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.name }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.created_at | date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.updated_at | date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.events }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.endpoints.length }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"app.events <= 0\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle=\\\"view events\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary has-icon icon-left'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttoggleActiveTab('events');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgetEvents({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taddToURL: true,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tappId: app.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/view-events-icon.svg\\\" alt=\\\"view events icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tEvents\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container margin-top center\\\" *ngIf=\\\"apps?.pagination && apps.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary clear has-icon icon-left ' + (apps.pagination.page === apps.pagination.totalPage ? 'disabled' : '')\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"apps.pagination.page === apps.pagination.totalPage\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<div class=\\\"empty-state\\\" *ngIf=\\\"apps?.content?.length === 0 && activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t<p>No app to show here</p>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"dashboard--logs--details\\\">\\n\\t\\t\\t<ng-container *ngIf=\\\"detailsItem\\\">\\n\\t\\t\\t\\t<h3>Details</h3>\\n\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--meta\\\" *ngIf=\\\"activeTab === 'apps' || activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">IP Address</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.ip_address || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">HTTP Status</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.http_status || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">API Version</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.api_version || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Endpoint</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\" [title]=\\\"detailsItem.endpoint?.target_url\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.endpoint?.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\" *ngIf=\\\"detailsItem.metadata?.num_trials < detailsItem.metadata?.retry_limit && detailsItem.status !== 'Success'\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Next Retry</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.metadata?.next_send_time | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">App Name</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.app_metadata?.title }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\" *ngIf=\\\"activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Support Email</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item\\\">\\n\\t\\t\\t\\t\\t\\t\\t{{ detailsItem?.support_email || '-' }}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t</ul>\\n\\n\\t\\t\\t\\t<ul class=\\\"tabs\\\" *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<li *ngFor=\\\"let tab of eventDetailsTabs\\\" [class]=\\\"'tab ' + (eventDetailsActiveTab === tab.id ? 'active' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary outline\\\" (click)=\\\"eventDetailsActiveTab = tab.id\\\">\\n\\t\\t\\t\\t\\t\\t\\t{{ tab.label }}\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t</ul>\\n\\n\\t\\t\\t\\t<div class=\\\"dashboard--logs--details--req-res\\\" *ngIf=\\\"activeTab === 'events' || activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'data' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Event</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString(activeTab === 'events' ? 'event' : 'event_delivery')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'response' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Header</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('res_head')\\\"></prism>\\n\\n\\t\\t\\t\\t\\t\\t<h3>Body</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('res_body')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'request' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Header</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('req')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'events'\\\">\\n\\t\\t\\t\\t\\t<h4>Deliveries Overview</h4>\\n\\t\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--endpoints inline\\\">\\n\\t\\t\\t\\t\\t\\t<li *ngFor=\\\"let delivery of sidebarEventDeliveries\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div [class]=\\\"'tag tag--' + delivery.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ delivery.status }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"url\\\" [title]=\\\"delivery.endpoint.target_url\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ delivery.endpoint.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<h4>App Event Endpoints</h4>\\n\\t\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--endpoints\\\">\\n\\t\\t\\t\\t\\t\\t<ng-container *ngIf=\\\"detailsItem?.endpoints\\\">\\n\\t\\t\\t\\t\\t\\t\\t<li *ngFor=\\\"let endpoint of detailsItem.endpoints\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<h5>{{ endpoint.description }}</h5>\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/link-icon.svg\\\" alt=\\\"link icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ endpoint.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"events\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tag\\\" *ngFor=\\\"let event of endpoint.events\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event == '*' ? 'all events' : event }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t</ng-container>\\n\\t\\t</div>\\n\\t</section>\\n</div>\\n\\n<div class=\\\"overlay\\\" *ngIf=\\\"showOverlay\\\" (click)=\\\"showOverlay = false; showEventDeliveriesStatusDropdown = false\\\"></div>\\n\", styles: [\"\"], components: [{ type: i4.MatDateRangeInput, selector: \"mat-date-range-input\", inputs: [\"rangePicker\", \"required\", \"dateFilter\", \"min\", \"max\", \"disabled\", \"separator\", \"comparisonStart\", \"comparisonEnd\"], exportAs: [\"matDateRangeInput\"] }, { type: i4.MatDateRangePicker, selector: \"mat-date-range-picker\", exportAs: [\"matDateRangePicker\"] }, { type: PrismComponent, selector: \"prism\", inputs: [\"code\", \"language\"] }], directives: [{ type: i6.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i6.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i6.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.MatStartDate, selector: \"input[matStartDate]\", inputs: [\"errorStateMatcher\"], outputs: [\"dateChange\", \"dateInput\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i4.MatEndDate, selector: \"input[matEndDate]\", inputs: [\"errorStateMatcher\"], outputs: [\"dateChange\", \"dateInput\"] }, { type: i3.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i3.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i3.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i3.RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: [\"name\", \"formControlName\", \"value\"] }], pipes: { \"date\": i6.DatePipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'convoy-app', template: \"<div class=\\\"app-page\\\">\\n\\t<div class=\\\"app-page--head\\\">\\n\\t\\t<h3>Endpoint and Events</h3>\\n\\t\\t<button class=\\\"primary\\\">Create Endpoint</button>\\n\\t</div>\\n\\n\\t<div class=\\\"app-page--details\\\">\\n\\t\\t<div class=\\\"card app-page--endpoints\\\">\\n\\t\\t\\t<table>\\n\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Endpoint URL</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Type</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Error Rate</th>\\n\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Status</th>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t<tr class=\\\"has-border\\\">\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>URL goes here and will be truncated...</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Type goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div>Percentage goes here</div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t<div><div class=\\\"tag\\\">Active</div></div>\\n\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</tbody>\\n\\t\\t\\t</table>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"card has-title app-page--metrics\\\">\\n\\t\\t\\t<div class=\\\"card--title\\\">\\n\\t\\t\\t\\t<h2>Metrics on events sent by endpoint</h2>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<ul class=\\\"card--container metrics\\\">\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<div>5k</div>\\n\\t\\t\\t\\t\\t<p>Primary App</p>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<section class=\\\"card dashboard--logs\\\">\\n\\t\\t<div class=\\\"dashboard--logs--tabs\\\">\\n\\t\\t\\t<div class=\\\"dashboard--logs--tabs--head tabs\\\">\\n\\t\\t\\t\\t<div class=\\\"tabs\\\">\\n\\t\\t\\t\\t\\t<button *ngFor=\\\"let tab of tabs\\\" (click)=\\\"toggleActiveTab(tab)\\\" class=\\\"clear tab\\\" [ngClass]=\\\"{ active: activeTab === tab }\\\">\\n\\t\\t\\t\\t\\t\\t{{ tab }}\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<div class=\\\"table\\\">\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'events'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"filter\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button date-filter-button\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"eventsFilterPicker.open()\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tactive: eventsFilterDateRange.value.startDate !== '' && eventsFilterDateRange.value.endDate !== ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showEventFilterCalendar = !showEventFilterCalendar\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/calendar-icon.svg\\\" alt=\\\"calender icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-input [formGroup]=\\\"eventsFilterDateRange\\\" [rangePicker]=\\\"eventsFilterPicker\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matStartDate formControlName=\\\"startDate\\\" placeholder=\\\"Start date\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matEndDate formControlName=\\\"endDate\\\" placeholder=\\\"End date\\\" (dateChange)=\\\"getEvents({ addToURL: true })\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</mat-date-range-input>\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-picker #eventsFilterPicker [disabled]=\\\"false\\\"></mat-date-range-picker>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t</button>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"select\\\">\\n\\t\\t\\t\\t\\t\\t\\t<select [ngClass]=\\\"{ active: !!eventApp }\\\" aria-label=\\\"frequency\\\" [(ngModel)]=\\\"eventApp\\\" (change)=\\\"getEvents({ addToURL: true })\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\\\">All Apps</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t<option [value]=\\\"app.uid\\\" *ngFor=\\\"let app of apps?.content\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ app.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button primary events-filter-clear-btn\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"clearEventFilters(activeTab)\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"(eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tdisabled: (eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\tClear Filter\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<hr />\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--container smaller-table\\\" *ngIf=\\\"displayedEvents.length > 0\\\">\\n\\t\\t\\t\\t\\t\\t<table id=\\\"events-table\\\">\\n\\t\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Event Type</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">App Name</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created At</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-container *ngFor=\\\"let eventGroup of displayedEvents; let i = index\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--date-row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ eventGroup.date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let event of eventGroup.events; let index = index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: event.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"'event' + index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = event; getEventDeliveriesForSidebar(event.uid)\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tag\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.event_type }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td class=\\\"has-long-text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.app_metadata.title }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.created_at | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-right\\\" (click)=\\\"eventDeliveryFilteredByEventId = event.uid; openDeliveriesTab()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDeliveries\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/angle-arrow-right-primary.svg\\\" alt=\\\"arrow right\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container center\\\" *ngIf=\\\"events.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button [class]=\\\"'primary clear has-icon icon-left '\\\" [disabled]=\\\"events.pagination.page === events.pagination.totalPage\\\" (click)=\\\"eventsPage = eventsPage + 1; getEvents()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"empty-state table--container\\\" *ngIf=\\\"displayedEvents.length === 0\\\">\\n\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t\\t<p>No event to show here</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"filter\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button date-filter-button\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"eventDeliveriesFilterPicker.open()\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\tactive: eventDeliveriesFilterDateRange.value.startDate !== '' && eventDeliveriesFilterDateRange.value.endDate !== ''\\n\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showEventFilterCalendar = !showEventFilterCalendar\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/calendar-icon.svg\\\" alt=\\\"calender icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-input [formGroup]=\\\"eventDeliveriesFilterDateRange\\\" [rangePicker]=\\\"eventDeliveriesFilterPicker\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matStartDate formControlName=\\\"startDate\\\" placeholder=\\\"Start date\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matEndDate formControlName=\\\"endDate\\\" placeholder=\\\"End date\\\" (dateChange)=\\\"getEventDeliveries({ addToURL: true })\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</mat-date-range-input>\\n\\t\\t\\t\\t\\t\\t\\t<mat-date-range-picker #eventDeliveriesFilterPicker [disabled]=\\\"false\\\"></mat-date-range-picker>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button dropdown--button\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: eventDeliveryFilteredByStatus\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"showOverlay = true; showEventDeliveriesStatusDropdown = !showEventDeliveriesStatusDropdown\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/status-filter-icon.svg\\\" alt=\\\"status filter icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>{{ eventDeliveryFilteredByStatus || 'Status' }}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/angle-arrow-down.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown--list\\\" *ngIf=\\\"showEventDeliveriesStatusDropdown\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"dropdown--list--item\\\" *ngFor=\\\"let status of eventDeliveryStatuses\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttype=\\\"radio\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tname=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[value]=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[(ngModel)]=\\\"eventDeliveryFilteredByStatus\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"status\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(change)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tshowOverlay = false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tshowEventDeliveriesStatusDropdown = false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgetEventDeliveries({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taddToURL: true\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label [for]=\\\"status\\\">{{ status || 'None' }}</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"select\\\">\\n\\t\\t\\t\\t\\t\\t\\t<select [ngClass]=\\\"{ active: !!eventDeliveriesApp }\\\" aria-label=\\\"frequency\\\" [(ngModel)]=\\\"eventDeliveriesApp\\\" (change)=\\\"getEventDeliveries({ addToURL: true })\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\\\">All Apps</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t<option [value]=\\\"app.uid\\\" *ngFor=\\\"let app of apps?.content\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ app.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"filter--button event-button active\\\" *ngIf=\\\"eventDeliveryFilteredByEventId !== ''\\\">\\n\\t\\t\\t\\t\\t\\t\\tEvent Filtered\\n\\t\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon\\\" (click)=\\\"eventDeliveryFilteredByEventId = ''; getEventDeliveries()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/close-icon.svg\\\" alt=\\\"close icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"filter--button primary events-filter-clear-btn\\\"\\n\\t\\t\\t\\t\\t\\t\\t(click)=\\\"clearEventFilters(activeTab)\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(eventDeliveriesFilterDateRange.value.startDate == '' || eventDeliveriesFilterDateRange.value.endDate == '') &&\\n\\t\\t\\t\\t\\t\\t\\t\\teventDeliveriesApp == '' &&\\n\\t\\t\\t\\t\\t\\t\\t\\teventDeliveryFilteredByEventId == '' &&\\n\\t\\t\\t\\t\\t\\t\\t\\t!eventDeliveryFilteredByStatus\\n\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\tClear Filter\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<hr />\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--actions button-container left\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-left hover\\\" (click)=\\\"refreshTables()\\\">\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/refresh-icon-2.svg\\\" alt=\\\"refresh icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tRefresh\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary clear has-icon icon-left hover\\\" (click)=\\\"batchRetryEvent()\\\" [disabled]=\\\"selectedEventsFromEventDeliveriesTable.length <= 0\\\">\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"../../../../assets/img/retry-icon.svg\\\" alt=\\\"retry icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tBulk Retry\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--container\\\" *ngIf=\\\"displayedEventDeliveries.length > 0\\\">\\n\\t\\t\\t\\t\\t\\t<table id=\\\"event-deliveries-table\\\">\\n\\t\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\" class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"checkbox\\\" name=\\\"eventDeliveryTable\\\" id=\\\"eventDeliveryTable\\\" (change)=\\\"checkAllCheckboxes($event)\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tStatus\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Event Type</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Attempts</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created At</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-container *ngFor=\\\"let eventDeliveriesGroup of displayedEventDeliveries; let i = index\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--date-row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveriesGroup.date }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let event of eventDeliveriesGroup.events; let index = index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: event.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[id]=\\\"'event' + index\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = event; getDelieveryAttempts(event.uid)\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"checkbox has-retry\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img *ngIf=\\\"event.metadata.num_trials > event.metadata.retry_limit\\\" src=\\\"/assets/img/retry-icon.svg\\\" alt=\\\"retry icon\\\" title=\\\"manually retried\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"checkbox\\\" [name]=\\\"'event' + index\\\" id=\\\"event\\\" [value]=\\\"event.uid\\\" (change)=\\\"checkEventDeliveryBox($event)\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div [class]=\\\"'tag tag--' + event.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.status }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.event_metadata.name }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.metadata?.num_trials }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event.created_at | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"event.status === 'Success' || event.status === 'Scheduled'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary has-icon icon-left ' + (event.status === 'Success' || event.status === 'Scheduled' ? 'disabled' : '')\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tretryEvent({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\te: $event,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tindex: this.index,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\teventDeliveryId: event.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/refresh-icon.svg\\\" alt=\\\"refresh icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tRetry\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container center\\\" *ngIf=\\\"eventDeliveries.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button [class]=\\\"'primary clear has-icon icon-left'\\\" [disabled]=\\\"eventDeliveries.pagination.page === eventDeliveries.pagination.totalPage\\\" (click)=\\\"loadMoreEventDeliveries()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"empty-state table--container\\\" *ngIf=\\\"displayedEventDeliveries.length === 0\\\">\\n\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t\\t<p>No event to show here</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<div class=\\\"table--container smaller-table\\\" *ngIf=\\\"apps && apps.content.length > 0 && activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<table>\\n\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t<tr class=\\\"table--head\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Name</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Created</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Updated</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Events</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\">Endpoints</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t<th scope=\\\"col\\\"></th>\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t<tr\\n\\t\\t\\t\\t\\t\\t\\t\\t*ngFor=\\\"let app of apps?.content\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tactive: app.uid === detailsItem?.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"detailsItem = app\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td class=\\\"has-long-text\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.name }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.created_at | date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.updated_at | date }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.events }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>{{ app.endpoints.length }}</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"app.events <= 0\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle=\\\"view events\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary has-icon icon-left'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttoggleActiveTab('events');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgetEvents({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taddToURL: true,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tappId: app.uid\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/view-events-icon.svg\\\" alt=\\\"view events icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tEvents\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t</table>\\n\\n\\t\\t\\t\\t\\t<div class=\\\"table--load-more button-container margin-top center\\\" *ngIf=\\\"apps?.pagination && apps.pagination.totalPage > 1\\\">\\n\\t\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\t\\t[class]=\\\"'primary clear has-icon icon-left ' + (apps.pagination.page === apps.pagination.totalPage ? 'disabled' : '')\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"apps.pagination.page === apps.pagination.totalPage\\\"\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/arrow-down-icon.svg\\\" alt=\\\"arrow down icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\tLoad more\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<div class=\\\"empty-state\\\" *ngIf=\\\"apps?.content?.length === 0 && activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<img src=\\\"/assets/img/empty-state-img.svg\\\" alt=\\\"empty state\\\" />\\n\\t\\t\\t\\t\\t<p>No app to show here</p>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"dashboard--logs--details\\\">\\n\\t\\t\\t<ng-container *ngIf=\\\"detailsItem\\\">\\n\\t\\t\\t\\t<h3>Details</h3>\\n\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--meta\\\" *ngIf=\\\"activeTab === 'apps' || activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">IP Address</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.ip_address || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">HTTP Status</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.http_status || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">API Version</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ eventDeliveryAtempt?.api_version || '-' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Endpoint</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\" [title]=\\\"detailsItem.endpoint?.target_url\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.endpoint?.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\" *ngIf=\\\"detailsItem.metadata?.num_trials < detailsItem.metadata?.retry_limit && detailsItem.status !== 'Success'\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Next Retry</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.metadata?.next_send_time | date: 'mediumTime' }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">App Name</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item color\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ detailsItem.app_metadata?.title }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t<li class=\\\"list-item-inline\\\" *ngIf=\\\"activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--label\\\">Support Email</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"list-item-inline--item\\\">\\n\\t\\t\\t\\t\\t\\t\\t{{ detailsItem?.support_email || '-' }}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t</ul>\\n\\n\\t\\t\\t\\t<ul class=\\\"tabs\\\" *ngIf=\\\"activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<li *ngFor=\\\"let tab of eventDetailsTabs\\\" [class]=\\\"'tab ' + (eventDetailsActiveTab === tab.id ? 'active' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"primary outline\\\" (click)=\\\"eventDetailsActiveTab = tab.id\\\">\\n\\t\\t\\t\\t\\t\\t\\t{{ tab.label }}\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t</ul>\\n\\n\\t\\t\\t\\t<div class=\\\"dashboard--logs--details--req-res\\\" *ngIf=\\\"activeTab === 'events' || activeTab === 'event deliveries'\\\">\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'data' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Event</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString(activeTab === 'events' ? 'event' : 'event_delivery')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'response' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Header</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('res_head')\\\"></prism>\\n\\n\\t\\t\\t\\t\\t\\t<h3>Body</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('res_body')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div [class]=\\\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'request' ? 'show' : '')\\\">\\n\\t\\t\\t\\t\\t\\t<h3>Header</h3>\\n\\t\\t\\t\\t\\t\\t<prism language=\\\"json\\\" [code]=\\\"getCodeSnippetString('req')\\\"></prism>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'events'\\\">\\n\\t\\t\\t\\t\\t<h4>Deliveries Overview</h4>\\n\\t\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--endpoints inline\\\">\\n\\t\\t\\t\\t\\t\\t<li *ngFor=\\\"let delivery of sidebarEventDeliveries\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div [class]=\\\"'tag tag--' + delivery.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ delivery.status }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"url\\\" [title]=\\\"delivery.endpoint.target_url\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ delivery.endpoint.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</ng-container>\\n\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"activeTab === 'apps'\\\">\\n\\t\\t\\t\\t\\t<h4>App Event Endpoints</h4>\\n\\t\\t\\t\\t\\t<ul class=\\\"dashboard--logs--details--endpoints\\\">\\n\\t\\t\\t\\t\\t\\t<ng-container *ngIf=\\\"detailsItem?.endpoints\\\">\\n\\t\\t\\t\\t\\t\\t\\t<li *ngFor=\\\"let endpoint of detailsItem.endpoints\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<h5>{{ endpoint.description }}</h5>\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"/assets/img/link-icon.svg\\\" alt=\\\"link icon\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ endpoint.target_url }}\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"events\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tag\\\" *ngFor=\\\"let event of endpoint.events\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ event == '*' ? 'all events' : event }}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t</ng-container>\\n\\t\\t</div>\\n\\t</section>\\n</div>\\n\\n<div class=\\\"overlay\\\" *ngIf=\\\"showOverlay\\\" (click)=\\\"showOverlay = false; showEventDeliveriesStatusDropdown = false\\\"></div>\\n\", styles: [\"\"] }]\n        }], ctorParameters: function () { return [{ type: ConvoyAppService }, { type: i2.Router }, { type: i3.FormBuilder }, { type: i2.ActivatedRoute }]; }, propDecorators: { isProduction: [{\n                type: Input,\n                args: ['production']\n            }] } });\n\nclass PrismModule {\n}\nPrismModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPrismModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismModule, declarations: [PrismComponent], imports: [CommonModule], exports: [PrismComponent] });\nPrismModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: PrismModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [PrismComponent],\n                    imports: [CommonModule],\n                    exports: [PrismComponent]\n                }]\n        }] });\n\nclass ConvoyAppModule {\n}\nConvoyAppModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nConvoyAppModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppModule, declarations: [ConvoyAppComponent], imports: [CommonModule,\n        PrismModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDatepickerModule,\n        MatNativeDateModule], exports: [ConvoyAppComponent] });\nConvoyAppModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppModule, imports: [[\n            CommonModule,\n            PrismModule,\n            FormsModule,\n            ReactiveFormsModule,\n            MatDatepickerModule,\n            MatNativeDateModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ConvoyAppModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ConvoyAppComponent],\n                    imports: [\n                        CommonModule,\n                        PrismModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        MatDatepickerModule,\n                        MatNativeDateModule,\n                    ],\n                    exports: [ConvoyAppComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of convoy-app\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ConvoyAppComponent, ConvoyAppModule, ConvoyAppService };\n//# sourceMappingURL=convoy-app.mjs.map\n","map":{"version":3,"file":"convoy-app.mjs","sources":["../../../projects/convoy-app/src/lib/convoy-app.service.ts","../../../projects/convoy-app/src/lib/prism/prism.component.ts","../../../projects/convoy-app/src/lib/prism/prism.component.html","../../../projects/convoy-app/src/lib/convoy-app.component.ts","../../../projects/convoy-app/src/lib/convoy-app.component.html","../../../projects/convoy-app/src/lib/prism/prism.module.ts","../../../projects/convoy-app/src/lib/convoy-app.module.ts","../../../projects/convoy-app/src/public-api.ts","../../../projects/convoy-app/src/convoy-app.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { HTTP_RESPONSE } from './models/http.model';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ConvoyAppService {\n    constructor(private httpClient: HttpClient) {}\n\n    authDetails() {\n        const authDetails = localStorage.getItem('CONVOY_AUTH');\n        if (authDetails) {\n            const { username, password } = JSON.parse(authDetails);\n            return {\n                token: btoa(`${username + ':' + password}`),\n                authState: true,\n            };\n        } else {\n            return { authState: false };\n        }\n    }\n\n    request(requestDetails: {\n        url: string;\n        body?: any;\n        method: 'get' | 'post' | 'delete' | 'put';\n    }): Promise<HTTP_RESPONSE> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const requestHeader = new HttpHeaders({\n                    Authorization: `Basic ${this.authDetails().token}`,\n                });\n                const requestResponse: any = await this.httpClient\n                    .request(requestDetails.method, requestDetails.url, {\n                        headers: requestHeader,\n                        body: requestDetails.body,\n                    })\n                    .toPromise();\n                return resolve(requestResponse);\n            } catch (error) {\n                return reject(error);\n            }\n        });\n    }\n\n    showNotification(details: { message: string }) {\n        if (!details.message) return;\n\n        const notificationElement = document.querySelector('.app-notification');\n        if (notificationElement) {\n            notificationElement.classList.add('show');\n            notificationElement.innerHTML = details.message;\n        }\n\n        setTimeout(() => {\n            notificationElement?.classList.remove('show');\n        }, 3000);\n    }\n}\n","import { AfterViewInit, Component, ElementRef, Input, OnChanges, ViewChild } from '@angular/core';\nimport * as Prism from 'prismjs';\n\n@Component({\n\tselector: 'prism',\n\ttemplateUrl: './prism.component.html',\n\tstyleUrls: ['./prism.component.scss']\n})\nexport class PrismComponent implements AfterViewInit, OnChanges {\n\t@ViewChild('codeEle') codeEle!: ElementRef;\n\t@Input() code?: string;\n\t@Input() language?: string;\n\n\tconstructor() {}\n\n\tngAfterViewInit() {\n\t\tPrism.highlightElement(this.codeEle.nativeElement);\n\t}\n\n\tngOnChanges(): void {\n\t\tif (this.codeEle?.nativeElement) {\n\t\t\tthis.codeEle.nativeElement.textContent = this.code;\n\t\t\tPrism.highlightElement(this.codeEle.nativeElement);\n\t\t}\n\t}\n}\n","<pre *ngIf=\"language\" class=\"language-{{ language }} line-numbers\">\n<code #codeEle class=\"language-{{ language }}\">{{code}}</code>\n</pre>\n","import { Component, Input, OnInit } from '@angular/core';\nimport Chart from 'chart.js/auto';\nimport { APP } from './models/app.model';\nimport { EVENT, EVENT_DELIVERY } from './models/event.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { PAGINATION } from './models/global.model';\nimport { HTTP_RESPONSE } from './models/http.model';\nimport { GROUP } from './models/group.model';\nimport { ConvoyAppService } from './convoy-app.service';\nimport { format } from 'date-fns';\n\n@Component({\n\tselector: 'convoy-app',\n\ttemplateUrl: './convoy-app.component.html',\n\tstyleUrls: ['./convoy-app.component.scss']\n})\nexport class ConvoyAppComponent implements OnInit {\n\tshowFilterCalendar = false;\n\ttabs: ['events', 'event deliveries', 'apps'] = ['events', 'event deliveries', 'apps'];\n\tactiveTab: 'events' | 'apps' | 'event deliveries' = 'events';\n\tdetailsItem?: any;\n\teventDeliveryAtempt?: {\n\t\tip_address: '';\n\t\thttp_status: '';\n\t\tapi_version: '';\n\t\tupdated_at: 0;\n\t\tdeleted_at: 0;\n\t\tresponse_data: '';\n\t\tresponse_http_header: '';\n\t\trequest_http_header: '';\n\t};\n\tshowEventFilterCalendar = false;\n\teventDateFilterActive = false;\n\tdisplayedEvents: {\n\t\tdate: string;\n\t\tevents: EVENT[];\n\t}[] = [];\n\tevents!: { pagination: PAGINATION; content: EVENT[] };\n\tapps!: { pagination: PAGINATION; content: APP[] };\n\teventDetailsTabs = [\n\t\t{ id: 'data', label: 'Event' },\n\t\t{ id: 'response', label: 'Response' },\n\t\t{ id: 'request', label: 'Request' }\n\t];\n\teventDetailsActiveTab = 'data';\n\torganisationDetails!: {\n\t\tdatabase: { dsn: string };\n\t\tqueue: { type: string; redis: { dsn: string } };\n\t\tserver: { http: { port: number } };\n\t\tsignature: { header: string; hash: string };\n\t\tstrategy: {\n\t\t\ttype: 'default';\n\t\t\tdefault: { intervalSeconds: number; retryLimit: number };\n\t\t};\n\t};\n\tdashboardData = { apps: 0, events_sent: 0 };\n\teventApp: string = '';\n\teventDeliveriesApp: string = '';\n\teventsPage: number = 1;\n\teventDeliveriesPage: number = 1;\n\tappsPage: number = 1;\n\tdashboardFrequency: 'daily' | 'weekly' | 'monthly' | 'yearly' = 'daily';\n\tstatsDateRange: FormGroup = this.formBuilder.group({\n\t\tstartDate: [\n\t\t\t{\n\t\t\t\tvalue: new Date(new Date().setDate(new Date().getDate() - 30)),\n\t\t\t\tdisabled: true\n\t\t\t}\n\t\t],\n\t\tendDate: [{ value: new Date(), disabled: true }]\n\t});\n\teventsFilterDateRange: FormGroup = this.formBuilder.group({\n\t\tstartDate: [{ value: '', disabled: true }],\n\t\tendDate: [{ value: '', disabled: true }]\n\t});\n\teventDeliveriesFilterDateRange: FormGroup = this.formBuilder.group({\n\t\tstartDate: [{ value: '', disabled: true }],\n\t\tendDate: [{ value: '', disabled: true }]\n\t});\n\tselectedEventsFromEventDeliveriesTable: string[] = [];\n\tdisplayedEventDeliveries: { date: string; events: EVENT_DELIVERY[] }[] = [];\n\teventDeliveries!: { pagination: PAGINATION; content: EVENT_DELIVERY[] };\n\tsidebarEventDeliveries: EVENT_DELIVERY[] = [];\n\teventDeliveryFilteredByEventId = '';\n\tgroups: GROUP[] = [];\n\tactiveGroup!: string;\n\tallEventdeliveriesChecked = false;\n\teventDeliveryStatuses = ['', 'Success', 'Failure', 'Retry', 'Scheduled', 'Processing', 'Discarded'];\n\teventDeliveryFilteredByStatus: '' | 'Success' | 'Failure' | 'Retry' | 'Scheduled' | 'Processing' | 'Discarded' = '';\n\tshowOverlay = false;\n\tshowEventDeliveriesStatusDropdown = false;\n\t@Input('production') isProduction: boolean = false;\n\n\tconstructor(private convyAppService: ConvoyAppService, private router: Router, private formBuilder: FormBuilder, private route: ActivatedRoute) {}\n\n\tasync ngOnInit() {\n\t\tawait this.initDashboard();\n\t}\n\n\tasync initDashboard() {\n\t\tawait this.getGroups();\n\t\tthis.getFiltersFromURL();\n\t\tawait Promise.all([this.getConfigDetails(), this.fetchDashboardData(), this.getEvents(), this.getApps(), this.getEventDeliveries()]);\n\n\t\t// get active tab from url and apply, after getting the details from above requests so that the data is available ahead\n\t\tthis.toggleActiveTab(this.route.snapshot.queryParams.activeTab ?? 'events');\n\t\treturn;\n\t}\n\n\ttoggleActiveTab(tab: 'events' | 'apps' | 'event deliveries') {\n\t\tthis.activeTab = tab;\n\t\tthis.addFilterToURL({ section: 'logTab' });\n\n\t\tif (tab === 'apps' && this.apps?.content.length > 0) {\n\t\t\tthis.detailsItem = this.apps?.content[0];\n\t\t} else if (tab === 'events' && this.events?.content.length > 0) {\n\t\t\tthis.eventDetailsActiveTab = 'data';\n\t\t\tthis.detailsItem = this.events?.content[0];\n\t\t\tthis.getEventDeliveriesForSidebar(this.detailsItem.uid);\n\t\t} else if (tab === 'event deliveries' && this.eventDeliveries?.content.length > 0) {\n\t\t\tthis.detailsItem = this.eventDeliveries?.content[0];\n\t\t\tthis.getDelieveryAttempts(this.detailsItem.uid);\n\t\t}\n\t}\n\n\tasync getConfigDetails() {\n\t\ttry {\n\t\t\tconst organisationDetailsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/dashboard/config?groupID=${this.activeGroup || ''}`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tthis.organisationDetails = organisationDetailsResponse.data;\n\t\t} catch (error) {}\n\t}\n\n\tgetFiltersFromURL() {\n\t\tconst filters = this.route.snapshot.queryParams;\n\t\tif (Object.keys(filters).length == 0) return;\n\n\t\t// for events filters\n\t\tthis.eventsFilterDateRange.patchValue({\n\t\t\tstartDate: filters.eventsStartDate ? new Date(filters.eventsStartDate) : '',\n\t\t\tendDate: filters.eventsEndDate ? new Date(filters.eventsEndDate) : ''\n\t\t});\n\t\tthis.eventApp = filters.eventsApp ?? '';\n\n\t\t// for event deliveries filters\n\t\tthis.eventDeliveriesFilterDateRange.patchValue({\n\t\t\tstartDate: filters.eventDelsStartDate ? new Date(filters.eventDelsStartDate) : '',\n\t\t\tendDate: filters.eventDelsEndDate ? new Date(filters.eventDelsEndDate) : ''\n\t\t});\n\t\tthis.eventDeliveriesApp = filters.eventDelsApp ?? '';\n\t\tthis.eventDeliveryFilteredByStatus = filters.eventDelsStatus ?? null;\n\t}\n\n\tasync fetchDashboardData() {\n\t\ttry {\n\t\t\tconst { startDate, endDate } = this.setDateForFilter(this.statsDateRange.value);\n\n\t\t\tconst dashboardResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/dashboard/summary?groupID=${this.activeGroup || ''}&startDate=${startDate || ''}&endDate=${endDate || ''}&type=${this.dashboardFrequency}`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tthis.dashboardData = dashboardResponse.data;\n\n\t\t\tlet labelsDateFormat = '';\n\t\t\tif (this.dashboardFrequency === 'daily') labelsDateFormat = 'do, MMM';\n\t\t\telse if (this.dashboardFrequency === 'monthly') labelsDateFormat = 'MMM';\n\t\t\telse if (this.dashboardFrequency === 'yearly') labelsDateFormat = 'yyyy';\n\n\t\t\tconst chartData = dashboardResponse.data.event_data;\n\t\t\tconst labels = [...chartData.map((label: { data: { date: any } }) => label.data.date)].map(date => {\n\t\t\t\treturn this.dashboardFrequency === 'weekly' ? date : format(new Date(date), labelsDateFormat);\n\t\t\t});\n\t\t\tlabels.unshift('0');\n\t\t\tconst dataSet = [0, ...chartData.map((label: { count: any }) => label.count)];\n\t\t\tconst data = {\n\t\t\t\tlabels,\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdata: dataSet,\n\t\t\t\t\t\tfill: false,\n\t\t\t\t\t\tborderColor: '#477DB3',\n\t\t\t\t\t\ttension: 0.5,\n\t\t\t\t\t\tyAxisID: 'yAxis',\n\t\t\t\t\t\txAxisID: 'xAxis'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst options = {\n\t\t\t\tplugins: {\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tscales: {\n\t\t\t\t\txAxis: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\tgrid: {\n\t\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (!Chart.getChart('dahboard_events_chart') || !Chart.getChart('dahboard_events_chart')?.canvas) {\n\t\t\t\tnew Chart('dahboard_events_chart', {\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tdata,\n\t\t\t\t\toptions\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst currentChart = Chart.getChart('dahboard_events_chart');\n\t\t\t\tif (currentChart) {\n\t\t\t\t\tcurrentChart.data.labels = labels;\n\t\t\t\t\tcurrentChart.data.datasets[0].data = dataSet;\n\t\t\t\t\tcurrentChart.update();\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(Chart.getChart('dahboard_events_chart'));\n\t\t} catch (error) {}\n\t}\n\n\tsetDateForFilter(requestDetails: { startDate: Date; endDate: Date }) {\n\t\tif (!requestDetails.endDate && !requestDetails.startDate) return { startDate: '', endDate: '' };\n\t\tconst startDate = requestDetails.startDate ? `${format(requestDetails.startDate, 'yyyy-M-d')}T00:00:00` : '';\n\t\tconst endDate = requestDetails.endDate ? `${format(requestDetails.endDate, 'yyyy-M-d')}T00:00:00` : '';\n\t\treturn { startDate, endDate };\n\t}\n\n\tgetDate(date: Date) {\n\t\tconst months = ['Jan', 'Feb', 'Mar', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\t\tconst _date = new Date(date);\n\t\tconst day = _date.getDate();\n\t\tconst month = _date.getMonth();\n\t\tconst year = _date.getFullYear();\n\t\treturn `${day} ${months[month]}, ${year}`;\n\t}\n\n\tsetEventsDisplayed(events: { created_at: Date }[]) {\n\t\tconst dateCreateds = events.map((event: { created_at: Date }) => this.getDate(event.created_at));\n\t\tconst uniqueDateCreateds = [...new Set(dateCreateds)];\n\t\tconst displayedEvents: any = [];\n\t\tuniqueDateCreateds.forEach(eventDate => {\n\t\t\tconst filteredEventDate = events.filter((event: { created_at: Date }) => this.getDate(event.created_at) === eventDate);\n\t\t\tconst eventsItem = { date: eventDate, events: filteredEventDate };\n\t\t\tdisplayedEvents.push(eventsItem);\n\t\t});\n\t\treturn displayedEvents;\n\t}\n\n\tasync getEvents(requestDetails?: { appId?: string; addToURL?: boolean }) {\n\t\tif (requestDetails?.appId) this.eventApp = requestDetails.appId;\n\t\tif (requestDetails?.addToURL) this.addFilterToURL({ section: 'events' });\n\n\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventsFilterDateRange.value);\n\n\t\ttry {\n\t\t\tconst eventsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(\n\t\t\t\t\t`/events?groupID=${this.activeGroup || ''}&sort=AESC&page=${this.eventsPage || 1}&perPage=20&startDate=${startDate}&endDate=${endDate}&appId=${requestDetails?.appId ?? this.eventApp}`\n\t\t\t\t),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tif (this.activeTab === 'events') this.detailsItem = eventsResponse.data.content[0];\n\n\t\t\tif (this.events && this.events?.pagination?.next === this.eventsPage) {\n\t\t\t\tconst content = [...this.events.content, ...eventsResponse.data.content];\n\t\t\t\tconst pagination = eventsResponse.data.pagination;\n\t\t\t\tthis.events = { content, pagination };\n\t\t\t\tthis.displayedEvents = this.setEventsDisplayed(content);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.events = eventsResponse.data;\n\t\t\tthis.displayedEvents = await this.setEventsDisplayed(eventsResponse.data.content);\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\taddFilterToURL(requestDetails: { section: 'events' | 'eventDels' | 'group' | 'logTab' }) {\n\t\tconst currentURLfilters = this.route.snapshot.queryParams;\n\t\tconst queryParams: any = {};\n\n\t\tif (requestDetails.section === 'events') {\n\t\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventsFilterDateRange.value);\n\t\t\tif (startDate) queryParams.eventsStartDate = startDate;\n\t\t\tif (endDate) queryParams.eventsEndDate = endDate;\n\t\t\tif (this.eventApp) queryParams.eventsApp = this.eventApp;\n\t\t}\n\n\t\tif (requestDetails.section === 'eventDels') {\n\t\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n\t\t\tif (startDate) queryParams.eventDelsStartDate = startDate;\n\t\t\tif (endDate) queryParams.eventDelsEndDate = endDate;\n\t\t\tif (this.eventDeliveriesApp) queryParams.eventDelsApp = this.eventDeliveriesApp;\n\t\t\tqueryParams.eventDelsStatus = this.eventDeliveryFilteredByStatus || '';\n\t\t}\n\n\t\tif (requestDetails.section === 'group') queryParams.group = this.activeGroup;\n\n\t\tif (requestDetails.section === 'logTab') queryParams.activeTab = this.activeTab;\n\n\t\tthis.router.navigate([], {\n\t\t\tqueryParams: Object.assign({}, currentURLfilters, queryParams)\n\t\t});\n\t}\n\n\tasync eventDeliveriesRequest(requestDetails: { eventId?: string; startDate?: string; endDate?: string }): Promise<HTTP_RESPONSE> {\n\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n\n\t\ttry {\n\t\t\tconst eventDeliveriesResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(\n\t\t\t\t\t`/eventdeliveries?groupID=${this.activeGroup || ''}&eventId=${requestDetails.eventId || ''}&page=${this.eventDeliveriesPage || 1}&startDate=${startDate}&endDate=${endDate}&appId=${\n\t\t\t\t\t\tthis.eventDeliveriesApp\n\t\t\t\t\t}&status=${this.eventDeliveryFilteredByStatus || ''}`\n\t\t\t\t),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\n\t\t\treturn eventDeliveriesResponse;\n\t\t} catch (error: any) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync getEventDeliveries(requestDetails?: { addToURL?: boolean }) {\n\t\tif (requestDetails?.addToURL) this.addFilterToURL({ section: 'eventDels' });\n\t\tconst { startDate, endDate } = this.setDateForFilter(this.eventDeliveriesFilterDateRange.value);\n\n\t\ttry {\n\t\t\tconst eventDeliveriesResponse = await this.eventDeliveriesRequest({\n\t\t\t\teventId: this.eventDeliveryFilteredByEventId,\n\t\t\t\tstartDate,\n\t\t\t\tendDate\n\t\t\t});\n\t\t\tif (this.activeTab === 'event deliveries') this.detailsItem = eventDeliveriesResponse.data.content[0];\n\n\t\t\tif (this.eventDeliveries && this.eventDeliveries?.pagination?.next === this.eventDeliveriesPage) {\n\t\t\t\tconst content = [...this.eventDeliveries.content, ...eventDeliveriesResponse.data.content];\n\t\t\t\tconst pagination = eventDeliveriesResponse.data.pagination;\n\t\t\t\tthis.eventDeliveries = { content, pagination };\n\t\t\t\tthis.displayedEventDeliveries = this.setEventsDisplayed(content);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.eventDeliveries = eventDeliveriesResponse.data;\n\t\t\tthis.displayedEventDeliveries = this.setEventsDisplayed(eventDeliveriesResponse.data.content);\n\t\t\treturn eventDeliveriesResponse.data.content;\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync getEventDeliveriesForSidebar(eventId: string) {\n\t\tconst response = await this.eventDeliveriesRequest({\n\t\t\teventId,\n\t\t\tstartDate: '',\n\t\t\tendDate: ''\n\t\t});\n\t\tthis.sidebarEventDeliveries = response.data.content;\n\t}\n\n\tasync toggleActiveGroup() {\n\t\tawait Promise.all([this.clearEventFilters('event deliveries'), this.clearEventFilters('events')]);\n\t\tthis.addFilterToURL({ section: 'group' });\n\t\tPromise.all([this.getConfigDetails(), this.fetchDashboardData(), this.getEvents(), this.getApps(), this.getEventDeliveries()]);\n\t}\n\n\tasync getGroups(requestDetails?: { addToURL?: boolean }) {\n\t\tif (requestDetails?.addToURL) this.addFilterToURL({ section: 'group' });\n\n\t\ttry {\n\t\t\tconst groupsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/groups`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tthis.groups = groupsResponse.data;\n\n\t\t\t// check group existing filter in url and set active group\n\t\t\tthis.activeGroup = this.route.snapshot.queryParams.group ?? this.groups[0]?.uid;\n\t\t\treturn;\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync getApps() {\n\t\ttry {\n\t\t\tconst appsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/apps?groupID=${this.activeGroup || ''}&sort=AESC&page=${this.appsPage || 1}&perPage=10`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\n\t\t\tif (this.apps?.pagination?.next === this.appsPage) {\n\t\t\t\tconst content = [...this.apps.content, ...appsResponse.data.content];\n\t\t\t\tconst pagination = appsResponse.data.pagination;\n\t\t\t\tthis.apps = { content, pagination };\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.apps = appsResponse.data;\n\t\t\tif (this.activeTab === 'apps') this.detailsItem = this.apps?.content[0];\n\t\t\treturn;\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync getDelieveryAttempts(eventDeliveryId: string) {\n\t\ttry {\n\t\t\tconst deliveryAttemptsResponse = await this.convyAppService.request({\n\t\t\t\turl: this.getAPIURL(`/eventdeliveries/${eventDeliveryId}/deliveryattempts?groupID=${this.activeGroup || ''}`),\n\t\t\t\tmethod: 'get'\n\t\t\t});\n\t\t\tthis.eventDeliveryAtempt = deliveryAttemptsResponse.data[deliveryAttemptsResponse.data.length - 1];\n\t\t\treturn;\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tgetCodeSnippetString(type: 'res_body' | 'event' | 'event_delivery' | 'res_head' | 'req') {\n\t\tif (type === 'event') {\n\t\t\tif (!this.detailsItem?.data) return 'No event data was sent';\n\t\t\treturn JSON.stringify(this.detailsItem.data || this.detailsItem.metadata.data, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n\t\t} else if (type === 'event_delivery') {\n\t\t\tif (!this.detailsItem?.metadata?.data) return 'No event data was sent';\n\t\t\treturn JSON.stringify(this.detailsItem.metadata.data, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n\t\t} else if (type === 'res_body') {\n\t\t\tif (!this.eventDeliveryAtempt) return 'No response body was sent';\n\t\t\treturn this.eventDeliveryAtempt.response_data;\n\t\t} else if (type === 'res_head') {\n\t\t\tif (!this.eventDeliveryAtempt) return 'No response header was sent';\n\t\t\treturn JSON.stringify(this.eventDeliveryAtempt.response_http_header, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n\t\t} else if (type === 'req') {\n\t\t\tif (!this.eventDeliveryAtempt) return 'No request header was sent';\n\t\t\treturn JSON.stringify(this.eventDeliveryAtempt.request_http_header, null, 4).replaceAll(/\"([^\"]+)\":/g, '$1:');\n\t\t}\n\t\treturn '';\n\t}\n\n\tasync retryEvent(requestDetails: { e: any; index: number; eventDeliveryId: string }) {\n\t\trequestDetails.e.stopPropagation();\n\t\tconst retryButton: any = document.querySelector(`#event${requestDetails.index} button`);\n\t\tif (retryButton) {\n\t\t\tretryButton.classList.add(['spin', 'disabled']);\n\t\t\tretryButton.disabled = true;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.convyAppService.request({\n\t\t\t\tmethod: 'put',\n\t\t\t\turl: this.getAPIURL(`/eventdeliveries/${requestDetails.eventDeliveryId}/resend?groupID=${this.activeGroup || ''}`)\n\t\t\t});\n\n\t\t\tthis.convyAppService.showNotification({\n\t\t\t\tmessage: 'Retry Request Sent'\n\t\t\t});\n\t\t\tretryButton.classList.remove(['spin', 'disabled']);\n\t\t\tretryButton.disabled = false;\n\t\t\tthis.getEventDeliveries();\n\t\t} catch (error: any) {\n\t\t\tthis.convyAppService.showNotification({\n\t\t\t\tmessage: error.error.message\n\t\t\t});\n\t\t\tretryButton.classList.remove(['spin', 'disabled']);\n\t\t\tretryButton.disabled = false;\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync batchRetryEvent() {\n\t\ttry {\n\t\t\tawait this.convyAppService.request({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: this.getAPIURL(`/eventdeliveries/batchretry?groupID=${this.activeGroup || ''}`),\n\t\t\t\tbody: { ids: this.selectedEventsFromEventDeliveriesTable }\n\t\t\t});\n\n\t\t\tthis.convyAppService.showNotification({\n\t\t\t\tmessage: 'Batch Retry Request Sent'\n\t\t\t});\n\t\t\tthis.getEventDeliveries();\n\t\t\tthis.selectedEventsFromEventDeliveriesTable = [];\n\t\t} catch (error: any) {\n\t\t\tthis.convyAppService.showNotification({\n\t\t\t\tmessage: error.error.message\n\t\t\t});\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tasync clearEventFilters(tableName: 'events' | 'event deliveries') {\n\t\tconst activeFilters = Object.assign({}, this.route.snapshot.queryParams);\n\t\tlet filterItems: string[] = [];\n\n\t\tswitch (tableName) {\n\t\t\tcase 'events':\n\t\t\t\tthis.eventApp = '';\n\t\t\t\tfilterItems = ['eventsStartDate', 'eventsEndDate', 'eventsApp'];\n\t\t\t\tthis.eventsFilterDateRange.patchValue({\n\t\t\t\t\tstartDate: '',\n\t\t\t\t\tendDate: ''\n\t\t\t\t});\n\t\t\t\tthis.getEvents();\n\t\t\t\tbreak;\n\n\t\t\tcase 'event deliveries':\n\t\t\t\tthis.eventDeliveriesApp = '';\n\t\t\t\tfilterItems = ['eventDelsStartDate', 'eventDelsEndDate', 'eventDelsApp', 'eventDelsStatus'];\n\t\t\t\tthis.eventDeliveriesFilterDateRange.patchValue({\n\t\t\t\t\tstartDate: '',\n\t\t\t\t\tendDate: ''\n\t\t\t\t});\n\t\t\t\tthis.eventDeliveryFilteredByEventId = '';\n\t\t\t\tthis.eventDeliveryFilteredByStatus = '';\n\t\t\t\tthis.getEventDeliveries();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tfilterItems.forEach(key => (activeFilters.hasOwnProperty(key) ? delete activeFilters[key] : null));\n\t\tawait this.router.navigate([], {\n\t\t\trelativeTo: this.route,\n\t\t\tqueryParams: activeFilters\n\t\t});\n\t}\n\n\tcheckAllCheckboxes(event: any) {\n\t\tconst checkboxes = document.querySelectorAll('#event-deliveries-table tbody input[type=\"checkbox\"]');\n\n\t\tcheckboxes.forEach((checkbox: any) => {\n\t\t\tthis.selectedEventsFromEventDeliveriesTable.push(checkbox.value);\n\t\t\tcheckbox.checked = event.target.checked;\n\t\t});\n\n\t\tif (!event.target.checked) this.selectedEventsFromEventDeliveriesTable = [];\n\t\tthis.allEventdeliveriesChecked = event.target.checked;\n\t}\n\n\tcheckEventDeliveryBox(event: any) {\n\t\tconst checkbox = event.target;\n\t\tif (checkbox.checked) {\n\t\t\tthis.selectedEventsFromEventDeliveriesTable.push(checkbox.value);\n\t\t} else {\n\t\t\tthis.selectedEventsFromEventDeliveriesTable = this.selectedEventsFromEventDeliveriesTable.filter(eventId => eventId !== checkbox.value);\n\t\t}\n\t\tthis.allEventdeliveriesChecked = false;\n\t\tconst parentCheckbox: any = document.querySelector('#eventDeliveryTable');\n\t\tparentCheckbox.checked = false;\n\t}\n\n\tasync loadMoreEventDeliveries() {\n\t\tthis.eventDeliveriesPage = this.eventDeliveriesPage + 1;\n\t\tawait this.getEventDeliveries();\n\t\tsetTimeout(() => {\n\t\t\tif (this.allEventdeliveriesChecked) {\n\t\t\t\tthis.checkAllCheckboxes({ target: { checked: true } });\n\t\t\t}\n\t\t}, 200);\n\t}\n\n\tasync openDeliveriesTab() {\n\t\tawait this.getEventDeliveries();\n\t\tthis.toggleActiveTab('event deliveries');\n\t}\n\n\tasync refreshTables() {\n\t\tawait this.initDashboard();\n\t\tthis.toggleActiveTab('event deliveries');\n\t}\n\n\tgetAPIURL(url: string) {\n\t\treturn `${this.isProduction ? location.origin : 'http://localhost:5005'}/ui${url}`;\n\t}\n}\n","<div class=\"app-page\">\n\t<div class=\"app-page--head\">\n\t\t<h3>Endpoint and Events</h3>\n\t\t<button class=\"primary\">Create Endpoint</button>\n\t</div>\n\n\t<div class=\"app-page--details\">\n\t\t<div class=\"card app-page--endpoints\">\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr class=\"table--head\">\n\t\t\t\t\t\t<th scope=\"col\">Endpoint URL</th>\n\t\t\t\t\t\t<th scope=\"col\">Type</th>\n\t\t\t\t\t\t<th scope=\"col\">Error Rate</th>\n\t\t\t\t\t\t<th scope=\"col\">Status</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr class=\"has-border\">\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>URL goes here and will be truncated...</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Type goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Percentage goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div><div class=\"tag\">Active</div></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class=\"has-border\">\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>URL goes here and will be truncated...</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Type goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Percentage goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div><div class=\"tag\">Active</div></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class=\"has-border\">\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>URL goes here and will be truncated...</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Type goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div>Percentage goes here</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div><div class=\"tag\">Active</div></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\n\t\t<div class=\"card has-title app-page--metrics\">\n\t\t\t<div class=\"card--title\">\n\t\t\t\t<h2>Metrics on events sent by endpoint</h2>\n\t\t\t</div>\n\n\t\t\t<ul class=\"card--container metrics\">\n\t\t\t\t<li>\n\t\t\t\t\t<div>5k</div>\n\t\t\t\t\t<p>Primary App</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<div>5k</div>\n\t\t\t\t\t<p>Primary App</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<div>5k</div>\n\t\t\t\t\t<p>Primary App</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<div>5k</div>\n\t\t\t\t\t<p>Primary App</p>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\n\t<section class=\"card dashboard--logs\">\n\t\t<div class=\"dashboard--logs--tabs\">\n\t\t\t<div class=\"dashboard--logs--tabs--head tabs\">\n\t\t\t\t<div class=\"tabs\">\n\t\t\t\t\t<button *ngFor=\"let tab of tabs\" (click)=\"toggleActiveTab(tab)\" class=\"clear tab\" [ngClass]=\"{ active: activeTab === tab }\">\n\t\t\t\t\t\t{{ tab }}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"table\">\n\t\t\t\t<ng-container *ngIf=\"activeTab === 'events'\">\n\t\t\t\t\t<div class=\"filter\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"filter--button date-filter-button\"\n\t\t\t\t\t\t\t(click)=\"eventsFilterPicker.open()\"\n\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\tactive: eventsFilterDateRange.value.startDate !== '' && eventsFilterDateRange.value.endDate !== ''\n\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t(click)=\"showEventFilterCalendar = !showEventFilterCalendar\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img src=\"/assets/img/calendar-icon.svg\" alt=\"calender icon\" />\n\t\t\t\t\t\t\t<mat-date-range-input [formGroup]=\"eventsFilterDateRange\" [rangePicker]=\"eventsFilterPicker\">\n\t\t\t\t\t\t\t\t<input matStartDate formControlName=\"startDate\" placeholder=\"Start date\" />\n\t\t\t\t\t\t\t\t<input matEndDate formControlName=\"endDate\" placeholder=\"End date\" (dateChange)=\"getEvents({ addToURL: true })\" />\n\t\t\t\t\t\t\t</mat-date-range-input>\n\t\t\t\t\t\t\t<mat-date-range-picker #eventsFilterPicker [disabled]=\"false\"></mat-date-range-picker>\n\t\t\t\t\t\t\t<img src=\"/assets/img/angle-arrow-down.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t<div class=\"select\">\n\t\t\t\t\t\t\t<select [ngClass]=\"{ active: !!eventApp }\" aria-label=\"frequency\" [(ngModel)]=\"eventApp\" (change)=\"getEvents({ addToURL: true })\">\n\t\t\t\t\t\t\t\t<option value=\"\">All Apps</option>\n\t\t\t\t\t\t\t\t<option [value]=\"app.uid\" *ngFor=\"let app of apps?.content\">\n\t\t\t\t\t\t\t\t\t{{ app.name }}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"filter--button primary events-filter-clear-btn\"\n\t\t\t\t\t\t\t(click)=\"clearEventFilters(activeTab)\"\n\t\t\t\t\t\t\t[disabled]=\"(eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\"\n\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\tdisabled: (eventsFilterDateRange.value.startDate == '' || eventsFilterDateRange.value.endDate == '') && eventApp == ''\n\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClear Filter\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<hr />\n\n\t\t\t\t\t<div class=\"table--container smaller-table\" *ngIf=\"displayedEvents.length > 0\">\n\t\t\t\t\t\t<table id=\"events-table\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr class=\"table--head\">\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Event Type</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">App Name</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Created At</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\"></th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<ng-container *ngFor=\"let eventGroup of displayedEvents; let i = index\">\n\t\t\t\t\t\t\t\t\t<tr class=\"table--date-row\">\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>{{ eventGroup.date }}</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\t\t\t*ngFor=\"let event of eventGroup.events; let index = index\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\t\t\t\tactive: event.uid === detailsItem?.uid\n\t\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\t\t[id]=\"'event' + index\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"detailsItem = event; getEventDeliveriesForSidebar(event.uid)\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"tag\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{ event.event_type }}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td class=\"has-long-text\">\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.app_metadata.title }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.created_at | date: 'mediumTime' }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"primary clear has-icon icon-right\" (click)=\"eventDeliveryFilteredByEventId = event.uid; openDeliveriesTab()\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tDeliveries\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"../../../../assets/img/angle-arrow-right-primary.svg\" alt=\"arrow right\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\n\t\t\t\t\t\t<div class=\"table--load-more button-container center\" *ngIf=\"events.pagination.totalPage > 1\">\n\t\t\t\t\t\t\t<button [class]=\"'primary clear has-icon icon-left '\" [disabled]=\"events.pagination.page === events.pagination.totalPage\" (click)=\"eventsPage = eventsPage + 1; getEvents()\">\n\t\t\t\t\t\t\t\t<img src=\"/assets/img/arrow-down-icon.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t\t\tLoad more\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"empty-state table--container\" *ngIf=\"displayedEvents.length === 0\">\n\t\t\t\t\t\t<img src=\"/assets/img/empty-state-img.svg\" alt=\"empty state\" />\n\t\t\t\t\t\t<p>No event to show here</p>\n\t\t\t\t\t</div>\n\t\t\t\t</ng-container>\n\n\t\t\t\t<ng-container *ngIf=\"activeTab === 'event deliveries'\">\n\t\t\t\t\t<div class=\"filter\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"filter--button date-filter-button\"\n\t\t\t\t\t\t\t(click)=\"eventDeliveriesFilterPicker.open()\"\n\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\tactive: eventDeliveriesFilterDateRange.value.startDate !== '' && eventDeliveriesFilterDateRange.value.endDate !== ''\n\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t(click)=\"showEventFilterCalendar = !showEventFilterCalendar\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img src=\"/assets/img/calendar-icon.svg\" alt=\"calender icon\" />\n\t\t\t\t\t\t\t<mat-date-range-input [formGroup]=\"eventDeliveriesFilterDateRange\" [rangePicker]=\"eventDeliveriesFilterPicker\">\n\t\t\t\t\t\t\t\t<input matStartDate formControlName=\"startDate\" placeholder=\"Start date\" />\n\t\t\t\t\t\t\t\t<input matEndDate formControlName=\"endDate\" placeholder=\"End date\" (dateChange)=\"getEventDeliveries({ addToURL: true })\" />\n\t\t\t\t\t\t\t</mat-date-range-input>\n\t\t\t\t\t\t\t<mat-date-range-picker #eventDeliveriesFilterPicker [disabled]=\"false\"></mat-date-range-picker>\n\t\t\t\t\t\t\t<img src=\"/assets/img/angle-arrow-down.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div class=\"dropdown\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclass=\"filter--button dropdown--button\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\t\tactive: eventDeliveryFilteredByStatus\n\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t(click)=\"showOverlay = true; showEventDeliveriesStatusDropdown = !showEventDeliveriesStatusDropdown\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<img src=\"/assets/img/status-filter-icon.svg\" alt=\"status filter icon\" />\n\t\t\t\t\t\t\t\t<span>{{ eventDeliveryFilteredByStatus || 'Status' }}</span>\n\t\t\t\t\t\t\t\t<img src=\"/assets/img/angle-arrow-down.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<div class=\"dropdown--list\" *ngIf=\"showEventDeliveriesStatusDropdown\">\n\t\t\t\t\t\t\t\t<div class=\"dropdown--list--item\" *ngFor=\"let status of eventDeliveryStatuses\">\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\t\tname=\"status\"\n\t\t\t\t\t\t\t\t\t\t[value]=\"status\"\n\t\t\t\t\t\t\t\t\t\t[(ngModel)]=\"eventDeliveryFilteredByStatus\"\n\t\t\t\t\t\t\t\t\t\t[id]=\"status\"\n\t\t\t\t\t\t\t\t\t\t(change)=\"\n\t\t\t\t\t\t\t\t\t\t\tshowOverlay = false;\n\t\t\t\t\t\t\t\t\t\t\tshowEventDeliveriesStatusDropdown = false;\n\t\t\t\t\t\t\t\t\t\t\tgetEventDeliveries({\n\t\t\t\t\t\t\t\t\t\t\t\taddToURL: true\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<label [for]=\"status\">{{ status || 'None' }}</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"select\">\n\t\t\t\t\t\t\t<select [ngClass]=\"{ active: !!eventDeliveriesApp }\" aria-label=\"frequency\" [(ngModel)]=\"eventDeliveriesApp\" (change)=\"getEventDeliveries({ addToURL: true })\">\n\t\t\t\t\t\t\t\t<option value=\"\">All Apps</option>\n\t\t\t\t\t\t\t\t<option [value]=\"app.uid\" *ngFor=\"let app of apps?.content\">\n\t\t\t\t\t\t\t\t\t{{ app.name }}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"filter--button event-button active\" *ngIf=\"eventDeliveryFilteredByEventId !== ''\">\n\t\t\t\t\t\t\tEvent Filtered\n\t\t\t\t\t\t\t<button class=\"primary clear has-icon\" (click)=\"eventDeliveryFilteredByEventId = ''; getEventDeliveries()\">\n\t\t\t\t\t\t\t\t<img src=\"../../../../assets/img/close-icon.svg\" alt=\"close icon\" />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"filter--button primary events-filter-clear-btn\"\n\t\t\t\t\t\t\t(click)=\"clearEventFilters(activeTab)\"\n\t\t\t\t\t\t\t[disabled]=\"\n\t\t\t\t\t\t\t\t(eventDeliveriesFilterDateRange.value.startDate == '' || eventDeliveriesFilterDateRange.value.endDate == '') &&\n\t\t\t\t\t\t\t\teventDeliveriesApp == '' &&\n\t\t\t\t\t\t\t\teventDeliveryFilteredByEventId == '' &&\n\t\t\t\t\t\t\t\t!eventDeliveryFilteredByStatus\n\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClear Filter\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<hr />\n\n\t\t\t\t\t<div class=\"table--actions button-container left\">\n\t\t\t\t\t\t<button class=\"primary clear has-icon icon-left hover\" (click)=\"refreshTables()\">\n\t\t\t\t\t\t\t<img src=\"../../../../assets/img/refresh-icon-2.svg\" alt=\"refresh icon\" />\n\t\t\t\t\t\t\tRefresh\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"primary clear has-icon icon-left hover\" (click)=\"batchRetryEvent()\" [disabled]=\"selectedEventsFromEventDeliveriesTable.length <= 0\">\n\t\t\t\t\t\t\t<img src=\"../../../../assets/img/retry-icon.svg\" alt=\"retry icon\" />\n\t\t\t\t\t\t\tBulk Retry\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"table--container\" *ngIf=\"displayedEventDeliveries.length > 0\">\n\t\t\t\t\t\t<table id=\"event-deliveries-table\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr class=\"table--head\">\n\t\t\t\t\t\t\t\t\t<th scope=\"col\" class=\"checkbox\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"checkbox\">\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"eventDeliveryTable\" id=\"eventDeliveryTable\" (change)=\"checkAllCheckboxes($event)\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\tStatus\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Event Type</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Attempts</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Created At</th>\n\t\t\t\t\t\t\t\t\t<th scope=\"col\"></th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<ng-container *ngFor=\"let eventDeliveriesGroup of displayedEventDeliveries; let i = index\">\n\t\t\t\t\t\t\t\t\t<tr class=\"table--date-row\">\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ eventDeliveriesGroup.date }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\t\t\t*ngFor=\"let event of eventDeliveriesGroup.events; let index = index\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\t\t\t\tactive: event.uid === detailsItem?.uid\n\t\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\t\t[id]=\"'event' + index\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"detailsItem = event; getDelieveryAttempts(event.uid)\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"checkbox has-retry\">\n\t\t\t\t\t\t\t\t\t\t\t\t<img *ngIf=\"event.metadata.num_trials > event.metadata.retry_limit\" src=\"/assets/img/retry-icon.svg\" alt=\"retry icon\" title=\"manually retried\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" [name]=\"'event' + index\" id=\"event\" [value]=\"event.uid\" (change)=\"checkEventDeliveryBox($event)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<div [class]=\"'tag tag--' + event.status\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{ event.status }}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.event_metadata.name }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.metadata?.num_trials }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t{{ event.created_at | date: 'mediumTime' }}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t[disabled]=\"event.status === 'Success' || event.status === 'Scheduled'\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t[class]=\"'primary has-icon icon-left ' + (event.status === 'Success' || event.status === 'Scheduled' ? 'disabled' : '')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tretryEvent({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te: $event,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex: this.index,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventDeliveryId: event.uid\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"/assets/img/refresh-icon.svg\" alt=\"refresh icon\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\tRetry\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\n\t\t\t\t\t\t<div class=\"table--load-more button-container center\" *ngIf=\"eventDeliveries.pagination.totalPage > 1\">\n\t\t\t\t\t\t\t<button [class]=\"'primary clear has-icon icon-left'\" [disabled]=\"eventDeliveries.pagination.page === eventDeliveries.pagination.totalPage\" (click)=\"loadMoreEventDeliveries()\">\n\t\t\t\t\t\t\t\t<img src=\"/assets/img/arrow-down-icon.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t\t\tLoad more\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"empty-state table--container\" *ngIf=\"displayedEventDeliveries.length === 0\">\n\t\t\t\t\t\t<img src=\"/assets/img/empty-state-img.svg\" alt=\"empty state\" />\n\t\t\t\t\t\t<p>No event to show here</p>\n\t\t\t\t\t</div>\n\t\t\t\t</ng-container>\n\n\t\t\t\t<div class=\"table--container smaller-table\" *ngIf=\"apps && apps.content.length > 0 && activeTab === 'apps'\">\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr class=\"table--head\">\n\t\t\t\t\t\t\t\t<th scope=\"col\">Name</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Created</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Updated</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Events</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Endpoints</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\"></th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\t*ngFor=\"let app of apps?.content\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t\t\t\tactive: app.uid === detailsItem?.uid\n\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t(click)=\"detailsItem = app\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<td class=\"has-long-text\">\n\t\t\t\t\t\t\t\t\t<div>{{ app.name }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>{{ app.created_at | date }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>{{ app.updated_at | date }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>{{ app.events }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>{{ app.endpoints.length }}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t[disabled]=\"app.events <= 0\"\n\t\t\t\t\t\t\t\t\t\t\ttitle=\"view events\"\n\t\t\t\t\t\t\t\t\t\t\t[class]=\"'primary has-icon icon-left'\"\n\t\t\t\t\t\t\t\t\t\t\t(click)=\"\n\t\t\t\t\t\t\t\t\t\t\t\ttoggleActiveTab('events');\n\t\t\t\t\t\t\t\t\t\t\t\tgetEvents({\n\t\t\t\t\t\t\t\t\t\t\t\t\taddToURL: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\tappId: app.uid\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<img src=\"/assets/img/view-events-icon.svg\" alt=\"view events icon\" />\n\t\t\t\t\t\t\t\t\t\t\tEvents\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\n\t\t\t\t\t<div class=\"table--load-more button-container margin-top center\" *ngIf=\"apps?.pagination && apps.pagination.totalPage > 1\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t[class]=\"'primary clear has-icon icon-left ' + (apps.pagination.page === apps.pagination.totalPage ? 'disabled' : '')\"\n\t\t\t\t\t\t\t[disabled]=\"apps.pagination.page === apps.pagination.totalPage\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img src=\"/assets/img/arrow-down-icon.svg\" alt=\"arrow down icon\" />\n\t\t\t\t\t\t\tLoad more\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"empty-state\" *ngIf=\"apps?.content?.length === 0 && activeTab === 'apps'\">\n\t\t\t\t\t<img src=\"/assets/img/empty-state-img.svg\" alt=\"empty state\" />\n\t\t\t\t\t<p>No app to show here</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"dashboard--logs--details\">\n\t\t\t<ng-container *ngIf=\"detailsItem\">\n\t\t\t\t<h3>Details</h3>\n\t\t\t\t<ul class=\"dashboard--logs--details--meta\" *ngIf=\"activeTab === 'apps' || activeTab === 'event deliveries'\">\n\t\t\t\t\t<ng-container *ngIf=\"activeTab === 'event deliveries'\">\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">IP Address</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\">\n\t\t\t\t\t\t\t\t{{ eventDeliveryAtempt?.ip_address || '-' }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">HTTP Status</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item\">\n\t\t\t\t\t\t\t\t{{ eventDeliveryAtempt?.http_status || '-' }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">API Version</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\">\n\t\t\t\t\t\t\t\t{{ eventDeliveryAtempt?.api_version || '-' }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">Endpoint</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\" [title]=\"detailsItem.endpoint?.target_url\">\n\t\t\t\t\t\t\t\t{{ detailsItem.endpoint?.target_url }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\" *ngIf=\"detailsItem.metadata?.num_trials < detailsItem.metadata?.retry_limit && detailsItem.status !== 'Success'\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">Next Retry</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\">\n\t\t\t\t\t\t\t\t{{ detailsItem.metadata?.next_send_time | date: 'mediumTime' }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"list-item-inline\">\n\t\t\t\t\t\t\t<div class=\"list-item-inline--label\">App Name</div>\n\t\t\t\t\t\t\t<div class=\"list-item-inline--item color\">\n\t\t\t\t\t\t\t\t{{ detailsItem.app_metadata?.title }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<li class=\"list-item-inline\" *ngIf=\"activeTab === 'apps'\">\n\t\t\t\t\t\t<div class=\"list-item-inline--label\">Support Email</div>\n\t\t\t\t\t\t<div class=\"list-item-inline--item\">\n\t\t\t\t\t\t\t{{ detailsItem?.support_email || '-' }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\n\t\t\t\t<ul class=\"tabs\" *ngIf=\"activeTab === 'event deliveries'\">\n\t\t\t\t\t<li *ngFor=\"let tab of eventDetailsTabs\" [class]=\"'tab ' + (eventDetailsActiveTab === tab.id ? 'active' : '')\">\n\t\t\t\t\t\t<button class=\"primary outline\" (click)=\"eventDetailsActiveTab = tab.id\">\n\t\t\t\t\t\t\t{{ tab.label }}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\n\t\t\t\t<div class=\"dashboard--logs--details--req-res\" *ngIf=\"activeTab === 'events' || activeTab === 'event deliveries'\">\n\t\t\t\t\t<div [class]=\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'data' ? 'show' : '')\">\n\t\t\t\t\t\t<h3>Event</h3>\n\t\t\t\t\t\t<prism language=\"json\" [code]=\"getCodeSnippetString(activeTab === 'events' ? 'event' : 'event_delivery')\"></prism>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div [class]=\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'response' ? 'show' : '')\">\n\t\t\t\t\t\t<h3>Header</h3>\n\t\t\t\t\t\t<prism language=\"json\" [code]=\"getCodeSnippetString('res_head')\"></prism>\n\n\t\t\t\t\t\t<h3>Body</h3>\n\t\t\t\t\t\t<prism language=\"json\" [code]=\"getCodeSnippetString('res_body')\"></prism>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div [class]=\"'dashboard--logs--details--tabs-data ' + (eventDetailsActiveTab === 'request' ? 'show' : '')\">\n\t\t\t\t\t\t<h3>Header</h3>\n\t\t\t\t\t\t<prism language=\"json\" [code]=\"getCodeSnippetString('req')\"></prism>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<ng-container *ngIf=\"activeTab === 'events'\">\n\t\t\t\t\t<h4>Deliveries Overview</h4>\n\t\t\t\t\t<ul class=\"dashboard--logs--details--endpoints inline\">\n\t\t\t\t\t\t<li *ngFor=\"let delivery of sidebarEventDeliveries\">\n\t\t\t\t\t\t\t<div [class]=\"'tag tag--' + delivery.status\">\n\t\t\t\t\t\t\t\t{{ delivery.status }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"url\" [title]=\"delivery.endpoint.target_url\">\n\t\t\t\t\t\t\t\t{{ delivery.endpoint.target_url }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</ng-container>\n\n\t\t\t\t<ng-container *ngIf=\"activeTab === 'apps'\">\n\t\t\t\t\t<h4>App Event Endpoints</h4>\n\t\t\t\t\t<ul class=\"dashboard--logs--details--endpoints\">\n\t\t\t\t\t\t<ng-container *ngIf=\"detailsItem?.endpoints\">\n\t\t\t\t\t\t\t<li *ngFor=\"let endpoint of detailsItem.endpoints\">\n\t\t\t\t\t\t\t\t<h5>{{ endpoint.description }}</h5>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<img src=\"/assets/img/link-icon.svg\" alt=\"link icon\" />\n\t\t\t\t\t\t\t\t\t{{ endpoint.target_url }}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<div class=\"events\">\n\t\t\t\t\t\t\t\t\t<div class=\"tag\" *ngFor=\"let event of endpoint.events\">\n\t\t\t\t\t\t\t\t\t\t{{ event == '*' ? 'all events' : event }}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t</ul>\n\t\t\t\t</ng-container>\n\t\t\t</ng-container>\n\t\t</div>\n\t</section>\n</div>\n\n<div class=\"overlay\" *ngIf=\"showOverlay\" (click)=\"showOverlay = false; showEventDeliveriesStatusDropdown = false\"></div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-yaml';\nimport 'prismjs/components/prism-scss';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/plugins/line-numbers/prism-line-numbers';\nimport { PrismComponent } from './prism.component';\n\n@NgModule({\n\tdeclarations: [PrismComponent],\n\timports: [CommonModule],\n\texports: [PrismComponent]\n})\nexport class PrismModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ConvoyAppComponent } from './convoy-app.component';\nimport { PrismModule } from './prism/prism.module';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\n\n@NgModule({\n    declarations: [ConvoyAppComponent],\n    imports: [\n        CommonModule,\n        PrismModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n    ],\n    exports: [ConvoyAppComponent],\n})\nexport class ConvoyAppModule {}\n","/*\n * Public API Surface of convoy-app\n */\n\nexport * from './lib/convoy-app.service';\nexport * from './lib/convoy-app.component';\nexport * from './lib/convoy-app.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}