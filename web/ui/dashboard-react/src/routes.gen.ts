/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/__root'
import { Route as UserSettingsImport } from './app/user-settings'
import { Route as SignupImport } from './app/signup'
import { Route as LoginImport } from './app/login'
import { Route as GetStartedImport } from './app/get-started'
import { Route as ForgotPasswordImport } from './app/forgot-password'
import { Route as IndexImport } from './app/index'
import { Route as ProjectsIndexImport } from './app/projects/index'
import { Route as OrganisationsIndexImport } from './app/organisations/index'
import { Route as OrganisationsOrganisationIdIndexImport } from './app/organisations/$organisationId/index'
import { Route as OrganisationsOrganisationIdSettingsImport } from './app/organisations/$organisationId/settings'

// Create/Update Routes

const UserSettingsRoute = UserSettingsImport.update({
  id: '/user-settings',
  path: '/user-settings',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const GetStartedRoute = GetStartedImport.update({
  id: '/get-started',
  path: '/get-started',
  getParentRoute: () => rootRoute,
} as any)

const ForgotPasswordRoute = ForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIndexRoute = ProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const OrganisationsIndexRoute = OrganisationsIndexImport.update({
  id: '/organisations/',
  path: '/organisations/',
  getParentRoute: () => rootRoute,
} as any)

const OrganisationsOrganisationIdIndexRoute =
  OrganisationsOrganisationIdIndexImport.update({
    id: '/organisations/$organisationId/',
    path: '/organisations/$organisationId/',
    getParentRoute: () => rootRoute,
  } as any)

const OrganisationsOrganisationIdSettingsRoute =
  OrganisationsOrganisationIdSettingsImport.update({
    id: '/organisations/$organisationId/settings',
    path: '/organisations/$organisationId/settings',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/get-started': {
      id: '/get-started'
      path: '/get-started'
      fullPath: '/get-started'
      preLoaderRoute: typeof GetStartedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/user-settings': {
      id: '/user-settings'
      path: '/user-settings'
      fullPath: '/user-settings'
      preLoaderRoute: typeof UserSettingsImport
      parentRoute: typeof rootRoute
    }
    '/organisations/': {
      id: '/organisations/'
      path: '/organisations'
      fullPath: '/organisations'
      preLoaderRoute: typeof OrganisationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/organisations/$organisationId/settings': {
      id: '/organisations/$organisationId/settings'
      path: '/organisations/$organisationId/settings'
      fullPath: '/organisations/$organisationId/settings'
      preLoaderRoute: typeof OrganisationsOrganisationIdSettingsImport
      parentRoute: typeof rootRoute
    }
    '/organisations/$organisationId/': {
      id: '/organisations/$organisationId/'
      path: '/organisations/$organisationId'
      fullPath: '/organisations/$organisationId'
      preLoaderRoute: typeof OrganisationsOrganisationIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/get-started': typeof GetStartedRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/user-settings': typeof UserSettingsRoute
  '/organisations': typeof OrganisationsIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/organisations/$organisationId/settings': typeof OrganisationsOrganisationIdSettingsRoute
  '/organisations/$organisationId': typeof OrganisationsOrganisationIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/get-started': typeof GetStartedRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/user-settings': typeof UserSettingsRoute
  '/organisations': typeof OrganisationsIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/organisations/$organisationId/settings': typeof OrganisationsOrganisationIdSettingsRoute
  '/organisations/$organisationId': typeof OrganisationsOrganisationIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/get-started': typeof GetStartedRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/user-settings': typeof UserSettingsRoute
  '/organisations/': typeof OrganisationsIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/organisations/$organisationId/settings': typeof OrganisationsOrganisationIdSettingsRoute
  '/organisations/$organisationId/': typeof OrganisationsOrganisationIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/get-started'
    | '/login'
    | '/signup'
    | '/user-settings'
    | '/organisations'
    | '/projects'
    | '/organisations/$organisationId/settings'
    | '/organisations/$organisationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/get-started'
    | '/login'
    | '/signup'
    | '/user-settings'
    | '/organisations'
    | '/projects'
    | '/organisations/$organisationId/settings'
    | '/organisations/$organisationId'
  id:
    | '__root__'
    | '/'
    | '/forgot-password'
    | '/get-started'
    | '/login'
    | '/signup'
    | '/user-settings'
    | '/organisations/'
    | '/projects/'
    | '/organisations/$organisationId/settings'
    | '/organisations/$organisationId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  GetStartedRoute: typeof GetStartedRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  UserSettingsRoute: typeof UserSettingsRoute
  OrganisationsIndexRoute: typeof OrganisationsIndexRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  OrganisationsOrganisationIdSettingsRoute: typeof OrganisationsOrganisationIdSettingsRoute
  OrganisationsOrganisationIdIndexRoute: typeof OrganisationsOrganisationIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  GetStartedRoute: GetStartedRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  UserSettingsRoute: UserSettingsRoute,
  OrganisationsIndexRoute: OrganisationsIndexRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  OrganisationsOrganisationIdSettingsRoute:
    OrganisationsOrganisationIdSettingsRoute,
  OrganisationsOrganisationIdIndexRoute: OrganisationsOrganisationIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/forgot-password",
        "/get-started",
        "/login",
        "/signup",
        "/user-settings",
        "/organisations/",
        "/projects/",
        "/organisations/$organisationId/settings",
        "/organisations/$organisationId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/forgot-password": {
      "filePath": "forgot-password.tsx"
    },
    "/get-started": {
      "filePath": "get-started.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/user-settings": {
      "filePath": "user-settings.tsx"
    },
    "/organisations/": {
      "filePath": "organisations/index.tsx"
    },
    "/projects/": {
      "filePath": "projects/index.tsx"
    },
    "/organisations/$organisationId/settings": {
      "filePath": "organisations/$organisationId/settings.tsx"
    },
    "/organisations/$organisationId/": {
      "filePath": "organisations/$organisationId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
