// Code generated by MockGen. DO NOT EDIT.
// Source: event_delivery.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	convoy "github.com/frain-dev/convoy"
	models "github.com/frain-dev/convoy/server/models"
	mongopagination "github.com/gobeam/mongo-go-pagination"
	gomock "github.com/golang/mock/gomock"
)

// MockEventDeliveryRepository is a mock of EventDeliveryRepository interface.
type MockEventDeliveryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventDeliveryRepositoryMockRecorder
}

// MockEventDeliveryRepositoryMockRecorder is the mock recorder for MockEventDeliveryRepository.
type MockEventDeliveryRepositoryMockRecorder struct {
	mock *MockEventDeliveryRepository
}

// NewMockEventDeliveryRepository creates a new mock instance.
func NewMockEventDeliveryRepository(ctrl *gomock.Controller) *MockEventDeliveryRepository {
	mock := &MockEventDeliveryRepository{ctrl: ctrl}
	mock.recorder = &MockEventDeliveryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDeliveryRepository) EXPECT() *MockEventDeliveryRepositoryMockRecorder {
	return m.recorder
}

// CreateEventDelivery mocks base method.
func (m *MockEventDeliveryRepository) CreateEventDelivery(arg0 context.Context, arg1 *convoy.EventDelivery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventDelivery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventDelivery indicates an expected call of CreateEventDelivery.
func (mr *MockEventDeliveryRepositoryMockRecorder) CreateEventDelivery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventDelivery", reflect.TypeOf((*MockEventDeliveryRepository)(nil).CreateEventDelivery), arg0, arg1)
}

// FindEventDeliveriesByEventID mocks base method.
func (m *MockEventDeliveryRepository) FindEventDeliveriesByEventID(arg0 context.Context, arg1 string) ([]convoy.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventDeliveriesByEventID", arg0, arg1)
	ret0, _ := ret[0].([]convoy.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventDeliveriesByEventID indicates an expected call of FindEventDeliveriesByEventID.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindEventDeliveriesByEventID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventDeliveriesByEventID", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindEventDeliveriesByEventID), arg0, arg1)
}

// FindEventDeliveriesByIDs mocks base method.
func (m *MockEventDeliveryRepository) FindEventDeliveriesByIDs(arg0 context.Context, arg1 []string) ([]convoy.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventDeliveriesByIDs", arg0, arg1)
	ret0, _ := ret[0].([]convoy.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventDeliveriesByIDs indicates an expected call of FindEventDeliveriesByIDs.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindEventDeliveriesByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventDeliveriesByIDs", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindEventDeliveriesByIDs), arg0, arg1)
}

// FindEventDeliveryByID mocks base method.
func (m *MockEventDeliveryRepository) FindEventDeliveryByID(arg0 context.Context, arg1 string) (*convoy.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventDeliveryByID", arg0, arg1)
	ret0, _ := ret[0].(*convoy.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventDeliveryByID indicates an expected call of FindEventDeliveryByID.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindEventDeliveryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventDeliveryByID", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindEventDeliveryByID), arg0, arg1)
}

// LoadEventDeliveriesPaged mocks base method.
func (m *MockEventDeliveryRepository) LoadEventDeliveriesPaged(arg0 context.Context, arg1, arg2, arg3 string, arg4 []convoy.EventDeliveryStatus, arg5 models.SearchParams, arg6 models.Pageable) ([]convoy.EventDelivery, mongopagination.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEventDeliveriesPaged", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]convoy.EventDelivery)
	ret1, _ := ret[1].(mongopagination.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadEventDeliveriesPaged indicates an expected call of LoadEventDeliveriesPaged.
func (mr *MockEventDeliveryRepositoryMockRecorder) LoadEventDeliveriesPaged(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEventDeliveriesPaged", reflect.TypeOf((*MockEventDeliveryRepository)(nil).LoadEventDeliveriesPaged), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// UpdateEventDeliveryWithAttempt mocks base method.
func (m *MockEventDeliveryRepository) UpdateEventDeliveryWithAttempt(arg0 context.Context, arg1 convoy.EventDelivery, arg2 convoy.DeliveryAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventDeliveryWithAttempt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventDeliveryWithAttempt indicates an expected call of UpdateEventDeliveryWithAttempt.
func (mr *MockEventDeliveryRepositoryMockRecorder) UpdateEventDeliveryWithAttempt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventDeliveryWithAttempt", reflect.TypeOf((*MockEventDeliveryRepository)(nil).UpdateEventDeliveryWithAttempt), arg0, arg1, arg2)
}

// UpdateStatusOfEventDelivery mocks base method.
func (m *MockEventDeliveryRepository) UpdateStatusOfEventDelivery(arg0 context.Context, arg1 convoy.EventDelivery, arg2 convoy.EventDeliveryStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusOfEventDelivery", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusOfEventDelivery indicates an expected call of UpdateStatusOfEventDelivery.
func (mr *MockEventDeliveryRepositoryMockRecorder) UpdateStatusOfEventDelivery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusOfEventDelivery", reflect.TypeOf((*MockEventDeliveryRepository)(nil).UpdateStatusOfEventDelivery), arg0, arg1, arg2)
}
