// Code generated by MockGen. DO NOT EDIT.
// Source: datastore/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	json "encoding/json"
	reflect "reflect"
	time "time"

	datastore "github.com/frain-dev/convoy/datastore"
	gomock "github.com/golang/mock/gomock"
)

// MockAPIKeyRepository is a mock of APIKeyRepository interface.
type MockAPIKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyRepositoryMockRecorder
}

// MockAPIKeyRepositoryMockRecorder is the mock recorder for MockAPIKeyRepository.
type MockAPIKeyRepositoryMockRecorder struct {
	mock *MockAPIKeyRepository
}

// NewMockAPIKeyRepository creates a new mock instance.
func NewMockAPIKeyRepository(ctrl *gomock.Controller) *MockAPIKeyRepository {
	mock := &MockAPIKeyRepository{ctrl: ctrl}
	mock.recorder = &MockAPIKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyRepository) EXPECT() *MockAPIKeyRepositoryMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockAPIKeyRepository) CreateAPIKey(arg0 context.Context, arg1 *datastore.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockAPIKeyRepositoryMockRecorder) CreateAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockAPIKeyRepository)(nil).CreateAPIKey), arg0, arg1)
}

// FindAPIKeyByHash mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByHash(arg0 context.Context, arg1 string) (*datastore.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByHash", arg0, arg1)
	ret0, _ := ret[0].(*datastore.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByHash indicates an expected call of FindAPIKeyByHash.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByHash", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByHash), arg0, arg1)
}

// FindAPIKeyByID mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByID(arg0 context.Context, arg1 string) (*datastore.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByID indicates an expected call of FindAPIKeyByID.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByID", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByID), arg0, arg1)
}

// FindAPIKeyByMaskID mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByMaskID(arg0 context.Context, arg1 string) (*datastore.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByMaskID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByMaskID indicates an expected call of FindAPIKeyByMaskID.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByMaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByMaskID", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByMaskID), arg0, arg1)
}

// FindAPIKeyByProjectID mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByProjectID(arg0 context.Context, arg1 string) (*datastore.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByProjectID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByProjectID indicates an expected call of FindAPIKeyByProjectID.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByProjectID", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByProjectID), arg0, arg1)
}

// LoadAPIKeysPaged mocks base method.
func (m *MockAPIKeyRepository) LoadAPIKeysPaged(arg0 context.Context, arg1 *datastore.ApiKeyFilter, arg2 *datastore.Pageable) ([]datastore.APIKey, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAPIKeysPaged", arg0, arg1, arg2)
	ret0, _ := ret[0].([]datastore.APIKey)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadAPIKeysPaged indicates an expected call of LoadAPIKeysPaged.
func (mr *MockAPIKeyRepositoryMockRecorder) LoadAPIKeysPaged(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAPIKeysPaged", reflect.TypeOf((*MockAPIKeyRepository)(nil).LoadAPIKeysPaged), arg0, arg1, arg2)
}

// RevokeAPIKeys mocks base method.
func (m *MockAPIKeyRepository) RevokeAPIKeys(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAPIKeys", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAPIKeys indicates an expected call of RevokeAPIKeys.
func (mr *MockAPIKeyRepositoryMockRecorder) RevokeAPIKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAPIKeys", reflect.TypeOf((*MockAPIKeyRepository)(nil).RevokeAPIKeys), arg0, arg1)
}

// UpdateAPIKey mocks base method.
func (m *MockAPIKeyRepository) UpdateAPIKey(arg0 context.Context, arg1 *datastore.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockAPIKeyRepositoryMockRecorder) UpdateAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockAPIKeyRepository)(nil).UpdateAPIKey), arg0, arg1)
}

// MockEventDeliveryRepository is a mock of EventDeliveryRepository interface.
type MockEventDeliveryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventDeliveryRepositoryMockRecorder
}

// MockEventDeliveryRepositoryMockRecorder is the mock recorder for MockEventDeliveryRepository.
type MockEventDeliveryRepositoryMockRecorder struct {
	mock *MockEventDeliveryRepository
}

// NewMockEventDeliveryRepository creates a new mock instance.
func NewMockEventDeliveryRepository(ctrl *gomock.Controller) *MockEventDeliveryRepository {
	mock := &MockEventDeliveryRepository{ctrl: ctrl}
	mock.recorder = &MockEventDeliveryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDeliveryRepository) EXPECT() *MockEventDeliveryRepositoryMockRecorder {
	return m.recorder
}

// CountDeliveriesByStatus mocks base method.
func (m *MockEventDeliveryRepository) CountDeliveriesByStatus(ctx context.Context, projectID string, status datastore.EventDeliveryStatus, params datastore.SearchParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDeliveriesByStatus", ctx, projectID, status, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDeliveriesByStatus indicates an expected call of CountDeliveriesByStatus.
func (mr *MockEventDeliveryRepositoryMockRecorder) CountDeliveriesByStatus(ctx, projectID, status, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDeliveriesByStatus", reflect.TypeOf((*MockEventDeliveryRepository)(nil).CountDeliveriesByStatus), ctx, projectID, status, params)
}

// CountEventDeliveries mocks base method.
func (m *MockEventDeliveryRepository) CountEventDeliveries(ctx context.Context, projectID string, endpointIDs []string, eventID string, status []datastore.EventDeliveryStatus, params datastore.SearchParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEventDeliveries", ctx, projectID, endpointIDs, eventID, status, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEventDeliveries indicates an expected call of CountEventDeliveries.
func (mr *MockEventDeliveryRepositoryMockRecorder) CountEventDeliveries(ctx, projectID, endpointIDs, eventID, status, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEventDeliveries", reflect.TypeOf((*MockEventDeliveryRepository)(nil).CountEventDeliveries), ctx, projectID, endpointIDs, eventID, status, params)
}

// CreateEventDelivery mocks base method.
func (m *MockEventDeliveryRepository) CreateEventDelivery(arg0 context.Context, arg1 *datastore.EventDelivery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventDelivery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventDelivery indicates an expected call of CreateEventDelivery.
func (mr *MockEventDeliveryRepositoryMockRecorder) CreateEventDelivery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventDelivery", reflect.TypeOf((*MockEventDeliveryRepository)(nil).CreateEventDelivery), arg0, arg1)
}

// DeleteProjectEventDeliveries mocks base method.
func (m *MockEventDeliveryRepository) DeleteProjectEventDeliveries(ctx context.Context, projectID string, filter *datastore.EventDeliveryFilter, hardDelete bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectEventDeliveries", ctx, projectID, filter, hardDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectEventDeliveries indicates an expected call of DeleteProjectEventDeliveries.
func (mr *MockEventDeliveryRepositoryMockRecorder) DeleteProjectEventDeliveries(ctx, projectID, filter, hardDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectEventDeliveries", reflect.TypeOf((*MockEventDeliveryRepository)(nil).DeleteProjectEventDeliveries), ctx, projectID, filter, hardDelete)
}

// FindDiscardedEventDeliveries mocks base method.
func (m *MockEventDeliveryRepository) FindDiscardedEventDeliveries(ctx context.Context, projectID, deviceId string, params datastore.SearchParams) ([]datastore.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDiscardedEventDeliveries", ctx, projectID, deviceId, params)
	ret0, _ := ret[0].([]datastore.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDiscardedEventDeliveries indicates an expected call of FindDiscardedEventDeliveries.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindDiscardedEventDeliveries(ctx, projectID, deviceId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDiscardedEventDeliveries", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindDiscardedEventDeliveries), ctx, projectID, deviceId, params)
}

// FindEventDeliveriesByEventID mocks base method.
func (m *MockEventDeliveryRepository) FindEventDeliveriesByEventID(ctx context.Context, projectID, id string) ([]datastore.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventDeliveriesByEventID", ctx, projectID, id)
	ret0, _ := ret[0].([]datastore.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventDeliveriesByEventID indicates an expected call of FindEventDeliveriesByEventID.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindEventDeliveriesByEventID(ctx, projectID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventDeliveriesByEventID", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindEventDeliveriesByEventID), ctx, projectID, id)
}

// FindEventDeliveriesByIDs mocks base method.
func (m *MockEventDeliveryRepository) FindEventDeliveriesByIDs(ctx context.Context, projectID string, ids []string) ([]datastore.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventDeliveriesByIDs", ctx, projectID, ids)
	ret0, _ := ret[0].([]datastore.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventDeliveriesByIDs indicates an expected call of FindEventDeliveriesByIDs.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindEventDeliveriesByIDs(ctx, projectID, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventDeliveriesByIDs", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindEventDeliveriesByIDs), ctx, projectID, ids)
}

// FindEventDeliveryByID mocks base method.
func (m *MockEventDeliveryRepository) FindEventDeliveryByID(ctx context.Context, projectID, id string) (*datastore.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventDeliveryByID", ctx, projectID, id)
	ret0, _ := ret[0].(*datastore.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventDeliveryByID indicates an expected call of FindEventDeliveryByID.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindEventDeliveryByID(ctx, projectID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventDeliveryByID", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindEventDeliveryByID), ctx, projectID, id)
}

// LoadEventDeliveriesIntervals mocks base method.
func (m *MockEventDeliveryRepository) LoadEventDeliveriesIntervals(ctx context.Context, projectID string, params datastore.SearchParams, period datastore.Period, interval int) ([]datastore.EventInterval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEventDeliveriesIntervals", ctx, projectID, params, period, interval)
	ret0, _ := ret[0].([]datastore.EventInterval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadEventDeliveriesIntervals indicates an expected call of LoadEventDeliveriesIntervals.
func (mr *MockEventDeliveryRepositoryMockRecorder) LoadEventDeliveriesIntervals(ctx, projectID, params, period, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEventDeliveriesIntervals", reflect.TypeOf((*MockEventDeliveryRepository)(nil).LoadEventDeliveriesIntervals), ctx, projectID, params, period, interval)
}

// LoadEventDeliveriesPaged mocks base method.
func (m *MockEventDeliveryRepository) LoadEventDeliveriesPaged(ctx context.Context, projectID string, endpointIDs []string, eventID string, status []datastore.EventDeliveryStatus, params datastore.SearchParams, pageable datastore.Pageable) ([]datastore.EventDelivery, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEventDeliveriesPaged", ctx, projectID, endpointIDs, eventID, status, params, pageable)
	ret0, _ := ret[0].([]datastore.EventDelivery)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadEventDeliveriesPaged indicates an expected call of LoadEventDeliveriesPaged.
func (mr *MockEventDeliveryRepositoryMockRecorder) LoadEventDeliveriesPaged(ctx, projectID, endpointIDs, eventID, status, params, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEventDeliveriesPaged", reflect.TypeOf((*MockEventDeliveryRepository)(nil).LoadEventDeliveriesPaged), ctx, projectID, endpointIDs, eventID, status, params, pageable)
}

// UpdateEventDeliveryWithAttempt mocks base method.
func (m *MockEventDeliveryRepository) UpdateEventDeliveryWithAttempt(ctx context.Context, projectID string, eventDelivery datastore.EventDelivery, attempt datastore.DeliveryAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventDeliveryWithAttempt", ctx, projectID, eventDelivery, attempt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventDeliveryWithAttempt indicates an expected call of UpdateEventDeliveryWithAttempt.
func (mr *MockEventDeliveryRepositoryMockRecorder) UpdateEventDeliveryWithAttempt(ctx, projectID, eventDelivery, attempt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventDeliveryWithAttempt", reflect.TypeOf((*MockEventDeliveryRepository)(nil).UpdateEventDeliveryWithAttempt), ctx, projectID, eventDelivery, attempt)
}

// UpdateStatusOfEventDeliveries mocks base method.
func (m *MockEventDeliveryRepository) UpdateStatusOfEventDeliveries(ctx context.Context, projectID string, ids []string, status datastore.EventDeliveryStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusOfEventDeliveries", ctx, projectID, ids, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusOfEventDeliveries indicates an expected call of UpdateStatusOfEventDeliveries.
func (mr *MockEventDeliveryRepositoryMockRecorder) UpdateStatusOfEventDeliveries(ctx, projectID, ids, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusOfEventDeliveries", reflect.TypeOf((*MockEventDeliveryRepository)(nil).UpdateStatusOfEventDeliveries), ctx, projectID, ids, status)
}

// UpdateStatusOfEventDelivery mocks base method.
func (m *MockEventDeliveryRepository) UpdateStatusOfEventDelivery(ctx context.Context, projectID string, eventDelivery datastore.EventDelivery, status datastore.EventDeliveryStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusOfEventDelivery", ctx, projectID, eventDelivery, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusOfEventDelivery indicates an expected call of UpdateStatusOfEventDelivery.
func (mr *MockEventDeliveryRepositoryMockRecorder) UpdateStatusOfEventDelivery(ctx, projectID, eventDelivery, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusOfEventDelivery", reflect.TypeOf((*MockEventDeliveryRepository)(nil).UpdateStatusOfEventDelivery), ctx, projectID, eventDelivery, status)
}

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// CountEvents mocks base method.
func (m *MockEventRepository) CountEvents(ctx context.Context, projectID string, f *datastore.Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEvents", ctx, projectID, f)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEvents indicates an expected call of CountEvents.
func (mr *MockEventRepositoryMockRecorder) CountEvents(ctx, projectID, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEvents", reflect.TypeOf((*MockEventRepository)(nil).CountEvents), ctx, projectID, f)
}

// CountProjectMessages mocks base method.
func (m *MockEventRepository) CountProjectMessages(ctx context.Context, projectID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProjectMessages", ctx, projectID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProjectMessages indicates an expected call of CountProjectMessages.
func (mr *MockEventRepositoryMockRecorder) CountProjectMessages(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProjectMessages", reflect.TypeOf((*MockEventRepository)(nil).CountProjectMessages), ctx, projectID)
}

// CreateEvent mocks base method.
func (m *MockEventRepository) CreateEvent(arg0 context.Context, arg1 *datastore.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepositoryMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepository)(nil).CreateEvent), arg0, arg1)
}

// DeleteProjectEvents mocks base method.
func (m *MockEventRepository) DeleteProjectEvents(ctx context.Context, projectID string, f *datastore.EventFilter, hardDelete bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectEvents", ctx, projectID, f, hardDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectEvents indicates an expected call of DeleteProjectEvents.
func (mr *MockEventRepositoryMockRecorder) DeleteProjectEvents(ctx, projectID, f, hardDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectEvents", reflect.TypeOf((*MockEventRepository)(nil).DeleteProjectEvents), ctx, projectID, f, hardDelete)
}

// FindEventByID mocks base method.
func (m *MockEventRepository) FindEventByID(ctx context.Context, projectID, id string) (*datastore.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventByID", ctx, projectID, id)
	ret0, _ := ret[0].(*datastore.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventByID indicates an expected call of FindEventByID.
func (mr *MockEventRepositoryMockRecorder) FindEventByID(ctx, projectID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventByID", reflect.TypeOf((*MockEventRepository)(nil).FindEventByID), ctx, projectID, id)
}

// FindEventsByIDs mocks base method.
func (m *MockEventRepository) FindEventsByIDs(ctx context.Context, projectID string, ids []string) ([]datastore.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventsByIDs", ctx, projectID, ids)
	ret0, _ := ret[0].([]datastore.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventsByIDs indicates an expected call of FindEventsByIDs.
func (mr *MockEventRepositoryMockRecorder) FindEventsByIDs(ctx, projectID, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventsByIDs", reflect.TypeOf((*MockEventRepository)(nil).FindEventsByIDs), ctx, projectID, ids)
}

// LoadEventsPaged mocks base method.
func (m *MockEventRepository) LoadEventsPaged(ctx context.Context, projectID string, f *datastore.Filter) ([]datastore.Event, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEventsPaged", ctx, projectID, f)
	ret0, _ := ret[0].([]datastore.Event)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadEventsPaged indicates an expected call of LoadEventsPaged.
func (mr *MockEventRepositoryMockRecorder) LoadEventsPaged(ctx, projectID, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEventsPaged", reflect.TypeOf((*MockEventRepository)(nil).LoadEventsPaged), ctx, projectID, f)
}

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectRepository) CreateProject(arg0 context.Context, arg1 *datastore.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectRepositoryMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectRepository)(nil).CreateProject), arg0, arg1)
}

// DeleteProject mocks base method.
func (m *MockProjectRepository) DeleteProject(ctx context.Context, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectRepositoryMockRecorder) DeleteProject(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectRepository)(nil).DeleteProject), ctx, uid)
}

// FetchProjectByID mocks base method.
func (m *MockProjectRepository) FetchProjectByID(arg0 context.Context, arg1 string) (*datastore.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProjectByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProjectByID indicates an expected call of FetchProjectByID.
func (mr *MockProjectRepositoryMockRecorder) FetchProjectByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProjectByID", reflect.TypeOf((*MockProjectRepository)(nil).FetchProjectByID), arg0, arg1)
}

// FillProjectsStatistics mocks base method.
func (m *MockProjectRepository) FillProjectsStatistics(ctx context.Context, project *datastore.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillProjectsStatistics", ctx, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// FillProjectsStatistics indicates an expected call of FillProjectsStatistics.
func (mr *MockProjectRepositoryMockRecorder) FillProjectsStatistics(ctx, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillProjectsStatistics", reflect.TypeOf((*MockProjectRepository)(nil).FillProjectsStatistics), ctx, project)
}

// LoadProjects mocks base method.
func (m *MockProjectRepository) LoadProjects(arg0 context.Context, arg1 *datastore.ProjectFilter) ([]*datastore.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProjects", arg0, arg1)
	ret0, _ := ret[0].([]*datastore.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadProjects indicates an expected call of LoadProjects.
func (mr *MockProjectRepositoryMockRecorder) LoadProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProjects", reflect.TypeOf((*MockProjectRepository)(nil).LoadProjects), arg0, arg1)
}

// UpdateProject mocks base method.
func (m *MockProjectRepository) UpdateProject(arg0 context.Context, arg1 *datastore.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectRepositoryMockRecorder) UpdateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectRepository)(nil).UpdateProject), arg0, arg1)
}

// MockOrganisationRepository is a mock of OrganisationRepository interface.
type MockOrganisationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganisationRepositoryMockRecorder
}

// MockOrganisationRepositoryMockRecorder is the mock recorder for MockOrganisationRepository.
type MockOrganisationRepositoryMockRecorder struct {
	mock *MockOrganisationRepository
}

// NewMockOrganisationRepository creates a new mock instance.
func NewMockOrganisationRepository(ctrl *gomock.Controller) *MockOrganisationRepository {
	mock := &MockOrganisationRepository{ctrl: ctrl}
	mock.recorder = &MockOrganisationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganisationRepository) EXPECT() *MockOrganisationRepositoryMockRecorder {
	return m.recorder
}

// CreateOrganisation mocks base method.
func (m *MockOrganisationRepository) CreateOrganisation(arg0 context.Context, arg1 *datastore.Organisation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganisation indicates an expected call of CreateOrganisation.
func (mr *MockOrganisationRepositoryMockRecorder) CreateOrganisation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisation", reflect.TypeOf((*MockOrganisationRepository)(nil).CreateOrganisation), arg0, arg1)
}

// DeleteOrganisation mocks base method.
func (m *MockOrganisationRepository) DeleteOrganisation(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganisation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganisation indicates an expected call of DeleteOrganisation.
func (mr *MockOrganisationRepositoryMockRecorder) DeleteOrganisation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganisation", reflect.TypeOf((*MockOrganisationRepository)(nil).DeleteOrganisation), arg0, arg1)
}

// FetchOrganisationByAssignedDomain mocks base method.
func (m *MockOrganisationRepository) FetchOrganisationByAssignedDomain(arg0 context.Context, arg1 string) (*datastore.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationByAssignedDomain", arg0, arg1)
	ret0, _ := ret[0].(*datastore.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationByAssignedDomain indicates an expected call of FetchOrganisationByAssignedDomain.
func (mr *MockOrganisationRepositoryMockRecorder) FetchOrganisationByAssignedDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationByAssignedDomain", reflect.TypeOf((*MockOrganisationRepository)(nil).FetchOrganisationByAssignedDomain), arg0, arg1)
}

// FetchOrganisationByCustomDomain mocks base method.
func (m *MockOrganisationRepository) FetchOrganisationByCustomDomain(arg0 context.Context, arg1 string) (*datastore.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationByCustomDomain", arg0, arg1)
	ret0, _ := ret[0].(*datastore.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationByCustomDomain indicates an expected call of FetchOrganisationByCustomDomain.
func (mr *MockOrganisationRepositoryMockRecorder) FetchOrganisationByCustomDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationByCustomDomain", reflect.TypeOf((*MockOrganisationRepository)(nil).FetchOrganisationByCustomDomain), arg0, arg1)
}

// FetchOrganisationByID mocks base method.
func (m *MockOrganisationRepository) FetchOrganisationByID(arg0 context.Context, arg1 string) (*datastore.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationByID indicates an expected call of FetchOrganisationByID.
func (mr *MockOrganisationRepositoryMockRecorder) FetchOrganisationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationByID", reflect.TypeOf((*MockOrganisationRepository)(nil).FetchOrganisationByID), arg0, arg1)
}

// LoadOrganisationsPaged mocks base method.
func (m *MockOrganisationRepository) LoadOrganisationsPaged(arg0 context.Context, arg1 datastore.Pageable) ([]datastore.Organisation, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrganisationsPaged", arg0, arg1)
	ret0, _ := ret[0].([]datastore.Organisation)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadOrganisationsPaged indicates an expected call of LoadOrganisationsPaged.
func (mr *MockOrganisationRepositoryMockRecorder) LoadOrganisationsPaged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrganisationsPaged", reflect.TypeOf((*MockOrganisationRepository)(nil).LoadOrganisationsPaged), arg0, arg1)
}

// UpdateOrganisation mocks base method.
func (m *MockOrganisationRepository) UpdateOrganisation(arg0 context.Context, arg1 *datastore.Organisation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganisation indicates an expected call of UpdateOrganisation.
func (mr *MockOrganisationRepositoryMockRecorder) UpdateOrganisation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisation", reflect.TypeOf((*MockOrganisationRepository)(nil).UpdateOrganisation), arg0, arg1)
}

// MockOrganisationInviteRepository is a mock of OrganisationInviteRepository interface.
type MockOrganisationInviteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganisationInviteRepositoryMockRecorder
}

// MockOrganisationInviteRepositoryMockRecorder is the mock recorder for MockOrganisationInviteRepository.
type MockOrganisationInviteRepositoryMockRecorder struct {
	mock *MockOrganisationInviteRepository
}

// NewMockOrganisationInviteRepository creates a new mock instance.
func NewMockOrganisationInviteRepository(ctrl *gomock.Controller) *MockOrganisationInviteRepository {
	mock := &MockOrganisationInviteRepository{ctrl: ctrl}
	mock.recorder = &MockOrganisationInviteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganisationInviteRepository) EXPECT() *MockOrganisationInviteRepositoryMockRecorder {
	return m.recorder
}

// CreateOrganisationInvite mocks base method.
func (m *MockOrganisationInviteRepository) CreateOrganisationInvite(ctx context.Context, iv *datastore.OrganisationInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisationInvite", ctx, iv)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganisationInvite indicates an expected call of CreateOrganisationInvite.
func (mr *MockOrganisationInviteRepositoryMockRecorder) CreateOrganisationInvite(ctx, iv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisationInvite", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).CreateOrganisationInvite), ctx, iv)
}

// DeleteOrganisationInvite mocks base method.
func (m *MockOrganisationInviteRepository) DeleteOrganisationInvite(ctx context.Context, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganisationInvite", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganisationInvite indicates an expected call of DeleteOrganisationInvite.
func (mr *MockOrganisationInviteRepositoryMockRecorder) DeleteOrganisationInvite(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganisationInvite", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).DeleteOrganisationInvite), ctx, uid)
}

// FetchOrganisationInviteByID mocks base method.
func (m *MockOrganisationInviteRepository) FetchOrganisationInviteByID(ctx context.Context, uid string) (*datastore.OrganisationInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationInviteByID", ctx, uid)
	ret0, _ := ret[0].(*datastore.OrganisationInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationInviteByID indicates an expected call of FetchOrganisationInviteByID.
func (mr *MockOrganisationInviteRepositoryMockRecorder) FetchOrganisationInviteByID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationInviteByID", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).FetchOrganisationInviteByID), ctx, uid)
}

// FetchOrganisationInviteByToken mocks base method.
func (m *MockOrganisationInviteRepository) FetchOrganisationInviteByToken(ctx context.Context, token string) (*datastore.OrganisationInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationInviteByToken", ctx, token)
	ret0, _ := ret[0].(*datastore.OrganisationInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationInviteByToken indicates an expected call of FetchOrganisationInviteByToken.
func (mr *MockOrganisationInviteRepositoryMockRecorder) FetchOrganisationInviteByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationInviteByToken", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).FetchOrganisationInviteByToken), ctx, token)
}

// LoadOrganisationsInvitesPaged mocks base method.
func (m *MockOrganisationInviteRepository) LoadOrganisationsInvitesPaged(ctx context.Context, orgID string, inviteStatus datastore.InviteStatus, pageable datastore.Pageable) ([]datastore.OrganisationInvite, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrganisationsInvitesPaged", ctx, orgID, inviteStatus, pageable)
	ret0, _ := ret[0].([]datastore.OrganisationInvite)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadOrganisationsInvitesPaged indicates an expected call of LoadOrganisationsInvitesPaged.
func (mr *MockOrganisationInviteRepositoryMockRecorder) LoadOrganisationsInvitesPaged(ctx, orgID, inviteStatus, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrganisationsInvitesPaged", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).LoadOrganisationsInvitesPaged), ctx, orgID, inviteStatus, pageable)
}

// UpdateOrganisationInvite mocks base method.
func (m *MockOrganisationInviteRepository) UpdateOrganisationInvite(ctx context.Context, iv *datastore.OrganisationInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisationInvite", ctx, iv)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganisationInvite indicates an expected call of UpdateOrganisationInvite.
func (mr *MockOrganisationInviteRepositoryMockRecorder) UpdateOrganisationInvite(ctx, iv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisationInvite", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).UpdateOrganisationInvite), ctx, iv)
}

// MockOrganisationMemberRepository is a mock of OrganisationMemberRepository interface.
type MockOrganisationMemberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganisationMemberRepositoryMockRecorder
}

// MockOrganisationMemberRepositoryMockRecorder is the mock recorder for MockOrganisationMemberRepository.
type MockOrganisationMemberRepositoryMockRecorder struct {
	mock *MockOrganisationMemberRepository
}

// NewMockOrganisationMemberRepository creates a new mock instance.
func NewMockOrganisationMemberRepository(ctrl *gomock.Controller) *MockOrganisationMemberRepository {
	mock := &MockOrganisationMemberRepository{ctrl: ctrl}
	mock.recorder = &MockOrganisationMemberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganisationMemberRepository) EXPECT() *MockOrganisationMemberRepositoryMockRecorder {
	return m.recorder
}

// CreateOrganisationMember mocks base method.
func (m *MockOrganisationMemberRepository) CreateOrganisationMember(ctx context.Context, member *datastore.OrganisationMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisationMember", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganisationMember indicates an expected call of CreateOrganisationMember.
func (mr *MockOrganisationMemberRepositoryMockRecorder) CreateOrganisationMember(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisationMember", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).CreateOrganisationMember), ctx, member)
}

// DeleteOrganisationMember mocks base method.
func (m *MockOrganisationMemberRepository) DeleteOrganisationMember(ctx context.Context, memberID, orgID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganisationMember", ctx, memberID, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganisationMember indicates an expected call of DeleteOrganisationMember.
func (mr *MockOrganisationMemberRepositoryMockRecorder) DeleteOrganisationMember(ctx, memberID, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganisationMember", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).DeleteOrganisationMember), ctx, memberID, orgID)
}

// FetchOrganisationMemberByID mocks base method.
func (m *MockOrganisationMemberRepository) FetchOrganisationMemberByID(ctx context.Context, memberID, organisationID string) (*datastore.OrganisationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationMemberByID", ctx, memberID, organisationID)
	ret0, _ := ret[0].(*datastore.OrganisationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationMemberByID indicates an expected call of FetchOrganisationMemberByID.
func (mr *MockOrganisationMemberRepositoryMockRecorder) FetchOrganisationMemberByID(ctx, memberID, organisationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationMemberByID", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).FetchOrganisationMemberByID), ctx, memberID, organisationID)
}

// FetchOrganisationMemberByUserID mocks base method.
func (m *MockOrganisationMemberRepository) FetchOrganisationMemberByUserID(ctx context.Context, userID, organisationID string) (*datastore.OrganisationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationMemberByUserID", ctx, userID, organisationID)
	ret0, _ := ret[0].(*datastore.OrganisationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationMemberByUserID indicates an expected call of FetchOrganisationMemberByUserID.
func (mr *MockOrganisationMemberRepositoryMockRecorder) FetchOrganisationMemberByUserID(ctx, userID, organisationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationMemberByUserID", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).FetchOrganisationMemberByUserID), ctx, userID, organisationID)
}

// FindUserProjects mocks base method.
func (m *MockOrganisationMemberRepository) FindUserProjects(ctx context.Context, userID string) ([]datastore.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserProjects", ctx, userID)
	ret0, _ := ret[0].([]datastore.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserProjects indicates an expected call of FindUserProjects.
func (mr *MockOrganisationMemberRepositoryMockRecorder) FindUserProjects(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserProjects", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).FindUserProjects), ctx, userID)
}

// LoadOrganisationMembersPaged mocks base method.
func (m *MockOrganisationMemberRepository) LoadOrganisationMembersPaged(ctx context.Context, organisationID, userID string, pageable datastore.Pageable) ([]*datastore.OrganisationMember, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrganisationMembersPaged", ctx, organisationID, userID, pageable)
	ret0, _ := ret[0].([]*datastore.OrganisationMember)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadOrganisationMembersPaged indicates an expected call of LoadOrganisationMembersPaged.
func (mr *MockOrganisationMemberRepositoryMockRecorder) LoadOrganisationMembersPaged(ctx, organisationID, userID, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrganisationMembersPaged", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).LoadOrganisationMembersPaged), ctx, organisationID, userID, pageable)
}

// LoadUserOrganisationsPaged mocks base method.
func (m *MockOrganisationMemberRepository) LoadUserOrganisationsPaged(ctx context.Context, userID string, pageable datastore.Pageable) ([]datastore.Organisation, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserOrganisationsPaged", ctx, userID, pageable)
	ret0, _ := ret[0].([]datastore.Organisation)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadUserOrganisationsPaged indicates an expected call of LoadUserOrganisationsPaged.
func (mr *MockOrganisationMemberRepositoryMockRecorder) LoadUserOrganisationsPaged(ctx, userID, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserOrganisationsPaged", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).LoadUserOrganisationsPaged), ctx, userID, pageable)
}

// UpdateOrganisationMember mocks base method.
func (m *MockOrganisationMemberRepository) UpdateOrganisationMember(ctx context.Context, member *datastore.OrganisationMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisationMember", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganisationMember indicates an expected call of UpdateOrganisationMember.
func (mr *MockOrganisationMemberRepositoryMockRecorder) UpdateOrganisationMember(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisationMember", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).UpdateOrganisationMember), ctx, member)
}

// MockEndpointRepository is a mock of EndpointRepository interface.
type MockEndpointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointRepositoryMockRecorder
}

// MockEndpointRepositoryMockRecorder is the mock recorder for MockEndpointRepository.
type MockEndpointRepositoryMockRecorder struct {
	mock *MockEndpointRepository
}

// NewMockEndpointRepository creates a new mock instance.
func NewMockEndpointRepository(ctrl *gomock.Controller) *MockEndpointRepository {
	mock := &MockEndpointRepository{ctrl: ctrl}
	mock.recorder = &MockEndpointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointRepository) EXPECT() *MockEndpointRepositoryMockRecorder {
	return m.recorder
}

// CountProjectEndpoints mocks base method.
func (m *MockEndpointRepository) CountProjectEndpoints(ctx context.Context, projectID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProjectEndpoints", ctx, projectID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProjectEndpoints indicates an expected call of CountProjectEndpoints.
func (mr *MockEndpointRepositoryMockRecorder) CountProjectEndpoints(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProjectEndpoints", reflect.TypeOf((*MockEndpointRepository)(nil).CountProjectEndpoints), ctx, projectID)
}

// CreateEndpoint mocks base method.
func (m *MockEndpointRepository) CreateEndpoint(ctx context.Context, endpoint *datastore.Endpoint, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpoint", ctx, endpoint, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEndpoint indicates an expected call of CreateEndpoint.
func (mr *MockEndpointRepositoryMockRecorder) CreateEndpoint(ctx, endpoint, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpoint", reflect.TypeOf((*MockEndpointRepository)(nil).CreateEndpoint), ctx, endpoint, projectID)
}

// DeleteEndpoint mocks base method.
func (m *MockEndpointRepository) DeleteEndpoint(ctx context.Context, endpoint *datastore.Endpoint, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoint", ctx, endpoint, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEndpoint indicates an expected call of DeleteEndpoint.
func (mr *MockEndpointRepositoryMockRecorder) DeleteEndpoint(ctx, endpoint, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoint", reflect.TypeOf((*MockEndpointRepository)(nil).DeleteEndpoint), ctx, endpoint, projectID)
}

// DeleteSecret mocks base method.
func (m *MockEndpointRepository) DeleteSecret(ctx context.Context, endpoint *datastore.Endpoint, secretID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, endpoint, secretID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockEndpointRepositoryMockRecorder) DeleteSecret(ctx, endpoint, secretID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockEndpointRepository)(nil).DeleteSecret), ctx, endpoint, secretID, projectID)
}

// FindEndpointByID mocks base method.
func (m *MockEndpointRepository) FindEndpointByID(çtx context.Context, id, projectID string) (*datastore.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointByID", çtx, id, projectID)
	ret0, _ := ret[0].(*datastore.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointByID indicates an expected call of FindEndpointByID.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointByID(çtx, id, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointByID", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointByID), çtx, id, projectID)
}

// FindEndpointByTargetURL mocks base method.
func (m *MockEndpointRepository) FindEndpointByTargetURL(ctx context.Context, projectID, targetURL string) (*datastore.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointByTargetURL", ctx, projectID, targetURL)
	ret0, _ := ret[0].(*datastore.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointByTargetURL indicates an expected call of FindEndpointByTargetURL.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointByTargetURL(ctx, projectID, targetURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointByTargetURL", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointByTargetURL), ctx, projectID, targetURL)
}

// FindEndpointsByAppID mocks base method.
func (m *MockEndpointRepository) FindEndpointsByAppID(ctx context.Context, appID, projectID string) ([]datastore.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByAppID", ctx, appID, projectID)
	ret0, _ := ret[0].([]datastore.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByAppID indicates an expected call of FindEndpointsByAppID.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointsByAppID(ctx, appID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByAppID", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointsByAppID), ctx, appID, projectID)
}

// FindEndpointsByID mocks base method.
func (m *MockEndpointRepository) FindEndpointsByID(ctx context.Context, ids []string, projectID string) ([]datastore.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByID", ctx, ids, projectID)
	ret0, _ := ret[0].([]datastore.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByID indicates an expected call of FindEndpointsByID.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointsByID(ctx, ids, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByID", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointsByID), ctx, ids, projectID)
}

// FindEndpointsByOwnerID mocks base method.
func (m *MockEndpointRepository) FindEndpointsByOwnerID(ctx context.Context, projectID, ownerID string) ([]datastore.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByOwnerID", ctx, projectID, ownerID)
	ret0, _ := ret[0].([]datastore.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByOwnerID indicates an expected call of FindEndpointsByOwnerID.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointsByOwnerID(ctx, projectID, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByOwnerID", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointsByOwnerID), ctx, projectID, ownerID)
}

// LoadEndpointsPaged mocks base method.
func (m *MockEndpointRepository) LoadEndpointsPaged(ctx context.Context, projectID string, filter *datastore.Filter, pageable datastore.Pageable) ([]datastore.Endpoint, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEndpointsPaged", ctx, projectID, filter, pageable)
	ret0, _ := ret[0].([]datastore.Endpoint)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadEndpointsPaged indicates an expected call of LoadEndpointsPaged.
func (mr *MockEndpointRepositoryMockRecorder) LoadEndpointsPaged(ctx, projectID, filter, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEndpointsPaged", reflect.TypeOf((*MockEndpointRepository)(nil).LoadEndpointsPaged), ctx, projectID, filter, pageable)
}

// UpdateEndpoint mocks base method.
func (m *MockEndpointRepository) UpdateEndpoint(ctx context.Context, endpoint *datastore.Endpoint, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpoint", ctx, endpoint, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEndpoint indicates an expected call of UpdateEndpoint.
func (mr *MockEndpointRepositoryMockRecorder) UpdateEndpoint(ctx, endpoint, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoint", reflect.TypeOf((*MockEndpointRepository)(nil).UpdateEndpoint), ctx, endpoint, projectID)
}

// UpdateEndpointStatus mocks base method.
func (m *MockEndpointRepository) UpdateEndpointStatus(ctx context.Context, projectID, endpointID string, status datastore.EndpointStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointStatus", ctx, projectID, endpointID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEndpointStatus indicates an expected call of UpdateEndpointStatus.
func (mr *MockEndpointRepositoryMockRecorder) UpdateEndpointStatus(ctx, projectID, endpointID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointStatus", reflect.TypeOf((*MockEndpointRepository)(nil).UpdateEndpointStatus), ctx, projectID, endpointID, status)
}

// UpdateSecrets mocks base method.
func (m *MockEndpointRepository) UpdateSecrets(ctx context.Context, endpointID, projectID string, secrets datastore.Secrets) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecrets", ctx, endpointID, projectID, secrets)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecrets indicates an expected call of UpdateSecrets.
func (mr *MockEndpointRepositoryMockRecorder) UpdateSecrets(ctx, endpointID, projectID, secrets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecrets", reflect.TypeOf((*MockEndpointRepository)(nil).UpdateSecrets), ctx, endpointID, projectID, secrets)
}

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// CountEndpointSubscriptions mocks base method.
func (m *MockSubscriptionRepository) CountEndpointSubscriptions(ctx context.Context, projectID, endpointID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEndpointSubscriptions", ctx, projectID, endpointID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEndpointSubscriptions indicates an expected call of CountEndpointSubscriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) CountEndpointSubscriptions(ctx, projectID, endpointID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEndpointSubscriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).CountEndpointSubscriptions), ctx, projectID, endpointID)
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionRepository) CreateSubscription(arg0 context.Context, arg1 string, arg2 *datastore.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) CreateSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).CreateSubscription), arg0, arg1, arg2)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionRepository) DeleteSubscription(ctx context.Context, projectID string, subscription *datastore.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, projectID, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteSubscription(ctx, projectID, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteSubscription), ctx, projectID, subscription)
}

// FindCLISubscriptions mocks base method.
func (m *MockSubscriptionRepository) FindCLISubscriptions(ctx context.Context, projectID string) ([]datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCLISubscriptions", ctx, projectID)
	ret0, _ := ret[0].([]datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCLISubscriptions indicates an expected call of FindCLISubscriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) FindCLISubscriptions(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCLISubscriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindCLISubscriptions), ctx, projectID)
}

// FindSubscriptionByDeviceID mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionByDeviceID(ctx context.Context, projectId, deviceID string, subscriptionType datastore.SubscriptionType) (*datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionByDeviceID", ctx, projectId, deviceID, subscriptionType)
	ret0, _ := ret[0].(*datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionByDeviceID indicates an expected call of FindSubscriptionByDeviceID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionByDeviceID(ctx, projectId, deviceID, subscriptionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionByDeviceID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionByDeviceID), ctx, projectId, deviceID, subscriptionType)
}

// FindSubscriptionByID mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionByID(ctx context.Context, projectID, id string) (*datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionByID", ctx, projectID, id)
	ret0, _ := ret[0].(*datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionByID indicates an expected call of FindSubscriptionByID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionByID(ctx, projectID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionByID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionByID), ctx, projectID, id)
}

// FindSubscriptionsByEndpointID mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionsByEndpointID(ctx context.Context, projectId, endpointID string) ([]datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionsByEndpointID", ctx, projectId, endpointID)
	ret0, _ := ret[0].([]datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionsByEndpointID indicates an expected call of FindSubscriptionsByEndpointID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionsByEndpointID(ctx, projectId, endpointID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionsByEndpointID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionsByEndpointID), ctx, projectId, endpointID)
}

// FindSubscriptionsBySourceID mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionsBySourceID(ctx context.Context, projectID, sourceID string) ([]datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionsBySourceID", ctx, projectID, sourceID)
	ret0, _ := ret[0].([]datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionsBySourceID indicates an expected call of FindSubscriptionsBySourceID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionsBySourceID(ctx, projectID, sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionsBySourceID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionsBySourceID), ctx, projectID, sourceID)
}

// LoadSubscriptionsPaged mocks base method.
func (m *MockSubscriptionRepository) LoadSubscriptionsPaged(ctx context.Context, projectID string, filter *datastore.FilterBy, pageable datastore.Pageable) ([]datastore.Subscription, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSubscriptionsPaged", ctx, projectID, filter, pageable)
	ret0, _ := ret[0].([]datastore.Subscription)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadSubscriptionsPaged indicates an expected call of LoadSubscriptionsPaged.
func (mr *MockSubscriptionRepositoryMockRecorder) LoadSubscriptionsPaged(ctx, projectID, filter, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSubscriptionsPaged", reflect.TypeOf((*MockSubscriptionRepository)(nil).LoadSubscriptionsPaged), ctx, projectID, filter, pageable)
}

// TestSubscriptionFilter mocks base method.
func (m *MockSubscriptionRepository) TestSubscriptionFilter(ctx context.Context, payload, filter interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestSubscriptionFilter", ctx, payload, filter)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestSubscriptionFilter indicates an expected call of TestSubscriptionFilter.
func (mr *MockSubscriptionRepositoryMockRecorder) TestSubscriptionFilter(ctx, payload, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestSubscriptionFilter", reflect.TypeOf((*MockSubscriptionRepository)(nil).TestSubscriptionFilter), ctx, payload, filter)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionRepository) UpdateSubscription(ctx context.Context, projectID string, subscription *datastore.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, projectID, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) UpdateSubscription(ctx, projectID, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).UpdateSubscription), ctx, projectID, subscription)
}

// MockSourceRepository is a mock of SourceRepository interface.
type MockSourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSourceRepositoryMockRecorder
}

// MockSourceRepositoryMockRecorder is the mock recorder for MockSourceRepository.
type MockSourceRepositoryMockRecorder struct {
	mock *MockSourceRepository
}

// NewMockSourceRepository creates a new mock instance.
func NewMockSourceRepository(ctrl *gomock.Controller) *MockSourceRepository {
	mock := &MockSourceRepository{ctrl: ctrl}
	mock.recorder = &MockSourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceRepository) EXPECT() *MockSourceRepositoryMockRecorder {
	return m.recorder
}

// CreateSource mocks base method.
func (m *MockSourceRepository) CreateSource(arg0 context.Context, arg1 *datastore.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSource indicates an expected call of CreateSource.
func (mr *MockSourceRepositoryMockRecorder) CreateSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSource", reflect.TypeOf((*MockSourceRepository)(nil).CreateSource), arg0, arg1)
}

// DeleteSourceByID mocks base method.
func (m *MockSourceRepository) DeleteSourceByID(ctx context.Context, projectID, id, sourceVerifierID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceByID", ctx, projectID, id, sourceVerifierID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSourceByID indicates an expected call of DeleteSourceByID.
func (mr *MockSourceRepositoryMockRecorder) DeleteSourceByID(ctx, projectID, id, sourceVerifierID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceByID", reflect.TypeOf((*MockSourceRepository)(nil).DeleteSourceByID), ctx, projectID, id, sourceVerifierID)
}

// FindSourceByID mocks base method.
func (m *MockSourceRepository) FindSourceByID(ctx context.Context, projectID, id string) (*datastore.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSourceByID", ctx, projectID, id)
	ret0, _ := ret[0].(*datastore.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSourceByID indicates an expected call of FindSourceByID.
func (mr *MockSourceRepositoryMockRecorder) FindSourceByID(ctx, projectID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSourceByID", reflect.TypeOf((*MockSourceRepository)(nil).FindSourceByID), ctx, projectID, id)
}

// FindSourceByMaskID mocks base method.
func (m *MockSourceRepository) FindSourceByMaskID(ctx context.Context, maskID string) (*datastore.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSourceByMaskID", ctx, maskID)
	ret0, _ := ret[0].(*datastore.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSourceByMaskID indicates an expected call of FindSourceByMaskID.
func (mr *MockSourceRepositoryMockRecorder) FindSourceByMaskID(ctx, maskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSourceByMaskID", reflect.TypeOf((*MockSourceRepository)(nil).FindSourceByMaskID), ctx, maskID)
}

// FindSourceByName mocks base method.
func (m *MockSourceRepository) FindSourceByName(ctx context.Context, projectId, name string) (*datastore.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSourceByName", ctx, projectId, name)
	ret0, _ := ret[0].(*datastore.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSourceByName indicates an expected call of FindSourceByName.
func (mr *MockSourceRepositoryMockRecorder) FindSourceByName(ctx, projectId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSourceByName", reflect.TypeOf((*MockSourceRepository)(nil).FindSourceByName), ctx, projectId, name)
}

// LoadSourcesPaged mocks base method.
func (m *MockSourceRepository) LoadSourcesPaged(ctx context.Context, projectID string, filter *datastore.SourceFilter, pageable datastore.Pageable) ([]datastore.Source, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSourcesPaged", ctx, projectID, filter, pageable)
	ret0, _ := ret[0].([]datastore.Source)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadSourcesPaged indicates an expected call of LoadSourcesPaged.
func (mr *MockSourceRepositoryMockRecorder) LoadSourcesPaged(ctx, projectID, filter, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSourcesPaged", reflect.TypeOf((*MockSourceRepository)(nil).LoadSourcesPaged), ctx, projectID, filter, pageable)
}

// UpdateSource mocks base method.
func (m *MockSourceRepository) UpdateSource(ctx context.Context, projectID string, source *datastore.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSource", ctx, projectID, source)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSource indicates an expected call of UpdateSource.
func (mr *MockSourceRepositoryMockRecorder) UpdateSource(ctx, projectID, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSource", reflect.TypeOf((*MockSourceRepository)(nil).UpdateSource), ctx, projectID, source)
}

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockDeviceRepository) CreateDevice(ctx context.Context, device *datastore.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceRepositoryMockRecorder) CreateDevice(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceRepository)(nil).CreateDevice), ctx, device)
}

// DeleteDevice mocks base method.
func (m *MockDeviceRepository) DeleteDevice(ctx context.Context, uid, appID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, uid, appID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockDeviceRepositoryMockRecorder) DeleteDevice(ctx, uid, appID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockDeviceRepository)(nil).DeleteDevice), ctx, uid, appID, projectID)
}

// FetchDeviceByHostName mocks base method.
func (m *MockDeviceRepository) FetchDeviceByHostName(ctx context.Context, hostName, appID, projectID string) (*datastore.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDeviceByHostName", ctx, hostName, appID, projectID)
	ret0, _ := ret[0].(*datastore.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeviceByHostName indicates an expected call of FetchDeviceByHostName.
func (mr *MockDeviceRepositoryMockRecorder) FetchDeviceByHostName(ctx, hostName, appID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDeviceByHostName", reflect.TypeOf((*MockDeviceRepository)(nil).FetchDeviceByHostName), ctx, hostName, appID, projectID)
}

// FetchDeviceByID mocks base method.
func (m *MockDeviceRepository) FetchDeviceByID(ctx context.Context, uid, appID, projectID string) (*datastore.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDeviceByID", ctx, uid, appID, projectID)
	ret0, _ := ret[0].(*datastore.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeviceByID indicates an expected call of FetchDeviceByID.
func (mr *MockDeviceRepositoryMockRecorder) FetchDeviceByID(ctx, uid, appID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDeviceByID", reflect.TypeOf((*MockDeviceRepository)(nil).FetchDeviceByID), ctx, uid, appID, projectID)
}

// LoadDevicesPaged mocks base method.
func (m *MockDeviceRepository) LoadDevicesPaged(ctx context.Context, projectID string, filter *datastore.ApiKeyFilter, pageable datastore.Pageable) ([]datastore.Device, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDevicesPaged", ctx, projectID, filter, pageable)
	ret0, _ := ret[0].([]datastore.Device)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadDevicesPaged indicates an expected call of LoadDevicesPaged.
func (mr *MockDeviceRepositoryMockRecorder) LoadDevicesPaged(ctx, projectID, filter, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDevicesPaged", reflect.TypeOf((*MockDeviceRepository)(nil).LoadDevicesPaged), ctx, projectID, filter, pageable)
}

// UpdateDevice mocks base method.
func (m *MockDeviceRepository) UpdateDevice(ctx context.Context, device *datastore.Device, appID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, device, appID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockDeviceRepositoryMockRecorder) UpdateDevice(ctx, device, appID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockDeviceRepository)(nil).UpdateDevice), ctx, device, appID, projectID)
}

// UpdateDeviceLastSeen mocks base method.
func (m *MockDeviceRepository) UpdateDeviceLastSeen(ctx context.Context, device *datastore.Device, appID, projectID string, status datastore.DeviceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceLastSeen", ctx, device, appID, projectID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceLastSeen indicates an expected call of UpdateDeviceLastSeen.
func (mr *MockDeviceRepositoryMockRecorder) UpdateDeviceLastSeen(ctx, device, appID, projectID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceLastSeen", reflect.TypeOf((*MockDeviceRepository)(nil).UpdateDeviceLastSeen), ctx, device, appID, projectID, status)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(arg0 context.Context, arg1 *datastore.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), arg0, arg1)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepository) FindUserByEmail(arg0 context.Context, arg1 string) (*datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserByEmail), arg0, arg1)
}

// FindUserByEmailVerificationToken mocks base method.
func (m *MockUserRepository) FindUserByEmailVerificationToken(ctx context.Context, token string) (*datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmailVerificationToken", ctx, token)
	ret0, _ := ret[0].(*datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmailVerificationToken indicates an expected call of FindUserByEmailVerificationToken.
func (mr *MockUserRepositoryMockRecorder) FindUserByEmailVerificationToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmailVerificationToken", reflect.TypeOf((*MockUserRepository)(nil).FindUserByEmailVerificationToken), ctx, token)
}

// FindUserByID mocks base method.
func (m *MockUserRepository) FindUserByID(arg0 context.Context, arg1 string) (*datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserRepositoryMockRecorder) FindUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserRepository)(nil).FindUserByID), arg0, arg1)
}

// FindUserByToken mocks base method.
func (m *MockUserRepository) FindUserByToken(arg0 context.Context, arg1 string) (*datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByToken", arg0, arg1)
	ret0, _ := ret[0].(*datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByToken indicates an expected call of FindUserByToken.
func (mr *MockUserRepositoryMockRecorder) FindUserByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByToken", reflect.TypeOf((*MockUserRepository)(nil).FindUserByToken), arg0, arg1)
}

// LoadUsersPaged mocks base method.
func (m *MockUserRepository) LoadUsersPaged(arg0 context.Context, arg1 datastore.Pageable) ([]datastore.User, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUsersPaged", arg0, arg1)
	ret0, _ := ret[0].([]datastore.User)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadUsersPaged indicates an expected call of LoadUsersPaged.
func (mr *MockUserRepositoryMockRecorder) LoadUsersPaged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUsersPaged", reflect.TypeOf((*MockUserRepository)(nil).LoadUsersPaged), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *datastore.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}

// MockConfigurationRepository is a mock of ConfigurationRepository interface.
type MockConfigurationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationRepositoryMockRecorder
}

// MockConfigurationRepositoryMockRecorder is the mock recorder for MockConfigurationRepository.
type MockConfigurationRepositoryMockRecorder struct {
	mock *MockConfigurationRepository
}

// NewMockConfigurationRepository creates a new mock instance.
func NewMockConfigurationRepository(ctrl *gomock.Controller) *MockConfigurationRepository {
	mock := &MockConfigurationRepository{ctrl: ctrl}
	mock.recorder = &MockConfigurationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationRepository) EXPECT() *MockConfigurationRepositoryMockRecorder {
	return m.recorder
}

// CreateConfiguration mocks base method.
func (m *MockConfigurationRepository) CreateConfiguration(arg0 context.Context, arg1 *datastore.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConfiguration indicates an expected call of CreateConfiguration.
func (mr *MockConfigurationRepositoryMockRecorder) CreateConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguration", reflect.TypeOf((*MockConfigurationRepository)(nil).CreateConfiguration), arg0, arg1)
}

// LoadConfiguration mocks base method.
func (m *MockConfigurationRepository) LoadConfiguration(arg0 context.Context) (*datastore.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfiguration", arg0)
	ret0, _ := ret[0].(*datastore.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfiguration indicates an expected call of LoadConfiguration.
func (mr *MockConfigurationRepositoryMockRecorder) LoadConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfiguration", reflect.TypeOf((*MockConfigurationRepository)(nil).LoadConfiguration), arg0)
}

// UpdateConfiguration mocks base method.
func (m *MockConfigurationRepository) UpdateConfiguration(arg0 context.Context, arg1 *datastore.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration.
func (mr *MockConfigurationRepositoryMockRecorder) UpdateConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockConfigurationRepository)(nil).UpdateConfiguration), arg0, arg1)
}

// MockPortalLinkRepository is a mock of PortalLinkRepository interface.
type MockPortalLinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPortalLinkRepositoryMockRecorder
}

// MockPortalLinkRepositoryMockRecorder is the mock recorder for MockPortalLinkRepository.
type MockPortalLinkRepositoryMockRecorder struct {
	mock *MockPortalLinkRepository
}

// NewMockPortalLinkRepository creates a new mock instance.
func NewMockPortalLinkRepository(ctrl *gomock.Controller) *MockPortalLinkRepository {
	mock := &MockPortalLinkRepository{ctrl: ctrl}
	mock.recorder = &MockPortalLinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalLinkRepository) EXPECT() *MockPortalLinkRepositoryMockRecorder {
	return m.recorder
}

// CreatePortalLink mocks base method.
func (m *MockPortalLinkRepository) CreatePortalLink(arg0 context.Context, arg1 *datastore.PortalLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortalLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortalLink indicates an expected call of CreatePortalLink.
func (mr *MockPortalLinkRepositoryMockRecorder) CreatePortalLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortalLink", reflect.TypeOf((*MockPortalLinkRepository)(nil).CreatePortalLink), arg0, arg1)
}

// FindPortalLinkByID mocks base method.
func (m *MockPortalLinkRepository) FindPortalLinkByID(ctx context.Context, projectID, id string) (*datastore.PortalLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPortalLinkByID", ctx, projectID, id)
	ret0, _ := ret[0].(*datastore.PortalLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPortalLinkByID indicates an expected call of FindPortalLinkByID.
func (mr *MockPortalLinkRepositoryMockRecorder) FindPortalLinkByID(ctx, projectID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPortalLinkByID", reflect.TypeOf((*MockPortalLinkRepository)(nil).FindPortalLinkByID), ctx, projectID, id)
}

// FindPortalLinkByOwnerID mocks base method.
func (m *MockPortalLinkRepository) FindPortalLinkByOwnerID(ctx context.Context, projectID, id string) (*datastore.PortalLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPortalLinkByOwnerID", ctx, projectID, id)
	ret0, _ := ret[0].(*datastore.PortalLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPortalLinkByOwnerID indicates an expected call of FindPortalLinkByOwnerID.
func (mr *MockPortalLinkRepositoryMockRecorder) FindPortalLinkByOwnerID(ctx, projectID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPortalLinkByOwnerID", reflect.TypeOf((*MockPortalLinkRepository)(nil).FindPortalLinkByOwnerID), ctx, projectID, id)
}

// FindPortalLinkByToken mocks base method.
func (m *MockPortalLinkRepository) FindPortalLinkByToken(ctx context.Context, token string) (*datastore.PortalLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPortalLinkByToken", ctx, token)
	ret0, _ := ret[0].(*datastore.PortalLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPortalLinkByToken indicates an expected call of FindPortalLinkByToken.
func (mr *MockPortalLinkRepositoryMockRecorder) FindPortalLinkByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPortalLinkByToken", reflect.TypeOf((*MockPortalLinkRepository)(nil).FindPortalLinkByToken), ctx, token)
}

// LoadPortalLinksPaged mocks base method.
func (m *MockPortalLinkRepository) LoadPortalLinksPaged(ctx context.Context, projectID string, f *datastore.FilterBy, pageable datastore.Pageable) ([]datastore.PortalLink, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPortalLinksPaged", ctx, projectID, f, pageable)
	ret0, _ := ret[0].([]datastore.PortalLink)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadPortalLinksPaged indicates an expected call of LoadPortalLinksPaged.
func (mr *MockPortalLinkRepositoryMockRecorder) LoadPortalLinksPaged(ctx, projectID, f, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPortalLinksPaged", reflect.TypeOf((*MockPortalLinkRepository)(nil).LoadPortalLinksPaged), ctx, projectID, f, pageable)
}

// RevokePortalLink mocks base method.
func (m *MockPortalLinkRepository) RevokePortalLink(ctx context.Context, projectID, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokePortalLink", ctx, projectID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokePortalLink indicates an expected call of RevokePortalLink.
func (mr *MockPortalLinkRepositoryMockRecorder) RevokePortalLink(ctx, projectID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePortalLink", reflect.TypeOf((*MockPortalLinkRepository)(nil).RevokePortalLink), ctx, projectID, id)
}

// UpdatePortalLink mocks base method.
func (m *MockPortalLinkRepository) UpdatePortalLink(ctx context.Context, projectID string, portal *datastore.PortalLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortalLink", ctx, projectID, portal)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalLink indicates an expected call of UpdatePortalLink.
func (mr *MockPortalLinkRepositoryMockRecorder) UpdatePortalLink(ctx, projectID, portal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalLink", reflect.TypeOf((*MockPortalLinkRepository)(nil).UpdatePortalLink), ctx, projectID, portal)
}

// MockExportRepository is a mock of ExportRepository interface.
type MockExportRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExportRepositoryMockRecorder
}

// MockExportRepositoryMockRecorder is the mock recorder for MockExportRepository.
type MockExportRepositoryMockRecorder struct {
	mock *MockExportRepository
}

// NewMockExportRepository creates a new mock instance.
func NewMockExportRepository(ctrl *gomock.Controller) *MockExportRepository {
	mock := &MockExportRepository{ctrl: ctrl}
	mock.recorder = &MockExportRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportRepository) EXPECT() *MockExportRepositoryMockRecorder {
	return m.recorder
}

// ExportRecords mocks base method.
func (m *MockExportRepository) ExportRecords(ctx context.Context, tableName, projectID string, createdAt time.Time) (json.RawMessage, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRecords", ctx, tableName, projectID, createdAt)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExportRecords indicates an expected call of ExportRecords.
func (mr *MockExportRepositoryMockRecorder) ExportRecords(ctx, tableName, projectID, createdAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRecords", reflect.TypeOf((*MockExportRepository)(nil).ExportRecords), ctx, tableName, projectID, createdAt)
}

// MockMetaEventRepository is a mock of MetaEventRepository interface.
type MockMetaEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetaEventRepositoryMockRecorder
}

// MockMetaEventRepositoryMockRecorder is the mock recorder for MockMetaEventRepository.
type MockMetaEventRepositoryMockRecorder struct {
	mock *MockMetaEventRepository
}

// NewMockMetaEventRepository creates a new mock instance.
func NewMockMetaEventRepository(ctrl *gomock.Controller) *MockMetaEventRepository {
	mock := &MockMetaEventRepository{ctrl: ctrl}
	mock.recorder = &MockMetaEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaEventRepository) EXPECT() *MockMetaEventRepositoryMockRecorder {
	return m.recorder
}

// CreateMetaEvent mocks base method.
func (m *MockMetaEventRepository) CreateMetaEvent(arg0 context.Context, arg1 *datastore.MetaEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetaEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMetaEvent indicates an expected call of CreateMetaEvent.
func (mr *MockMetaEventRepositoryMockRecorder) CreateMetaEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetaEvent", reflect.TypeOf((*MockMetaEventRepository)(nil).CreateMetaEvent), arg0, arg1)
}

// FindMetaEventByID mocks base method.
func (m *MockMetaEventRepository) FindMetaEventByID(ctx context.Context, projectID, id string) (*datastore.MetaEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMetaEventByID", ctx, projectID, id)
	ret0, _ := ret[0].(*datastore.MetaEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMetaEventByID indicates an expected call of FindMetaEventByID.
func (mr *MockMetaEventRepositoryMockRecorder) FindMetaEventByID(ctx, projectID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMetaEventByID", reflect.TypeOf((*MockMetaEventRepository)(nil).FindMetaEventByID), ctx, projectID, id)
}

// LoadMetaEventsPaged mocks base method.
func (m *MockMetaEventRepository) LoadMetaEventsPaged(ctx context.Context, projectID string, f *datastore.Filter) ([]datastore.MetaEvent, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMetaEventsPaged", ctx, projectID, f)
	ret0, _ := ret[0].([]datastore.MetaEvent)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadMetaEventsPaged indicates an expected call of LoadMetaEventsPaged.
func (mr *MockMetaEventRepositoryMockRecorder) LoadMetaEventsPaged(ctx, projectID, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMetaEventsPaged", reflect.TypeOf((*MockMetaEventRepository)(nil).LoadMetaEventsPaged), ctx, projectID, f)
}

// UpdateMetaEvent mocks base method.
func (m *MockMetaEventRepository) UpdateMetaEvent(ctx context.Context, projectID string, metaEvent *datastore.MetaEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetaEvent", ctx, projectID, metaEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetaEvent indicates an expected call of UpdateMetaEvent.
func (mr *MockMetaEventRepositoryMockRecorder) UpdateMetaEvent(ctx, projectID, metaEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetaEvent", reflect.TypeOf((*MockMetaEventRepository)(nil).UpdateMetaEvent), ctx, projectID, metaEvent)
}
