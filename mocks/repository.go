// Code generated by MockGen. DO NOT EDIT.
// Source: datastore/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	datastore "github.com/frain-dev/convoy/datastore"
	gomock "github.com/golang/mock/gomock"
)

// MockAPIKeyRepository is a mock of APIKeyRepository interface.
type MockAPIKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyRepositoryMockRecorder
}

// MockAPIKeyRepositoryMockRecorder is the mock recorder for MockAPIKeyRepository.
type MockAPIKeyRepositoryMockRecorder struct {
	mock *MockAPIKeyRepository
}

// NewMockAPIKeyRepository creates a new mock instance.
func NewMockAPIKeyRepository(ctrl *gomock.Controller) *MockAPIKeyRepository {
	mock := &MockAPIKeyRepository{ctrl: ctrl}
	mock.recorder = &MockAPIKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyRepository) EXPECT() *MockAPIKeyRepositoryMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockAPIKeyRepository) CreateAPIKey(arg0 context.Context, arg1 *datastore.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockAPIKeyRepositoryMockRecorder) CreateAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockAPIKeyRepository)(nil).CreateAPIKey), arg0, arg1)
}

// FindAPIKeyByHash mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByHash(arg0 context.Context, arg1 string) (*datastore.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByHash", arg0, arg1)
	ret0, _ := ret[0].(*datastore.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByHash indicates an expected call of FindAPIKeyByHash.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByHash", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByHash), arg0, arg1)
}

// FindAPIKeyByID mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByID(arg0 context.Context, arg1 string) (*datastore.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByID indicates an expected call of FindAPIKeyByID.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByID", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByID), arg0, arg1)
}

// FindAPIKeyByMaskID mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByMaskID(arg0 context.Context, arg1 string) (*datastore.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByMaskID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByMaskID indicates an expected call of FindAPIKeyByMaskID.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByMaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByMaskID", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByMaskID), arg0, arg1)
}

// LoadAPIKeysPaged mocks base method.
func (m *MockAPIKeyRepository) LoadAPIKeysPaged(arg0 context.Context, arg1 *datastore.ApiKeyFilter, arg2 *datastore.Pageable) ([]datastore.APIKey, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAPIKeysPaged", arg0, arg1, arg2)
	ret0, _ := ret[0].([]datastore.APIKey)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadAPIKeysPaged indicates an expected call of LoadAPIKeysPaged.
func (mr *MockAPIKeyRepositoryMockRecorder) LoadAPIKeysPaged(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAPIKeysPaged", reflect.TypeOf((*MockAPIKeyRepository)(nil).LoadAPIKeysPaged), arg0, arg1, arg2)
}

// RevokeAPIKeys mocks base method.
func (m *MockAPIKeyRepository) RevokeAPIKeys(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAPIKeys", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAPIKeys indicates an expected call of RevokeAPIKeys.
func (mr *MockAPIKeyRepositoryMockRecorder) RevokeAPIKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAPIKeys", reflect.TypeOf((*MockAPIKeyRepository)(nil).RevokeAPIKeys), arg0, arg1)
}

// UpdateAPIKey mocks base method.
func (m *MockAPIKeyRepository) UpdateAPIKey(arg0 context.Context, arg1 *datastore.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockAPIKeyRepositoryMockRecorder) UpdateAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockAPIKeyRepository)(nil).UpdateAPIKey), arg0, arg1)
}

// MockEventDeliveryRepository is a mock of EventDeliveryRepository interface.
type MockEventDeliveryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventDeliveryRepositoryMockRecorder
}

// MockEventDeliveryRepositoryMockRecorder is the mock recorder for MockEventDeliveryRepository.
type MockEventDeliveryRepositoryMockRecorder struct {
	mock *MockEventDeliveryRepository
}

// NewMockEventDeliveryRepository creates a new mock instance.
func NewMockEventDeliveryRepository(ctrl *gomock.Controller) *MockEventDeliveryRepository {
	mock := &MockEventDeliveryRepository{ctrl: ctrl}
	mock.recorder = &MockEventDeliveryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDeliveryRepository) EXPECT() *MockEventDeliveryRepositoryMockRecorder {
	return m.recorder
}

// CountDeliveriesByStatus mocks base method.
func (m *MockEventDeliveryRepository) CountDeliveriesByStatus(arg0 context.Context, arg1 datastore.EventDeliveryStatus, arg2 datastore.SearchParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDeliveriesByStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDeliveriesByStatus indicates an expected call of CountDeliveriesByStatus.
func (mr *MockEventDeliveryRepositoryMockRecorder) CountDeliveriesByStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDeliveriesByStatus", reflect.TypeOf((*MockEventDeliveryRepository)(nil).CountDeliveriesByStatus), arg0, arg1, arg2)
}

// CountEventDeliveries mocks base method.
func (m *MockEventDeliveryRepository) CountEventDeliveries(arg0 context.Context, arg1, arg2, arg3 string, arg4 []datastore.EventDeliveryStatus, arg5 datastore.SearchParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEventDeliveries", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEventDeliveries indicates an expected call of CountEventDeliveries.
func (mr *MockEventDeliveryRepositoryMockRecorder) CountEventDeliveries(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEventDeliveries", reflect.TypeOf((*MockEventDeliveryRepository)(nil).CountEventDeliveries), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateEventDelivery mocks base method.
func (m *MockEventDeliveryRepository) CreateEventDelivery(arg0 context.Context, arg1 *datastore.EventDelivery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventDelivery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventDelivery indicates an expected call of CreateEventDelivery.
func (mr *MockEventDeliveryRepositoryMockRecorder) CreateEventDelivery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventDelivery", reflect.TypeOf((*MockEventDeliveryRepository)(nil).CreateEventDelivery), arg0, arg1)
}

// DeleteGroupEventDeliveries mocks base method.
func (m *MockEventDeliveryRepository) DeleteGroupEventDeliveries(ctx context.Context, filter *datastore.EventDeliveryFilter, hardDelete bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupEventDeliveries", ctx, filter, hardDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupEventDeliveries indicates an expected call of DeleteGroupEventDeliveries.
func (mr *MockEventDeliveryRepositoryMockRecorder) DeleteGroupEventDeliveries(ctx, filter, hardDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupEventDeliveries", reflect.TypeOf((*MockEventDeliveryRepository)(nil).DeleteGroupEventDeliveries), ctx, filter, hardDelete)
}

// FindDiscardedEventDeliveries mocks base method.
func (m *MockEventDeliveryRepository) FindDiscardedEventDeliveries(ctx context.Context, appId, deviceId string, searchParams datastore.SearchParams) ([]datastore.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDiscardedEventDeliveries", ctx, appId, deviceId, searchParams)
	ret0, _ := ret[0].([]datastore.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDiscardedEventDeliveries indicates an expected call of FindDiscardedEventDeliveries.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindDiscardedEventDeliveries(ctx, appId, deviceId, searchParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDiscardedEventDeliveries", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindDiscardedEventDeliveries), ctx, appId, deviceId, searchParams)
}

// FindEventDeliveriesByEventID mocks base method.
func (m *MockEventDeliveryRepository) FindEventDeliveriesByEventID(arg0 context.Context, arg1 string) ([]datastore.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventDeliveriesByEventID", arg0, arg1)
	ret0, _ := ret[0].([]datastore.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventDeliveriesByEventID indicates an expected call of FindEventDeliveriesByEventID.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindEventDeliveriesByEventID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventDeliveriesByEventID", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindEventDeliveriesByEventID), arg0, arg1)
}

// FindEventDeliveriesByIDs mocks base method.
func (m *MockEventDeliveryRepository) FindEventDeliveriesByIDs(arg0 context.Context, arg1 []string) ([]datastore.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventDeliveriesByIDs", arg0, arg1)
	ret0, _ := ret[0].([]datastore.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventDeliveriesByIDs indicates an expected call of FindEventDeliveriesByIDs.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindEventDeliveriesByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventDeliveriesByIDs", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindEventDeliveriesByIDs), arg0, arg1)
}

// FindEventDeliveryByID mocks base method.
func (m *MockEventDeliveryRepository) FindEventDeliveryByID(arg0 context.Context, arg1 string) (*datastore.EventDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventDeliveryByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.EventDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventDeliveryByID indicates an expected call of FindEventDeliveryByID.
func (mr *MockEventDeliveryRepositoryMockRecorder) FindEventDeliveryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventDeliveryByID", reflect.TypeOf((*MockEventDeliveryRepository)(nil).FindEventDeliveryByID), arg0, arg1)
}

// LoadEventDeliveriesPaged mocks base method.
func (m *MockEventDeliveryRepository) LoadEventDeliveriesPaged(arg0 context.Context, arg1, arg2, arg3 string, arg4 []datastore.EventDeliveryStatus, arg5 datastore.SearchParams, arg6 datastore.Pageable) ([]datastore.EventDelivery, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEventDeliveriesPaged", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]datastore.EventDelivery)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadEventDeliveriesPaged indicates an expected call of LoadEventDeliveriesPaged.
func (mr *MockEventDeliveryRepositoryMockRecorder) LoadEventDeliveriesPaged(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEventDeliveriesPaged", reflect.TypeOf((*MockEventDeliveryRepository)(nil).LoadEventDeliveriesPaged), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// UpdateEventDeliveryWithAttempt mocks base method.
func (m *MockEventDeliveryRepository) UpdateEventDeliveryWithAttempt(arg0 context.Context, arg1 datastore.EventDelivery, arg2 datastore.DeliveryAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventDeliveryWithAttempt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventDeliveryWithAttempt indicates an expected call of UpdateEventDeliveryWithAttempt.
func (mr *MockEventDeliveryRepositoryMockRecorder) UpdateEventDeliveryWithAttempt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventDeliveryWithAttempt", reflect.TypeOf((*MockEventDeliveryRepository)(nil).UpdateEventDeliveryWithAttempt), arg0, arg1, arg2)
}

// UpdateStatusOfEventDeliveries mocks base method.
func (m *MockEventDeliveryRepository) UpdateStatusOfEventDeliveries(arg0 context.Context, arg1 []string, arg2 datastore.EventDeliveryStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusOfEventDeliveries", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusOfEventDeliveries indicates an expected call of UpdateStatusOfEventDeliveries.
func (mr *MockEventDeliveryRepositoryMockRecorder) UpdateStatusOfEventDeliveries(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusOfEventDeliveries", reflect.TypeOf((*MockEventDeliveryRepository)(nil).UpdateStatusOfEventDeliveries), arg0, arg1, arg2)
}

// UpdateStatusOfEventDelivery mocks base method.
func (m *MockEventDeliveryRepository) UpdateStatusOfEventDelivery(arg0 context.Context, arg1 datastore.EventDelivery, arg2 datastore.EventDeliveryStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusOfEventDelivery", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusOfEventDelivery indicates an expected call of UpdateStatusOfEventDelivery.
func (mr *MockEventDeliveryRepositoryMockRecorder) UpdateStatusOfEventDelivery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusOfEventDelivery", reflect.TypeOf((*MockEventDeliveryRepository)(nil).UpdateStatusOfEventDelivery), arg0, arg1, arg2)
}

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// CountGroupMessages mocks base method.
func (m *MockEventRepository) CountGroupMessages(ctx context.Context, groupID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountGroupMessages", ctx, groupID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountGroupMessages indicates an expected call of CountGroupMessages.
func (mr *MockEventRepositoryMockRecorder) CountGroupMessages(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountGroupMessages", reflect.TypeOf((*MockEventRepository)(nil).CountGroupMessages), ctx, groupID)
}

// CreateEvent mocks base method.
func (m *MockEventRepository) CreateEvent(arg0 context.Context, arg1 *datastore.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepositoryMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepository)(nil).CreateEvent), arg0, arg1)
}

// DeleteGroupEvents mocks base method.
func (m *MockEventRepository) DeleteGroupEvents(arg0 context.Context, arg1 *datastore.EventFilter, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupEvents indicates an expected call of DeleteGroupEvents.
func (mr *MockEventRepositoryMockRecorder) DeleteGroupEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupEvents", reflect.TypeOf((*MockEventRepository)(nil).DeleteGroupEvents), arg0, arg1, arg2)
}

// FindEventByID mocks base method.
func (m *MockEventRepository) FindEventByID(ctx context.Context, id string) (*datastore.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventByID", ctx, id)
	ret0, _ := ret[0].(*datastore.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventByID indicates an expected call of FindEventByID.
func (mr *MockEventRepositoryMockRecorder) FindEventByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventByID", reflect.TypeOf((*MockEventRepository)(nil).FindEventByID), ctx, id)
}

// FindEventsByIDs mocks base method.
func (m *MockEventRepository) FindEventsByIDs(arg0 context.Context, arg1 []string) ([]datastore.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]datastore.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventsByIDs indicates an expected call of FindEventsByIDs.
func (mr *MockEventRepositoryMockRecorder) FindEventsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventsByIDs", reflect.TypeOf((*MockEventRepository)(nil).FindEventsByIDs), arg0, arg1)
}

// LoadEventIntervals mocks base method.
func (m *MockEventRepository) LoadEventIntervals(arg0 context.Context, arg1 string, arg2 datastore.SearchParams, arg3 datastore.Period, arg4 int) ([]datastore.EventInterval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEventIntervals", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]datastore.EventInterval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadEventIntervals indicates an expected call of LoadEventIntervals.
func (mr *MockEventRepositoryMockRecorder) LoadEventIntervals(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEventIntervals", reflect.TypeOf((*MockEventRepository)(nil).LoadEventIntervals), arg0, arg1, arg2, arg3, arg4)
}

// LoadEventsPaged mocks base method.
func (m *MockEventRepository) LoadEventsPaged(arg0 context.Context, arg1 *datastore.Filter) ([]datastore.Event, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEventsPaged", arg0, arg1)
	ret0, _ := ret[0].([]datastore.Event)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadEventsPaged indicates an expected call of LoadEventsPaged.
func (mr *MockEventRepositoryMockRecorder) LoadEventsPaged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEventsPaged", reflect.TypeOf((*MockEventRepository)(nil).LoadEventsPaged), arg0, arg1)
}

// MockGroupRepository is a mock of GroupRepository interface.
type MockGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryMockRecorder
}

// MockGroupRepositoryMockRecorder is the mock recorder for MockGroupRepository.
type MockGroupRepositoryMockRecorder struct {
	mock *MockGroupRepository
}

// NewMockGroupRepository creates a new mock instance.
func NewMockGroupRepository(ctrl *gomock.Controller) *MockGroupRepository {
	mock := &MockGroupRepository{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepository) EXPECT() *MockGroupRepositoryMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockGroupRepository) CreateGroup(arg0 context.Context, arg1 *datastore.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupRepositoryMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupRepository)(nil).CreateGroup), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockGroupRepository) DeleteGroup(ctx context.Context, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupRepositoryMockRecorder) DeleteGroup(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroupRepository)(nil).DeleteGroup), ctx, uid)
}

// FetchGroupByID mocks base method.
func (m *MockGroupRepository) FetchGroupByID(arg0 context.Context, arg1 string) (*datastore.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGroupByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGroupByID indicates an expected call of FetchGroupByID.
func (mr *MockGroupRepositoryMockRecorder) FetchGroupByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGroupByID", reflect.TypeOf((*MockGroupRepository)(nil).FetchGroupByID), arg0, arg1)
}

// FetchGroupsByIDs mocks base method.
func (m *MockGroupRepository) FetchGroupsByIDs(arg0 context.Context, arg1 []string) ([]datastore.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGroupsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]datastore.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGroupsByIDs indicates an expected call of FetchGroupsByIDs.
func (mr *MockGroupRepositoryMockRecorder) FetchGroupsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGroupsByIDs", reflect.TypeOf((*MockGroupRepository)(nil).FetchGroupsByIDs), arg0, arg1)
}

// FillGroupsStatistics mocks base method.
func (m *MockGroupRepository) FillGroupsStatistics(ctx context.Context, groups []*datastore.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillGroupsStatistics", ctx, groups)
	ret0, _ := ret[0].(error)
	return ret0
}

// FillGroupsStatistics indicates an expected call of FillGroupsStatistics.
func (mr *MockGroupRepositoryMockRecorder) FillGroupsStatistics(ctx, groups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillGroupsStatistics", reflect.TypeOf((*MockGroupRepository)(nil).FillGroupsStatistics), ctx, groups)
}

// LoadGroups mocks base method.
func (m *MockGroupRepository) LoadGroups(arg0 context.Context, arg1 *datastore.GroupFilter) ([]*datastore.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadGroups", arg0, arg1)
	ret0, _ := ret[0].([]*datastore.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadGroups indicates an expected call of LoadGroups.
func (mr *MockGroupRepositoryMockRecorder) LoadGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadGroups", reflect.TypeOf((*MockGroupRepository)(nil).LoadGroups), arg0, arg1)
}

// UpdateGroup mocks base method.
func (m *MockGroupRepository) UpdateGroup(arg0 context.Context, arg1 *datastore.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGroupRepositoryMockRecorder) UpdateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGroupRepository)(nil).UpdateGroup), arg0, arg1)
}

// MockOrganisationRepository is a mock of OrganisationRepository interface.
type MockOrganisationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganisationRepositoryMockRecorder
}

// MockOrganisationRepositoryMockRecorder is the mock recorder for MockOrganisationRepository.
type MockOrganisationRepositoryMockRecorder struct {
	mock *MockOrganisationRepository
}

// NewMockOrganisationRepository creates a new mock instance.
func NewMockOrganisationRepository(ctrl *gomock.Controller) *MockOrganisationRepository {
	mock := &MockOrganisationRepository{ctrl: ctrl}
	mock.recorder = &MockOrganisationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganisationRepository) EXPECT() *MockOrganisationRepositoryMockRecorder {
	return m.recorder
}

// CreateOrganisation mocks base method.
func (m *MockOrganisationRepository) CreateOrganisation(arg0 context.Context, arg1 *datastore.Organisation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganisation indicates an expected call of CreateOrganisation.
func (mr *MockOrganisationRepositoryMockRecorder) CreateOrganisation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisation", reflect.TypeOf((*MockOrganisationRepository)(nil).CreateOrganisation), arg0, arg1)
}

// DeleteOrganisation mocks base method.
func (m *MockOrganisationRepository) DeleteOrganisation(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganisation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganisation indicates an expected call of DeleteOrganisation.
func (mr *MockOrganisationRepositoryMockRecorder) DeleteOrganisation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganisation", reflect.TypeOf((*MockOrganisationRepository)(nil).DeleteOrganisation), arg0, arg1)
}

// FetchOrganisationByID mocks base method.
func (m *MockOrganisationRepository) FetchOrganisationByID(arg0 context.Context, arg1 string) (*datastore.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationByID indicates an expected call of FetchOrganisationByID.
func (mr *MockOrganisationRepositoryMockRecorder) FetchOrganisationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationByID", reflect.TypeOf((*MockOrganisationRepository)(nil).FetchOrganisationByID), arg0, arg1)
}

// LoadOrganisationsPaged mocks base method.
func (m *MockOrganisationRepository) LoadOrganisationsPaged(arg0 context.Context, arg1 datastore.Pageable) ([]datastore.Organisation, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrganisationsPaged", arg0, arg1)
	ret0, _ := ret[0].([]datastore.Organisation)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadOrganisationsPaged indicates an expected call of LoadOrganisationsPaged.
func (mr *MockOrganisationRepositoryMockRecorder) LoadOrganisationsPaged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrganisationsPaged", reflect.TypeOf((*MockOrganisationRepository)(nil).LoadOrganisationsPaged), arg0, arg1)
}

// UpdateOrganisation mocks base method.
func (m *MockOrganisationRepository) UpdateOrganisation(arg0 context.Context, arg1 *datastore.Organisation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganisation indicates an expected call of UpdateOrganisation.
func (mr *MockOrganisationRepositoryMockRecorder) UpdateOrganisation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisation", reflect.TypeOf((*MockOrganisationRepository)(nil).UpdateOrganisation), arg0, arg1)
}

// MockOrganisationInviteRepository is a mock of OrganisationInviteRepository interface.
type MockOrganisationInviteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganisationInviteRepositoryMockRecorder
}

// MockOrganisationInviteRepositoryMockRecorder is the mock recorder for MockOrganisationInviteRepository.
type MockOrganisationInviteRepositoryMockRecorder struct {
	mock *MockOrganisationInviteRepository
}

// NewMockOrganisationInviteRepository creates a new mock instance.
func NewMockOrganisationInviteRepository(ctrl *gomock.Controller) *MockOrganisationInviteRepository {
	mock := &MockOrganisationInviteRepository{ctrl: ctrl}
	mock.recorder = &MockOrganisationInviteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganisationInviteRepository) EXPECT() *MockOrganisationInviteRepositoryMockRecorder {
	return m.recorder
}

// CreateOrganisationInvite mocks base method.
func (m *MockOrganisationInviteRepository) CreateOrganisationInvite(ctx context.Context, iv *datastore.OrganisationInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisationInvite", ctx, iv)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganisationInvite indicates an expected call of CreateOrganisationInvite.
func (mr *MockOrganisationInviteRepositoryMockRecorder) CreateOrganisationInvite(ctx, iv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisationInvite", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).CreateOrganisationInvite), ctx, iv)
}

// DeleteOrganisationInvite mocks base method.
func (m *MockOrganisationInviteRepository) DeleteOrganisationInvite(ctx context.Context, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganisationInvite", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganisationInvite indicates an expected call of DeleteOrganisationInvite.
func (mr *MockOrganisationInviteRepositoryMockRecorder) DeleteOrganisationInvite(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganisationInvite", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).DeleteOrganisationInvite), ctx, uid)
}

// FetchOrganisationInviteByID mocks base method.
func (m *MockOrganisationInviteRepository) FetchOrganisationInviteByID(ctx context.Context, uid string) (*datastore.OrganisationInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationInviteByID", ctx, uid)
	ret0, _ := ret[0].(*datastore.OrganisationInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationInviteByID indicates an expected call of FetchOrganisationInviteByID.
func (mr *MockOrganisationInviteRepositoryMockRecorder) FetchOrganisationInviteByID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationInviteByID", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).FetchOrganisationInviteByID), ctx, uid)
}

// FetchOrganisationInviteByToken mocks base method.
func (m *MockOrganisationInviteRepository) FetchOrganisationInviteByToken(ctx context.Context, token string) (*datastore.OrganisationInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationInviteByToken", ctx, token)
	ret0, _ := ret[0].(*datastore.OrganisationInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationInviteByToken indicates an expected call of FetchOrganisationInviteByToken.
func (mr *MockOrganisationInviteRepositoryMockRecorder) FetchOrganisationInviteByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationInviteByToken", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).FetchOrganisationInviteByToken), ctx, token)
}

// LoadOrganisationsInvitesPaged mocks base method.
func (m *MockOrganisationInviteRepository) LoadOrganisationsInvitesPaged(ctx context.Context, orgID string, inviteStatus datastore.InviteStatus, pageable datastore.Pageable) ([]datastore.OrganisationInvite, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrganisationsInvitesPaged", ctx, orgID, inviteStatus, pageable)
	ret0, _ := ret[0].([]datastore.OrganisationInvite)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadOrganisationsInvitesPaged indicates an expected call of LoadOrganisationsInvitesPaged.
func (mr *MockOrganisationInviteRepositoryMockRecorder) LoadOrganisationsInvitesPaged(ctx, orgID, inviteStatus, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrganisationsInvitesPaged", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).LoadOrganisationsInvitesPaged), ctx, orgID, inviteStatus, pageable)
}

// UpdateOrganisationInvite mocks base method.
func (m *MockOrganisationInviteRepository) UpdateOrganisationInvite(ctx context.Context, iv *datastore.OrganisationInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisationInvite", ctx, iv)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganisationInvite indicates an expected call of UpdateOrganisationInvite.
func (mr *MockOrganisationInviteRepositoryMockRecorder) UpdateOrganisationInvite(ctx, iv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisationInvite", reflect.TypeOf((*MockOrganisationInviteRepository)(nil).UpdateOrganisationInvite), ctx, iv)
}

// MockOrganisationMemberRepository is a mock of OrganisationMemberRepository interface.
type MockOrganisationMemberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganisationMemberRepositoryMockRecorder
}

// MockOrganisationMemberRepositoryMockRecorder is the mock recorder for MockOrganisationMemberRepository.
type MockOrganisationMemberRepositoryMockRecorder struct {
	mock *MockOrganisationMemberRepository
}

// NewMockOrganisationMemberRepository creates a new mock instance.
func NewMockOrganisationMemberRepository(ctrl *gomock.Controller) *MockOrganisationMemberRepository {
	mock := &MockOrganisationMemberRepository{ctrl: ctrl}
	mock.recorder = &MockOrganisationMemberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganisationMemberRepository) EXPECT() *MockOrganisationMemberRepositoryMockRecorder {
	return m.recorder
}

// CreateOrganisationMember mocks base method.
func (m *MockOrganisationMemberRepository) CreateOrganisationMember(ctx context.Context, member *datastore.OrganisationMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisationMember", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganisationMember indicates an expected call of CreateOrganisationMember.
func (mr *MockOrganisationMemberRepositoryMockRecorder) CreateOrganisationMember(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisationMember", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).CreateOrganisationMember), ctx, member)
}

// DeleteOrganisationMember mocks base method.
func (m *MockOrganisationMemberRepository) DeleteOrganisationMember(ctx context.Context, memberID, orgID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganisationMember", ctx, memberID, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganisationMember indicates an expected call of DeleteOrganisationMember.
func (mr *MockOrganisationMemberRepositoryMockRecorder) DeleteOrganisationMember(ctx, memberID, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganisationMember", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).DeleteOrganisationMember), ctx, memberID, orgID)
}

// FetchOrganisationMemberByID mocks base method.
func (m *MockOrganisationMemberRepository) FetchOrganisationMemberByID(ctx context.Context, memberID, organisationID string) (*datastore.OrganisationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationMemberByID", ctx, memberID, organisationID)
	ret0, _ := ret[0].(*datastore.OrganisationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationMemberByID indicates an expected call of FetchOrganisationMemberByID.
func (mr *MockOrganisationMemberRepositoryMockRecorder) FetchOrganisationMemberByID(ctx, memberID, organisationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationMemberByID", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).FetchOrganisationMemberByID), ctx, memberID, organisationID)
}

// FetchOrganisationMemberByUserID mocks base method.
func (m *MockOrganisationMemberRepository) FetchOrganisationMemberByUserID(ctx context.Context, userID, organisationID string) (*datastore.OrganisationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrganisationMemberByUserID", ctx, userID, organisationID)
	ret0, _ := ret[0].(*datastore.OrganisationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganisationMemberByUserID indicates an expected call of FetchOrganisationMemberByUserID.
func (mr *MockOrganisationMemberRepositoryMockRecorder) FetchOrganisationMemberByUserID(ctx, userID, organisationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganisationMemberByUserID", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).FetchOrganisationMemberByUserID), ctx, userID, organisationID)
}

// LoadOrganisationMembersPaged mocks base method.
func (m *MockOrganisationMemberRepository) LoadOrganisationMembersPaged(ctx context.Context, organisationID string, pageable datastore.Pageable) ([]*datastore.OrganisationMember, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrganisationMembersPaged", ctx, organisationID, pageable)
	ret0, _ := ret[0].([]*datastore.OrganisationMember)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadOrganisationMembersPaged indicates an expected call of LoadOrganisationMembersPaged.
func (mr *MockOrganisationMemberRepositoryMockRecorder) LoadOrganisationMembersPaged(ctx, organisationID, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrganisationMembersPaged", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).LoadOrganisationMembersPaged), ctx, organisationID, pageable)
}

// LoadUserOrganisationsPaged mocks base method.
func (m *MockOrganisationMemberRepository) LoadUserOrganisationsPaged(ctx context.Context, userID string, pageable datastore.Pageable) ([]datastore.Organisation, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserOrganisationsPaged", ctx, userID, pageable)
	ret0, _ := ret[0].([]datastore.Organisation)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadUserOrganisationsPaged indicates an expected call of LoadUserOrganisationsPaged.
func (mr *MockOrganisationMemberRepositoryMockRecorder) LoadUserOrganisationsPaged(ctx, userID, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserOrganisationsPaged", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).LoadUserOrganisationsPaged), ctx, userID, pageable)
}

// UpdateOrganisationMember mocks base method.
func (m *MockOrganisationMemberRepository) UpdateOrganisationMember(ctx context.Context, member *datastore.OrganisationMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisationMember", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganisationMember indicates an expected call of UpdateOrganisationMember.
func (mr *MockOrganisationMemberRepositoryMockRecorder) UpdateOrganisationMember(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisationMember", reflect.TypeOf((*MockOrganisationMemberRepository)(nil).UpdateOrganisationMember), ctx, member)
}

// MockApplicationRepository is a mock of ApplicationRepository interface.
type MockApplicationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationRepositoryMockRecorder
}

// MockApplicationRepositoryMockRecorder is the mock recorder for MockApplicationRepository.
type MockApplicationRepositoryMockRecorder struct {
	mock *MockApplicationRepository
}

// NewMockApplicationRepository creates a new mock instance.
func NewMockApplicationRepository(ctrl *gomock.Controller) *MockApplicationRepository {
	mock := &MockApplicationRepository{ctrl: ctrl}
	mock.recorder = &MockApplicationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationRepository) EXPECT() *MockApplicationRepositoryMockRecorder {
	return m.recorder
}

// CountGroupApplications mocks base method.
func (m *MockApplicationRepository) CountGroupApplications(ctx context.Context, groupID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountGroupApplications", ctx, groupID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountGroupApplications indicates an expected call of CountGroupApplications.
func (mr *MockApplicationRepositoryMockRecorder) CountGroupApplications(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountGroupApplications", reflect.TypeOf((*MockApplicationRepository)(nil).CountGroupApplications), ctx, groupID)
}

// CreateApplication mocks base method.
func (m *MockApplicationRepository) CreateApplication(arg0 context.Context, arg1 *datastore.Application, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockApplicationRepositoryMockRecorder) CreateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockApplicationRepository)(nil).CreateApplication), arg0, arg1, arg2)
}

// CreateApplicationEndpoint mocks base method.
func (m *MockApplicationRepository) CreateApplicationEndpoint(arg0 context.Context, arg1, arg2 string, arg3 *datastore.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationEndpoint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplicationEndpoint indicates an expected call of CreateApplicationEndpoint.
func (mr *MockApplicationRepositoryMockRecorder) CreateApplicationEndpoint(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationEndpoint", reflect.TypeOf((*MockApplicationRepository)(nil).CreateApplicationEndpoint), arg0, arg1, arg2, arg3)
}

// DeleteApplication mocks base method.
func (m *MockApplicationRepository) DeleteApplication(arg0 context.Context, arg1 *datastore.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockApplicationRepositoryMockRecorder) DeleteApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockApplicationRepository)(nil).DeleteApplication), arg0, arg1)
}

// DeleteGroupApps mocks base method.
func (m *MockApplicationRepository) DeleteGroupApps(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupApps", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupApps indicates an expected call of DeleteGroupApps.
func (mr *MockApplicationRepositoryMockRecorder) DeleteGroupApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupApps", reflect.TypeOf((*MockApplicationRepository)(nil).DeleteGroupApps), arg0, arg1)
}

// ExpireSecret mocks base method.
func (m *MockApplicationRepository) ExpireSecret(ctx context.Context, appID, endpointID string, secrets []datastore.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireSecret", ctx, appID, endpointID, secrets)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireSecret indicates an expected call of ExpireSecret.
func (mr *MockApplicationRepositoryMockRecorder) ExpireSecret(ctx, appID, endpointID, secrets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireSecret", reflect.TypeOf((*MockApplicationRepository)(nil).ExpireSecret), ctx, appID, endpointID, secrets)
}

// FindApplicationByID mocks base method.
func (m *MockApplicationRepository) FindApplicationByID(arg0 context.Context, arg1 string) (*datastore.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindApplicationByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindApplicationByID indicates an expected call of FindApplicationByID.
func (mr *MockApplicationRepositoryMockRecorder) FindApplicationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindApplicationByID", reflect.TypeOf((*MockApplicationRepository)(nil).FindApplicationByID), arg0, arg1)
}

// FindApplicationEndpointByID mocks base method.
func (m *MockApplicationRepository) FindApplicationEndpointByID(arg0 context.Context, arg1, arg2 string) (*datastore.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindApplicationEndpointByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datastore.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindApplicationEndpointByID indicates an expected call of FindApplicationEndpointByID.
func (mr *MockApplicationRepositoryMockRecorder) FindApplicationEndpointByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindApplicationEndpointByID", reflect.TypeOf((*MockApplicationRepository)(nil).FindApplicationEndpointByID), arg0, arg1, arg2)
}

// LoadApplicationsPaged mocks base method.
func (m *MockApplicationRepository) LoadApplicationsPaged(arg0 context.Context, arg1, arg2 string, arg3 datastore.Pageable) ([]datastore.Application, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadApplicationsPaged", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]datastore.Application)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadApplicationsPaged indicates an expected call of LoadApplicationsPaged.
func (mr *MockApplicationRepositoryMockRecorder) LoadApplicationsPaged(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadApplicationsPaged", reflect.TypeOf((*MockApplicationRepository)(nil).LoadApplicationsPaged), arg0, arg1, arg2, arg3)
}

// LoadApplicationsPagedByGroupId mocks base method.
func (m *MockApplicationRepository) LoadApplicationsPagedByGroupId(arg0 context.Context, arg1 string, arg2 datastore.Pageable) ([]datastore.Application, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadApplicationsPagedByGroupId", arg0, arg1, arg2)
	ret0, _ := ret[0].([]datastore.Application)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadApplicationsPagedByGroupId indicates an expected call of LoadApplicationsPagedByGroupId.
func (mr *MockApplicationRepositoryMockRecorder) LoadApplicationsPagedByGroupId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadApplicationsPagedByGroupId", reflect.TypeOf((*MockApplicationRepository)(nil).LoadApplicationsPagedByGroupId), arg0, arg1, arg2)
}

// SearchApplicationsByGroupId mocks base method.
func (m *MockApplicationRepository) SearchApplicationsByGroupId(arg0 context.Context, arg1 string, arg2 datastore.SearchParams) ([]datastore.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchApplicationsByGroupId", arg0, arg1, arg2)
	ret0, _ := ret[0].([]datastore.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchApplicationsByGroupId indicates an expected call of SearchApplicationsByGroupId.
func (mr *MockApplicationRepositoryMockRecorder) SearchApplicationsByGroupId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchApplicationsByGroupId", reflect.TypeOf((*MockApplicationRepository)(nil).SearchApplicationsByGroupId), arg0, arg1, arg2)
}

// UpdateApplication mocks base method.
func (m *MockApplicationRepository) UpdateApplication(arg0 context.Context, arg1 *datastore.Application, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockApplicationRepositoryMockRecorder) UpdateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockApplicationRepository)(nil).UpdateApplication), arg0, arg1, arg2)
}

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionRepository) CreateSubscription(arg0 context.Context, arg1 string, arg2 *datastore.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) CreateSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).CreateSubscription), arg0, arg1, arg2)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionRepository) DeleteSubscription(arg0 context.Context, arg1 string, arg2 *datastore.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteSubscription), arg0, arg1, arg2)
}

// FindSubscriptionByDeviceID mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionByDeviceID(ctx context.Context, groupId, deviceID string) (*datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionByDeviceID", ctx, groupId, deviceID)
	ret0, _ := ret[0].(*datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionByDeviceID indicates an expected call of FindSubscriptionByDeviceID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionByDeviceID(ctx, groupId, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionByDeviceID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionByDeviceID), ctx, groupId, deviceID)
}

// FindSubscriptionByID mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionByID(arg0 context.Context, arg1, arg2 string) (*datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionByID indicates an expected call of FindSubscriptionByID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionByID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionByID), arg0, arg1, arg2)
}

// FindSubscriptionsByAppID mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionsByAppID(ctx context.Context, groupId, appID string) ([]datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionsByAppID", ctx, groupId, appID)
	ret0, _ := ret[0].([]datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionsByAppID indicates an expected call of FindSubscriptionsByAppID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionsByAppID(ctx, groupId, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionsByAppID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionsByAppID), ctx, groupId, appID)
}

// FindSubscriptionsByEventType mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionsByEventType(arg0 context.Context, arg1, arg2 string, arg3 datastore.EventType) ([]datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionsByEventType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionsByEventType indicates an expected call of FindSubscriptionsByEventType.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionsByEventType(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionsByEventType", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionsByEventType), arg0, arg1, arg2, arg3)
}

// FindSubscriptionsBySourceIDs mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionsBySourceIDs(arg0 context.Context, arg1, arg2 string) ([]datastore.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionsBySourceIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]datastore.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionsBySourceIDs indicates an expected call of FindSubscriptionsBySourceIDs.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionsBySourceIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionsBySourceIDs", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionsBySourceIDs), arg0, arg1, arg2)
}

// LoadSubscriptionsPaged mocks base method.
func (m *MockSubscriptionRepository) LoadSubscriptionsPaged(arg0 context.Context, arg1 string, arg2 *datastore.FilterBy, arg3 datastore.Pageable) ([]datastore.Subscription, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSubscriptionsPaged", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]datastore.Subscription)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadSubscriptionsPaged indicates an expected call of LoadSubscriptionsPaged.
func (mr *MockSubscriptionRepositoryMockRecorder) LoadSubscriptionsPaged(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSubscriptionsPaged", reflect.TypeOf((*MockSubscriptionRepository)(nil).LoadSubscriptionsPaged), arg0, arg1, arg2, arg3)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionRepository) UpdateSubscription(arg0 context.Context, arg1 string, arg2 *datastore.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) UpdateSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).UpdateSubscription), arg0, arg1, arg2)
}

// UpdateSubscriptionStatus mocks base method.
func (m *MockSubscriptionRepository) UpdateSubscriptionStatus(arg0 context.Context, arg1, arg2 string, arg3 datastore.SubscriptionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscriptionStatus indicates an expected call of UpdateSubscriptionStatus.
func (mr *MockSubscriptionRepositoryMockRecorder) UpdateSubscriptionStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionStatus", reflect.TypeOf((*MockSubscriptionRepository)(nil).UpdateSubscriptionStatus), arg0, arg1, arg2, arg3)
}

// MockSourceRepository is a mock of SourceRepository interface.
type MockSourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSourceRepositoryMockRecorder
}

// MockSourceRepositoryMockRecorder is the mock recorder for MockSourceRepository.
type MockSourceRepositoryMockRecorder struct {
	mock *MockSourceRepository
}

// NewMockSourceRepository creates a new mock instance.
func NewMockSourceRepository(ctrl *gomock.Controller) *MockSourceRepository {
	mock := &MockSourceRepository{ctrl: ctrl}
	mock.recorder = &MockSourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceRepository) EXPECT() *MockSourceRepositoryMockRecorder {
	return m.recorder
}

// CreateSource mocks base method.
func (m *MockSourceRepository) CreateSource(arg0 context.Context, arg1 *datastore.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSource indicates an expected call of CreateSource.
func (mr *MockSourceRepositoryMockRecorder) CreateSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSource", reflect.TypeOf((*MockSourceRepository)(nil).CreateSource), arg0, arg1)
}

// DeleteSourceByID mocks base method.
func (m *MockSourceRepository) DeleteSourceByID(ctx context.Context, groupID, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceByID", ctx, groupID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSourceByID indicates an expected call of DeleteSourceByID.
func (mr *MockSourceRepositoryMockRecorder) DeleteSourceByID(ctx, groupID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceByID", reflect.TypeOf((*MockSourceRepository)(nil).DeleteSourceByID), ctx, groupID, id)
}

// FindSourceByID mocks base method.
func (m *MockSourceRepository) FindSourceByID(ctx context.Context, groupID, id string) (*datastore.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSourceByID", ctx, groupID, id)
	ret0, _ := ret[0].(*datastore.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSourceByID indicates an expected call of FindSourceByID.
func (mr *MockSourceRepositoryMockRecorder) FindSourceByID(ctx, groupID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSourceByID", reflect.TypeOf((*MockSourceRepository)(nil).FindSourceByID), ctx, groupID, id)
}

// FindSourceByMaskID mocks base method.
func (m *MockSourceRepository) FindSourceByMaskID(ctx context.Context, maskID string) (*datastore.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSourceByMaskID", ctx, maskID)
	ret0, _ := ret[0].(*datastore.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSourceByMaskID indicates an expected call of FindSourceByMaskID.
func (mr *MockSourceRepositoryMockRecorder) FindSourceByMaskID(ctx, maskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSourceByMaskID", reflect.TypeOf((*MockSourceRepository)(nil).FindSourceByMaskID), ctx, maskID)
}

// LoadSourcesPaged mocks base method.
func (m *MockSourceRepository) LoadSourcesPaged(ctx context.Context, groupID string, filter *datastore.SourceFilter, pageable datastore.Pageable) ([]datastore.Source, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSourcesPaged", ctx, groupID, filter, pageable)
	ret0, _ := ret[0].([]datastore.Source)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadSourcesPaged indicates an expected call of LoadSourcesPaged.
func (mr *MockSourceRepositoryMockRecorder) LoadSourcesPaged(ctx, groupID, filter, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSourcesPaged", reflect.TypeOf((*MockSourceRepository)(nil).LoadSourcesPaged), ctx, groupID, filter, pageable)
}

// UpdateSource mocks base method.
func (m *MockSourceRepository) UpdateSource(ctx context.Context, groupID string, source *datastore.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSource", ctx, groupID, source)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSource indicates an expected call of UpdateSource.
func (mr *MockSourceRepositoryMockRecorder) UpdateSource(ctx, groupID, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSource", reflect.TypeOf((*MockSourceRepository)(nil).UpdateSource), ctx, groupID, source)
}

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockDeviceRepository) CreateDevice(ctx context.Context, device *datastore.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceRepositoryMockRecorder) CreateDevice(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceRepository)(nil).CreateDevice), ctx, device)
}

// DeleteDevice mocks base method.
func (m *MockDeviceRepository) DeleteDevice(ctx context.Context, uid, appID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, uid, appID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockDeviceRepositoryMockRecorder) DeleteDevice(ctx, uid, appID, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockDeviceRepository)(nil).DeleteDevice), ctx, uid, appID, groupID)
}

// FetchDeviceByHostName mocks base method.
func (m *MockDeviceRepository) FetchDeviceByHostName(ctx context.Context, hostName, appID, groupID string) (*datastore.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDeviceByHostName", ctx, hostName, appID, groupID)
	ret0, _ := ret[0].(*datastore.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeviceByHostName indicates an expected call of FetchDeviceByHostName.
func (mr *MockDeviceRepositoryMockRecorder) FetchDeviceByHostName(ctx, hostName, appID, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDeviceByHostName", reflect.TypeOf((*MockDeviceRepository)(nil).FetchDeviceByHostName), ctx, hostName, appID, groupID)
}

// FetchDeviceByID mocks base method.
func (m *MockDeviceRepository) FetchDeviceByID(ctx context.Context, uid, appID, groupID string) (*datastore.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDeviceByID", ctx, uid, appID, groupID)
	ret0, _ := ret[0].(*datastore.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeviceByID indicates an expected call of FetchDeviceByID.
func (mr *MockDeviceRepositoryMockRecorder) FetchDeviceByID(ctx, uid, appID, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDeviceByID", reflect.TypeOf((*MockDeviceRepository)(nil).FetchDeviceByID), ctx, uid, appID, groupID)
}

// LoadDevicesPaged mocks base method.
func (m *MockDeviceRepository) LoadDevicesPaged(ctx context.Context, groupID string, filter *datastore.ApiKeyFilter, pageable datastore.Pageable) ([]datastore.Device, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDevicesPaged", ctx, groupID, filter, pageable)
	ret0, _ := ret[0].([]datastore.Device)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadDevicesPaged indicates an expected call of LoadDevicesPaged.
func (mr *MockDeviceRepositoryMockRecorder) LoadDevicesPaged(ctx, groupID, filter, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDevicesPaged", reflect.TypeOf((*MockDeviceRepository)(nil).LoadDevicesPaged), ctx, groupID, filter, pageable)
}

// UpdateDevice mocks base method.
func (m *MockDeviceRepository) UpdateDevice(ctx context.Context, device *datastore.Device, appID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, device, appID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockDeviceRepositoryMockRecorder) UpdateDevice(ctx, device, appID, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockDeviceRepository)(nil).UpdateDevice), ctx, device, appID, groupID)
}

// UpdateDeviceLastSeen mocks base method.
func (m *MockDeviceRepository) UpdateDeviceLastSeen(ctx context.Context, device *datastore.Device, appID, groupID string, status datastore.DeviceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceLastSeen", ctx, device, appID, groupID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceLastSeen indicates an expected call of UpdateDeviceLastSeen.
func (mr *MockDeviceRepositoryMockRecorder) UpdateDeviceLastSeen(ctx, device, appID, groupID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceLastSeen", reflect.TypeOf((*MockDeviceRepository)(nil).UpdateDeviceLastSeen), ctx, device, appID, groupID, status)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(arg0 context.Context, arg1 *datastore.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), arg0, arg1)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepository) FindUserByEmail(arg0 context.Context, arg1 string) (*datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserByEmail), arg0, arg1)
}

// FindUserByID mocks base method.
func (m *MockUserRepository) FindUserByID(arg0 context.Context, arg1 string) (*datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", arg0, arg1)
	ret0, _ := ret[0].(*datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserRepositoryMockRecorder) FindUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserRepository)(nil).FindUserByID), arg0, arg1)
}

// FindUserByToken mocks base method.
func (m *MockUserRepository) FindUserByToken(arg0 context.Context, arg1 string) (*datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByToken", arg0, arg1)
	ret0, _ := ret[0].(*datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByToken indicates an expected call of FindUserByToken.
func (mr *MockUserRepositoryMockRecorder) FindUserByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByToken", reflect.TypeOf((*MockUserRepository)(nil).FindUserByToken), arg0, arg1)
}

// LoadUsersPaged mocks base method.
func (m *MockUserRepository) LoadUsersPaged(arg0 context.Context, arg1 datastore.Pageable) ([]datastore.User, datastore.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUsersPaged", arg0, arg1)
	ret0, _ := ret[0].([]datastore.User)
	ret1, _ := ret[1].(datastore.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadUsersPaged indicates an expected call of LoadUsersPaged.
func (mr *MockUserRepositoryMockRecorder) LoadUsersPaged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUsersPaged", reflect.TypeOf((*MockUserRepository)(nil).LoadUsersPaged), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *datastore.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}

// MockConfigurationRepository is a mock of ConfigurationRepository interface.
type MockConfigurationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationRepositoryMockRecorder
}

// MockConfigurationRepositoryMockRecorder is the mock recorder for MockConfigurationRepository.
type MockConfigurationRepositoryMockRecorder struct {
	mock *MockConfigurationRepository
}

// NewMockConfigurationRepository creates a new mock instance.
func NewMockConfigurationRepository(ctrl *gomock.Controller) *MockConfigurationRepository {
	mock := &MockConfigurationRepository{ctrl: ctrl}
	mock.recorder = &MockConfigurationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationRepository) EXPECT() *MockConfigurationRepositoryMockRecorder {
	return m.recorder
}

// CreateConfiguration mocks base method.
func (m *MockConfigurationRepository) CreateConfiguration(arg0 context.Context, arg1 *datastore.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConfiguration indicates an expected call of CreateConfiguration.
func (mr *MockConfigurationRepositoryMockRecorder) CreateConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguration", reflect.TypeOf((*MockConfigurationRepository)(nil).CreateConfiguration), arg0, arg1)
}

// LoadConfiguration mocks base method.
func (m *MockConfigurationRepository) LoadConfiguration(arg0 context.Context) (*datastore.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfiguration", arg0)
	ret0, _ := ret[0].(*datastore.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfiguration indicates an expected call of LoadConfiguration.
func (mr *MockConfigurationRepositoryMockRecorder) LoadConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfiguration", reflect.TypeOf((*MockConfigurationRepository)(nil).LoadConfiguration), arg0)
}

// UpdateConfiguration mocks base method.
func (m *MockConfigurationRepository) UpdateConfiguration(arg0 context.Context, arg1 *datastore.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration.
func (mr *MockConfigurationRepositoryMockRecorder) UpdateConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockConfigurationRepository)(nil).UpdateConfiguration), arg0, arg1)
}
