// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/breaker/breaker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	breaker "github.com/frain-dev/convoy/internal/pkg/breaker"
	gomock "github.com/golang/mock/gomock"
)

// MockCircuitManager is a mock of CircuitManager interface.
type MockCircuitManager struct {
	ctrl     *gomock.Controller
	recorder *MockCircuitManagerMockRecorder
}

// MockCircuitManagerMockRecorder is the mock recorder for MockCircuitManager.
type MockCircuitManagerMockRecorder struct {
	mock *MockCircuitManager
}

// NewMockCircuitManager creates a new mock instance.
func NewMockCircuitManager(ctrl *gomock.Controller) *MockCircuitManager {
	mock := &MockCircuitManager{ctrl: ctrl}
	mock.recorder = &MockCircuitManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircuitManager) EXPECT() *MockCircuitManagerMockRecorder {
	return m.recorder
}

// CreateCircuit mocks base method.
func (m *MockCircuitManager) CreateCircuit(arg0 *breaker.EndpointConfig) (*breaker.Circuit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCircuit", arg0)
	ret0, _ := ret[0].(*breaker.Circuit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCircuit indicates an expected call of CreateCircuit.
func (mr *MockCircuitManagerMockRecorder) CreateCircuit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCircuit", reflect.TypeOf((*MockCircuitManager)(nil).CreateCircuit), arg0)
}

// Get mocks base method.
func (m *MockCircuitManager) Get(endpointID string) *breaker.Circuit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", endpointID)
	ret0, _ := ret[0].(*breaker.Circuit)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCircuitManagerMockRecorder) Get(endpointID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCircuitManager)(nil).Get), endpointID)
}
