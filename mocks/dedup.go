// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/dedup/dedup.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIdempotency is a mock of Idempotency interface.
type MockIdempotency struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyMockRecorder
}

// MockIdempotencyMockRecorder is the mock recorder for MockIdempotency.
type MockIdempotencyMockRecorder struct {
	mock *MockIdempotency
}

// NewMockIdempotency creates a new mock instance.
func NewMockIdempotency(ctrl *gomock.Controller) *MockIdempotency {
	mock := &MockIdempotency{ctrl: ctrl}
	mock.recorder = &MockIdempotencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotency) EXPECT() *MockIdempotencyMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockIdempotency) Exists(arg0, arg1 string, arg2 []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIdempotencyMockRecorder) Exists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIdempotency)(nil).Exists), arg0, arg1, arg2)
}

// GenerateChecksum mocks base method.
func (m *MockIdempotency) GenerateChecksum(arg0 string, arg1 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChecksum", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChecksum indicates an expected call of GenerateChecksum.
func (mr *MockIdempotencyMockRecorder) GenerateChecksum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChecksum", reflect.TypeOf((*MockIdempotency)(nil).GenerateChecksum), arg0, arg1)
}
