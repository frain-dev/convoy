// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/fflag/fflag.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeatureFlag is a mock of FeatureFlag interface.
type MockFeatureFlag struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagMockRecorder
}

// MockFeatureFlagMockRecorder is the mock recorder for MockFeatureFlag.
type MockFeatureFlagMockRecorder struct {
	mock *MockFeatureFlag
}

// NewMockFeatureFlag creates a new mock instance.
func NewMockFeatureFlag(ctrl *gomock.Controller) *MockFeatureFlag {
	mock := &MockFeatureFlag{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlag) EXPECT() *MockFeatureFlagMockRecorder {
	return m.recorder
}

// IsEnabled mocks base method.
func (m *MockFeatureFlag) IsEnabled(flagKey string, evaluate map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled", flagKey, evaluate)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockFeatureFlagMockRecorder) IsEnabled(flagKey, evaluate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockFeatureFlag)(nil).IsEnabled), flagKey, evaluate)
}
