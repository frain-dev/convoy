// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/smtp/smtp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSmtpClient is a mock of SmtpClient interface.
type MockSmtpClient struct {
	ctrl     *gomock.Controller
	recorder *MockSmtpClientMockRecorder
}

// MockSmtpClientMockRecorder is the mock recorder for MockSmtpClient.
type MockSmtpClientMockRecorder struct {
	mock *MockSmtpClient
}

// NewMockSmtpClient creates a new mock instance.
func NewMockSmtpClient(ctrl *gomock.Controller) *MockSmtpClient {
	mock := &MockSmtpClient{ctrl: ctrl}
	mock.recorder = &MockSmtpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmtpClient) EXPECT() *MockSmtpClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockSmtpClient) SendEmail(emailAddr, subject string, body bytes.Buffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", emailAddr, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSmtpClientMockRecorder) SendEmail(emailAddr, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSmtpClient)(nil).SendEmail), emailAddr, subject, body)
}
