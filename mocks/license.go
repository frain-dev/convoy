// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/license/license.go
//
// Generated by this command:
//
//	mockgen --source internal/pkg/license/license.go --destination mocks/license.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLicenser is a mock of Licenser interface.
type MockLicenser struct {
	ctrl     *gomock.Controller
	recorder *MockLicenserMockRecorder
}

// MockLicenserMockRecorder is the mock recorder for MockLicenser.
type MockLicenserMockRecorder struct {
	mock *MockLicenser
}

// NewMockLicenser creates a new mock instance.
func NewMockLicenser(ctrl *gomock.Controller) *MockLicenser {
	mock := &MockLicenser{ctrl: ctrl}
	mock.recorder = &MockLicenserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenser) EXPECT() *MockLicenserMockRecorder {
	return m.recorder
}

// AdvancedEndpointMgmt mocks base method.
func (m *MockLicenser) AdvancedEndpointMgmt() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvancedEndpointMgmt")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AdvancedEndpointMgmt indicates an expected call of AdvancedEndpointMgmt.
func (mr *MockLicenserMockRecorder) AdvancedEndpointMgmt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvancedEndpointMgmt", reflect.TypeOf((*MockLicenser)(nil).AdvancedEndpointMgmt))
}

// AdvancedMsgBroker mocks base method.
func (m *MockLicenser) AdvancedMsgBroker() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvancedMsgBroker")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AdvancedMsgBroker indicates an expected call of AdvancedMsgBroker.
func (mr *MockLicenserMockRecorder) AdvancedMsgBroker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvancedMsgBroker", reflect.TypeOf((*MockLicenser)(nil).AdvancedMsgBroker))
}

// AdvancedRetentionPolicy mocks base method.
func (m *MockLicenser) AdvancedRetentionPolicy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvancedRetentionPolicy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AdvancedRetentionPolicy indicates an expected call of AdvancedRetentionPolicy.
func (mr *MockLicenserMockRecorder) AdvancedRetentionPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvancedRetentionPolicy", reflect.TypeOf((*MockLicenser)(nil).AdvancedRetentionPolicy))
}

// AdvancedSubscriptions mocks base method.
func (m *MockLicenser) AdvancedSubscriptions() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvancedSubscriptions")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AdvancedSubscriptions indicates an expected call of AdvancedSubscriptions.
func (mr *MockLicenserMockRecorder) AdvancedSubscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvancedSubscriptions", reflect.TypeOf((*MockLicenser)(nil).AdvancedSubscriptions))
}

// AsynqMonitoring mocks base method.
func (m *MockLicenser) AsynqMonitoring() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsynqMonitoring")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AsynqMonitoring indicates an expected call of AsynqMonitoring.
func (mr *MockLicenserMockRecorder) AsynqMonitoring() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsynqMonitoring", reflect.TypeOf((*MockLicenser)(nil).AsynqMonitoring))
}

// CanCreateOrg mocks base method.
func (m *MockLicenser) CanCreateOrg(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanCreateOrg", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanCreateOrg indicates an expected call of CanCreateOrg.
func (mr *MockLicenserMockRecorder) CanCreateOrg(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanCreateOrg", reflect.TypeOf((*MockLicenser)(nil).CanCreateOrg), ctx)
}

// CanCreateOrgMember mocks base method.
func (m *MockLicenser) CanCreateOrgMember(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanCreateOrgMember", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanCreateOrgMember indicates an expected call of CanCreateOrgMember.
func (mr *MockLicenserMockRecorder) CanCreateOrgMember(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanCreateOrgMember", reflect.TypeOf((*MockLicenser)(nil).CanCreateOrgMember), ctx)
}

// CanExportPrometheusMetrics mocks base method.
func (m *MockLicenser) CanExportPrometheusMetrics() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanExportPrometheusMetrics")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanExportPrometheusMetrics indicates an expected call of CanExportPrometheusMetrics.
func (mr *MockLicenserMockRecorder) CanExportPrometheusMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanExportPrometheusMetrics", reflect.TypeOf((*MockLicenser)(nil).CanExportPrometheusMetrics))
}

// CanUseForwardProxy mocks base method.
func (m *MockLicenser) CanUseForwardProxy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUseForwardProxy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanUseForwardProxy indicates an expected call of CanUseForwardProxy.
func (mr *MockLicenserMockRecorder) CanUseForwardProxy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUseForwardProxy", reflect.TypeOf((*MockLicenser)(nil).CanUseForwardProxy))
}

// HADeployment mocks base method.
func (m *MockLicenser) HADeployment() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HADeployment")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HADeployment indicates an expected call of HADeployment.
func (mr *MockLicenserMockRecorder) HADeployment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HADeployment", reflect.TypeOf((*MockLicenser)(nil).HADeployment))
}

// MutualTLS mocks base method.
func (m *MockLicenser) MutualTLS() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutualTLS")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MutualTLS indicates an expected call of MutualTLS.
func (mr *MockLicenserMockRecorder) MutualTLS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutualTLS", reflect.TypeOf((*MockLicenser)(nil).MutualTLS))
}

// SynchronousWebhooks mocks base method.
func (m *MockLicenser) SynchronousWebhooks() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronousWebhooks")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SynchronousWebhooks indicates an expected call of SynchronousWebhooks.
func (mr *MockLicenserMockRecorder) SynchronousWebhooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronousWebhooks", reflect.TypeOf((*MockLicenser)(nil).SynchronousWebhooks))
}

// Transformations mocks base method.
func (m *MockLicenser) Transformations() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transformations")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Transformations indicates an expected call of Transformations.
func (mr *MockLicenserMockRecorder) Transformations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transformations", reflect.TypeOf((*MockLicenser)(nil).Transformations))
}

// WebhookAnalytics mocks base method.
func (m *MockLicenser) WebhookAnalytics() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookAnalytics")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WebhookAnalytics indicates an expected call of WebhookAnalytics.
func (mr *MockLicenserMockRecorder) WebhookAnalytics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookAnalytics", reflect.TypeOf((*MockLicenser)(nil).WebhookAnalytics))
}
