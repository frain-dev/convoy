// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/socket/socket.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebSocketConnection is a mock of WebSocketConnection interface.
type MockWebSocketConnection struct {
	ctrl     *gomock.Controller
	recorder *MockWebSocketConnectionMockRecorder
}

// MockWebSocketConnectionMockRecorder is the mock recorder for MockWebSocketConnection.
type MockWebSocketConnectionMockRecorder struct {
	mock *MockWebSocketConnection
}

// NewMockWebSocketConnection creates a new mock instance.
func NewMockWebSocketConnection(ctrl *gomock.Controller) *MockWebSocketConnection {
	mock := &MockWebSocketConnection{ctrl: ctrl}
	mock.recorder = &MockWebSocketConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebSocketConnection) EXPECT() *MockWebSocketConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWebSocketConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWebSocketConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWebSocketConnection)(nil).Close))
}

// ReadMessage mocks base method.
func (m *MockWebSocketConnection) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockWebSocketConnectionMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockWebSocketConnection)(nil).ReadMessage))
}

// SetPingHandler mocks base method.
func (m *MockWebSocketConnection) SetPingHandler(h func(string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPingHandler", h)
}

// SetPingHandler indicates an expected call of SetPingHandler.
func (mr *MockWebSocketConnectionMockRecorder) SetPingHandler(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPingHandler", reflect.TypeOf((*MockWebSocketConnection)(nil).SetPingHandler), h)
}

// SetReadLimit mocks base method.
func (m *MockWebSocketConnection) SetReadLimit(limit int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReadLimit", limit)
}

// SetReadLimit indicates an expected call of SetReadLimit.
func (mr *MockWebSocketConnectionMockRecorder) SetReadLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadLimit", reflect.TypeOf((*MockWebSocketConnection)(nil).SetReadLimit), limit)
}

// WriteMessage mocks base method.
func (m *MockWebSocketConnection) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockWebSocketConnectionMockRecorder) WriteMessage(messageType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWebSocketConnection)(nil).WriteMessage), messageType, data)
}
