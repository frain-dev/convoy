// Code generated by MockGen. DO NOT EDIT.
// Source: queue/queue.go
//
// Generated by this command:
//
//	mockgen --source queue/queue.go --destination mocks/queue.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	convoy "github.com/frain-dev/convoy"
	queue "github.com/frain-dev/convoy/queue"
	gomock "go.uber.org/mock/gomock"
)

// MockQueuer is a mock of Queuer interface.
type MockQueuer struct {
	ctrl     *gomock.Controller
	recorder *MockQueuerMockRecorder
	isgomock struct{}
}

// MockQueuerMockRecorder is the mock recorder for MockQueuer.
type MockQueuerMockRecorder struct {
	mock *MockQueuer
}

// NewMockQueuer creates a new mock instance.
func NewMockQueuer(ctrl *gomock.Controller) *MockQueuer {
	mock := &MockQueuer{ctrl: ctrl}
	mock.recorder = &MockQueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueuer) EXPECT() *MockQueuerMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockQueuer) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockQueuerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockQueuer)(nil).GetName))
}

// Options mocks base method.
func (m *MockQueuer) Options() queue.QueueOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(queue.QueueOptions)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockQueuerMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockQueuer)(nil).Options))
}

// Write mocks base method.
func (m *MockQueuer) Write(arg0 context.Context, arg1 convoy.TaskName, arg2 convoy.QueueName, arg3 *queue.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockQueuerMockRecorder) Write(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockQueuer)(nil).Write), arg0, arg1, arg2, arg3)
}

// WriteWithoutTimeout mocks base method.
func (m *MockQueuer) WriteWithoutTimeout(arg0 context.Context, arg1 convoy.TaskName, arg2 convoy.QueueName, arg3 *queue.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteWithoutTimeout", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteWithoutTimeout indicates an expected call of WriteWithoutTimeout.
func (mr *MockQueuerMockRecorder) WriteWithoutTimeout(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteWithoutTimeout", reflect.TypeOf((*MockQueuer)(nil).WriteWithoutTimeout), arg0, arg1, arg2, arg3)
}
